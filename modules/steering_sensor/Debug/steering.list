
steering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800955c  0800955c  0000a55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009570  08009570  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009570  08009570  0000a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009578  08009578  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009578  08009578  0000a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800957c  0800957c  0000a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009580  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a3c  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab8  20000ab8  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001518e  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cba  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00023ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc0  00000000  00000000  00025000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d91  00000000  00000000  00025cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178b6  00000000  00000000  0004aa51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d87a3  00000000  00000000  00062307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013aaaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f8  00000000  00000000  0013aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0013f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009544 	.word	0x08009544

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009544 	.word	0x08009544

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fd75 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f81f 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f993 	bl	800082c <MX_GPIO_Init>
  MX_I2S3_Init();
 8000506:	f000 f92b 	bl	8000760 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050a:	f000 f959 	bl	80007c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800050e:	f008 fbc3 	bl	8008c98 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 8000512:	f000 f8ed 	bl	80006f0 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000516:	f000 f87d 	bl	8000614 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SteeringSensor_Init(&hadc1);
 800051a:	4808      	ldr	r0, [pc, #32]	@ (800053c <main+0x48>)
 800051c:	f000 fa8a 	bl	8000a34 <SteeringSensor_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000520:	f008 fbe0 	bl	8008ce4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    SteeringSensor_ReadAngles(&angle1, &angle2);
 8000524:	463a      	mov	r2, r7
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fae4 	bl	8000af8 <SteeringSensor_ReadAngles>
    HAL_Delay(100);
 8000530:	2064      	movs	r0, #100	@ 0x64
 8000532:	f000 fdcb 	bl	80010cc <HAL_Delay>
    MX_USB_HOST_Process();
 8000536:	bf00      	nop
 8000538:	e7f2      	b.n	8000520 <main+0x2c>
 800053a:	bf00      	nop
 800053c:	20000098 	.word	0x20000098

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 ff6a 	bl	8009428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	@ (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	@ (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fb3c 	bl	8004c44 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fa29 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fd9d 	bl	8005134 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 fa12 	bl	8000a28 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	@ 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000626:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000628:	4a2f      	ldr	r2, [pc, #188]	@ (80006e8 <MX_ADC1_Init+0xd4>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062c:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 800062e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800063a:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 800063c:	2201      	movs	r2, #1
 800063e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000656:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <MX_ADC1_Init+0xd8>)
 8000658:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000662:	2203      	movs	r2, #3
 8000664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000670:	2201      	movs	r2, #1
 8000672:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000676:	f000 fd4d 	bl	8001114 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000680:	f000 f9d2 	bl	8000a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800068c:	2303      	movs	r3, #3
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 8000696:	f000 ff1f 	bl	80014d8 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a0:	f000 f9c2 	bl	8000a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 80006b2:	f000 ff11 	bl	80014d8 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006bc:	f000 f9b4 	bl	8000a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006c4:	2303      	movs	r3, #3
 80006c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_ADC1_Init+0xd0>)
 80006ce:	f000 ff03 	bl	80014d8 <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006d8:	f000 f9a6 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000098 	.word	0x20000098
 80006e8:	40012000 	.word	0x40012000
 80006ec:	0f000001 	.word	0x0f000001

080006f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_CAN1_Init+0x68>)
 80006f6:	4a19      	ldr	r2, [pc, #100]	@ (800075c <MX_CAN1_Init+0x6c>)
 80006f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_CAN1_Init+0x68>)
 80006fc:	2206      	movs	r2, #6
 80006fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000708:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800070c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000710:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000714:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000718:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800071c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000726:	2201      	movs	r2, #1
 8000728:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_CAN1_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000732:	2201      	movs	r2, #1
 8000734:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000738:	2200      	movs	r2, #0
 800073a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_CAN1_Init+0x68>)
 800073e:	2200      	movs	r2, #0
 8000740:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_CAN1_Init+0x68>)
 8000744:	f001 f8e6 	bl	8001914 <HAL_CAN_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800074e:	f000 f96b 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000e0 	.word	0x200000e0
 800075c:	40006400 	.word	0x40006400

08000760 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_I2S3_Init+0x54>)
 8000766:	4a14      	ldr	r2, [pc, #80]	@ (80007b8 <MX_I2S3_Init+0x58>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_I2S3_Init+0x54>)
 800076c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000770:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_I2S3_Init+0x54>)
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_I2S3_Init+0x54>)
 8000788:	4a0c      	ldr	r2, [pc, #48]	@ (80007bc <MX_I2S3_Init+0x5c>)
 800078a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_I2S3_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_I2S3_Init+0x54>)
 80007a0:	f003 fdb0 	bl	8004304 <HAL_I2S_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007aa:	f000 f93d 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000108 	.word	0x20000108
 80007b8:	40003c00 	.word	0x40003c00
 80007bc:	00017700 	.word	0x00017700

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_SPI1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_SPI1_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_SPI1_Init+0x64>)
 8000812:	f004 ffbd 	bl	8005790 <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 f904 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000150 	.word	0x20000150
 8000828:	40013000 	.word	0x40013000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	@ 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b73      	ldr	r3, [pc, #460]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a72      	ldr	r2, [pc, #456]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b70      	ldr	r3, [pc, #448]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b6c      	ldr	r3, [pc, #432]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a6b      	ldr	r2, [pc, #428]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b69      	ldr	r3, [pc, #420]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b65      	ldr	r3, [pc, #404]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a64      	ldr	r2, [pc, #400]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b62      	ldr	r3, [pc, #392]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a5d      	ldr	r2, [pc, #372]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b57      	ldr	r3, [pc, #348]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a56      	ldr	r2, [pc, #344]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b54      	ldr	r3, [pc, #336]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b50      	ldr	r3, [pc, #320]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a4f      	ldr	r2, [pc, #316]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b4d      	ldr	r3, [pc, #308]	@ (8000a14 <MX_GPIO_Init+0x1e8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	484a      	ldr	r0, [pc, #296]	@ (8000a18 <MX_GPIO_Init+0x1ec>)
 80008f0:	f001 fbba 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4848      	ldr	r0, [pc, #288]	@ (8000a1c <MX_GPIO_Init+0x1f0>)
 80008fa:	f001 fbb5 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	2200      	movs	r2, #0
 8000900:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000904:	4846      	ldr	r0, [pc, #280]	@ (8000a20 <MX_GPIO_Init+0x1f4>)
 8000906:	f001 fbaf 	bl	8002068 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	483d      	ldr	r0, [pc, #244]	@ (8000a18 <MX_GPIO_Init+0x1ec>)
 8000922:	f001 fa05 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4837      	ldr	r0, [pc, #220]	@ (8000a1c <MX_GPIO_Init+0x1f0>)
 800093e:	f001 f9f7 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	482f      	ldr	r0, [pc, #188]	@ (8000a1c <MX_GPIO_Init+0x1f0>)
 800095e:	f001 f9e7 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000962:	2304      	movs	r3, #4
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	482b      	ldr	r0, [pc, #172]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000976:	f001 f9db 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800097a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098c:	2305      	movs	r3, #5
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4823      	ldr	r0, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000998:	f001 f9ca 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009a0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0x1f4>)
 80009b6:	f001 f9bb 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4814      	ldr	r0, [pc, #80]	@ (8000a20 <MX_GPIO_Init+0x1f4>)
 80009ce:	f001 f9af 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SCL_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin;
 80009d2:	2340      	movs	r3, #64	@ 0x40
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d6:	2312      	movs	r3, #18
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	2301      	movs	r3, #1
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e2:	2304      	movs	r3, #4
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 80009ee:	f001 f99f 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MX_GPIO_Init+0x1ec>)
 8000a08:	f001 f992 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	@ 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40020400 	.word	0x40020400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <SteeringSensor_Init>:
#define SENSOR_MAX_VOLT   4.5f
#define SENSOR_FULL_ANGLE 360.0f

static ADC_HandleTypeDef* hadc_local;

void SteeringSensor_Init(ADC_HandleTypeDef* hadc) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    hadc_local = hadc;
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <SteeringSensor_Init+0x1c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200001a8 	.word	0x200001a8

08000a54 <adc_to_voltage>:

static float adc_to_voltage(uint32_t raw) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    return (raw / MAX_ADC_VALUE) * VREF;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a66:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000a84 <adc_to_voltage+0x30>
 8000a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000a88 <adc_to_voltage+0x34>
 8000a72:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a76:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	457ff000 	.word	0x457ff000
 8000a88:	40533333 	.word	0x40533333

08000a8c <voltage_to_angle>:

static float voltage_to_angle(float voltage) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < SENSOR_MIN_VOLT) voltage = SENSOR_MIN_VOLT;
 8000a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa6:	d502      	bpl.n	8000aae <voltage_to_angle+0x22>
 8000aa8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000aac:	607b      	str	r3, [r7, #4]
    if (voltage > SENSOR_MAX_VOLT) voltage = SENSOR_MAX_VOLT;
 8000aae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ab2:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8000ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abe:	dd01      	ble.n	8000ac4 <voltage_to_angle+0x38>
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <voltage_to_angle+0x64>)
 8000ac2:	607b      	str	r3, [r7, #4]
    return ((voltage - SENSOR_MIN_VOLT) / (SENSOR_MAX_VOLT - SENSOR_MIN_VOLT)) * SENSOR_FULL_ANGLE;
 8000ac4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000acc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000ad0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000af4 <voltage_to_angle+0x68>
 8000adc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40900000 	.word	0x40900000
 8000af4:	43b40000 	.word	0x43b40000

08000af8 <SteeringSensor_ReadAngles>:

void SteeringSensor_ReadAngles(float* angle1, float* angle2) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    uint32_t adc_values[2];

    HAL_ADC_Start(hadc_local);
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <SteeringSensor_ReadAngles+0x9c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fb48 	bl	800119c <HAL_ADC_Start>

    for (int i = 0; i < 2; i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	e015      	b.n	8000b3e <SteeringSensor_ReadAngles+0x46>
        HAL_ADC_PollForConversion(hadc_local, HAL_MAX_DELAY);
 8000b12:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <SteeringSensor_ReadAngles+0x9c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fc43 	bl	80013a6 <HAL_ADC_PollForConversion>
        adc_values[i] = HAL_ADC_GetValue(hadc_local);
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <SteeringSensor_ReadAngles+0x9c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fcc9 	bl	80014bc <HAL_ADC_GetValue>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	3320      	adds	r3, #32
 8000b32:	443b      	add	r3, r7
 8000b34:	f843 2c14 	str.w	r2, [r3, #-20]
    for (int i = 0; i < 2; i++) {
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	dde6      	ble.n	8000b12 <SteeringSensor_ReadAngles+0x1a>
    }

    HAL_ADC_Stop(hadc_local);
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <SteeringSensor_ReadAngles+0x9c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fbf9 	bl	8001340 <HAL_ADC_Stop>

    float voltage1 = adc_to_voltage(adc_values[0]);  // OUT1
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff7f 	bl	8000a54 <adc_to_voltage>
 8000b56:	ed87 0a06 	vstr	s0, [r7, #24]
    float voltage2 = adc_to_voltage(adc_values[1]);  // OUT2
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff79 	bl	8000a54 <adc_to_voltage>
 8000b62:	ed87 0a05 	vstr	s0, [r7, #20]

    *angle1 = voltage_to_angle(voltage1);
 8000b66:	ed97 0a06 	vldr	s0, [r7, #24]
 8000b6a:	f7ff ff8f 	bl	8000a8c <voltage_to_angle>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	edc3 7a00 	vstr	s15, [r3]
    *angle2 = voltage_to_angle(voltage2);
 8000b78:	ed97 0a05 	vldr	s0, [r7, #20]
 8000b7c:	f7ff ff86 	bl	8000a8c <voltage_to_angle>
 8000b80:	eef0 7a40 	vmov.f32	s15, s0
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	edc3 7a00 	vstr	s15, [r3]
}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001a8 	.word	0x200001a8

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f001 f868 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_ADC_MspInit+0x7c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d127      	bne.n	8000c5a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a15      	ldr	r2, [pc, #84]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <HAL_ADC_MspInit+0x84>)
 8000c56:	f001 f86b 	bl	8001d30 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40012000 	.word	0x40012000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	@ (8000cf4 <HAL_CAN_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12c      	bne.n	8000cec <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_CAN_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <HAL_CAN_MspInit+0x88>)
 8000c9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_CAN_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_CAN_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_CAN_MspInit+0x88>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_CAN_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cdc:	2309      	movs	r3, #9
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_CAN_MspInit+0x8c>)
 8000ce8:	f001 f822 	bl	8001d30 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40006400 	.word	0x40006400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400

08000d00 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	@ 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <HAL_I2S_MspInit+0xf0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d15a      	bne.n	8000de6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d30:	2301      	movs	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d34:	23c0      	movs	r3, #192	@ 0xc0
 8000d36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f004 fbe3 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d4c:	f7ff fe6c 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	4a26      	ldr	r2, [pc, #152]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d74:	4a1f      	ldr	r2, [pc, #124]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <HAL_I2S_MspInit+0xf4>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000da4:	2310      	movs	r3, #16
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db4:	2306      	movs	r3, #6
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <HAL_I2S_MspInit+0xf8>)
 8000dc0:	f000 ffb6 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dc4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <HAL_I2S_MspInit+0xfc>)
 8000de2:	f000 ffa5 	bl	8001d30 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000de6:	bf00      	nop
 8000de8:	3738      	adds	r7, #56	@ 0x38
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40003c00 	.word	0x40003c00
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020800 	.word	0x40020800

08000e00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	@ (8000e84 <HAL_SPI_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12b      	bne.n	8000e7a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e5a:	23e0      	movs	r3, #224	@ 0xe0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <HAL_SPI_MspInit+0x8c>)
 8000e76:	f000 ff5b 	bl	8001d30 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f8d1 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <OTG_FS_IRQHandler+0x10>)
 8000ef6:	f001 fbb1 	bl	800265c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000590 	.word	0x20000590

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f008 fa90 	bl	8009458 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20020000 	.word	0x20020000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	200001ac 	.word	0x200001ac
 8000f6c:	20000ab8 	.word	0x20000ab8

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f98:	f7ff ffea 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f008 fa4f 	bl	8009464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fa95 	bl	80004f4 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fd8:	08009580 	.word	0x08009580
  ldr r2, =_sbss
 8000fdc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fe0:	20000ab8 	.word	0x20000ab8

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 fe4b 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fdbc 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe63 	bl	8001d16 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 fe2b 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	200001b0 	.word	0x200001b0

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200001b0 	.word	0x200001b0

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008

08001114 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e033      	b.n	8001192 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fd58 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	d118      	bne.n	8001184 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800115a:	f023 0302 	bic.w	r3, r3, #2
 800115e:	f043 0202 	orr.w	r2, r3, #2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fad8 	bl	800171c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f023 0303 	bic.w	r3, r3, #3
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	641a      	str	r2, [r3, #64]	@ 0x40
 8001182:	e001      	b.n	8001188 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Start+0x1a>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e0b2      	b.n	800131c <HAL_ADC_Start+0x180>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d018      	beq.n	80011fe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011dc:	4b52      	ldr	r3, [pc, #328]	@ (8001328 <HAL_ADC_Start+0x18c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a52      	ldr	r2, [pc, #328]	@ (800132c <HAL_ADC_Start+0x190>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9a      	lsrs	r2, r3, #18
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f9      	bne.n	80011f2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	d17a      	bne.n	8001302 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001236:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800124a:	d106      	bne.n	800125a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001250:	f023 0206 	bic.w	r2, r3, #6
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	645a      	str	r2, [r3, #68]	@ 0x44
 8001258:	e002      	b.n	8001260 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001268:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <HAL_ADC_Start+0x194>)
 800126a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001274:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2b00      	cmp	r3, #0
 8001280:	d12a      	bne.n	80012d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2b      	ldr	r2, [pc, #172]	@ (8001334 <HAL_ADC_Start+0x198>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d015      	beq.n	80012b8 <HAL_ADC_Start+0x11c>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a29      	ldr	r2, [pc, #164]	@ (8001338 <HAL_ADC_Start+0x19c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d105      	bne.n	80012a2 <HAL_ADC_Start+0x106>
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <HAL_ADC_Start+0x194>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00a      	beq.n	80012b8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a25      	ldr	r2, [pc, #148]	@ (800133c <HAL_ADC_Start+0x1a0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d136      	bne.n	800131a <HAL_ADC_Start+0x17e>
 80012ac:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_ADC_Start+0x194>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d130      	bne.n	800131a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d129      	bne.n	800131a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	e020      	b.n	800131a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a15      	ldr	r2, [pc, #84]	@ (8001334 <HAL_ADC_Start+0x198>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d11b      	bne.n	800131a <HAL_ADC_Start+0x17e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d114      	bne.n	800131a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	e00b      	b.n	800131a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f043 0210 	orr.w	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	40012300 	.word	0x40012300
 8001334:	40012000 	.word	0x40012000
 8001338:	40012100 	.word	0x40012100
 800133c:	40012200 	.word	0x40012200

08001340 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Stop+0x16>
 8001352:	2302      	movs	r3, #2
 8001354:	e021      	b.n	800139a <HAL_ADC_Stop+0x5a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0201 	bic.w	r2, r2, #1
 800136c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c2:	d113      	bne.n	80013ec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f043 0220 	orr.w	r2, r3, #32
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e063      	b.n	80014b4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ec:	f7ff fe62 	bl	80010b4 <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013f2:	e021      	b.n	8001438 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fa:	d01d      	beq.n	8001438 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_ADC_PollForConversion+0x6c>
 8001402:	f7ff fe57 	bl	80010b4 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d212      	bcs.n	8001438 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b02      	cmp	r3, #2
 800141e:	d00b      	beq.n	8001438 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f043 0204 	orr.w	r2, r3, #4
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e03d      	b.n	80014b4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b02      	cmp	r3, #2
 8001444:	d1d6      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f06f 0212 	mvn.w	r2, #18
 800144e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d123      	bne.n	80014b2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d11f      	bne.n	80014b2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001478:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800148a:	2b00      	cmp	r3, #0
 800148c:	d111      	bne.n	80014b2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1c>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e105      	b.n	8001700 <HAL_ADC_ConfigChannel+0x228>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b09      	cmp	r3, #9
 8001502:	d925      	bls.n	8001550 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68d9      	ldr	r1, [r3, #12]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	3b1e      	subs	r3, #30
 800151a:	2207      	movs	r2, #7
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43da      	mvns	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	400a      	ands	r2, r1
 8001528:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68d9      	ldr	r1, [r3, #12]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	4603      	mov	r3, r0
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4403      	add	r3, r0
 8001542:	3b1e      	subs	r3, #30
 8001544:	409a      	lsls	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	e022      	b.n	8001596 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6919      	ldr	r1, [r3, #16]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	2207      	movs	r2, #7
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	400a      	ands	r2, r1
 8001572:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6919      	ldr	r1, [r3, #16]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	4603      	mov	r3, r0
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4403      	add	r3, r0
 800158c:	409a      	lsls	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b06      	cmp	r3, #6
 800159c:	d824      	bhi.n	80015e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b05      	subs	r3, #5
 80015b0:	221f      	movs	r2, #31
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	400a      	ands	r2, r1
 80015be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	3b05      	subs	r3, #5
 80015da:	fa00 f203 	lsl.w	r2, r0, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015e6:	e04c      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	d824      	bhi.n	800163a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	3b23      	subs	r3, #35	@ 0x23
 8001602:	221f      	movs	r2, #31
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43da      	mvns	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	400a      	ands	r2, r1
 8001610:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b23      	subs	r3, #35	@ 0x23
 800162c:	fa00 f203 	lsl.w	r2, r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
 8001638:	e023      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3b41      	subs	r3, #65	@ 0x41
 800164c:	221f      	movs	r2, #31
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	400a      	ands	r2, r1
 800165a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b41      	subs	r3, #65	@ 0x41
 8001676:	fa00 f203 	lsl.w	r2, r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_ADC_ConfigChannel+0x234>)
 8001684:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <HAL_ADC_ConfigChannel+0x238>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d109      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b12      	cmp	r3, #18
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <HAL_ADC_ConfigChannel+0x238>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d123      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x21e>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d003      	beq.n	80016be <HAL_ADC_ConfigChannel+0x1e6>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b11      	cmp	r3, #17
 80016bc:	d11b      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d111      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_ADC_ConfigChannel+0x23c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <HAL_ADC_ConfigChannel+0x240>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9a      	lsrs	r2, r3, #18
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016e8:	e002      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f9      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40012300 	.word	0x40012300
 8001710:	40012000 	.word	0x40012000
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83

0800171c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001724:	4b79      	ldr	r3, [pc, #484]	@ (800190c <ADC_Init+0x1f0>)
 8001726:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	431a      	orrs	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	021a      	lsls	r2, r3, #8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001774:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	4a58      	ldr	r2, [pc, #352]	@ (8001910 <ADC_Init+0x1f4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d022      	beq.n	80017fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e00f      	b.n	800181a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001818:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0202 	bic.w	r2, r2, #2
 8001828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6899      	ldr	r1, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7e1b      	ldrb	r3, [r3, #24]
 8001834:	005a      	lsls	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01b      	beq.n	8001880 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001856:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001866:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6859      	ldr	r1, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	3b01      	subs	r3, #1
 8001874:	035a      	lsls	r2, r3, #13
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e007      	b.n	8001890 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800188e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800189e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	051a      	lsls	r2, r3, #20
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018d2:	025a      	lsls	r2, r3, #9
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6899      	ldr	r1, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	029a      	lsls	r2, r3, #10
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40012300 	.word	0x40012300
 8001910:	0f000001 	.word	0x0f000001

08001914 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0ed      	b.n	8001b02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff f99c 	bl	8000c70 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff fbb4 	bl	80010b4 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800194e:	e012      	b.n	8001976 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001950:	f7ff fbb0 	bl	80010b4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b0a      	cmp	r3, #10
 800195c:	d90b      	bls.n	8001976 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0c5      	b.n	8001b02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0e5      	beq.n	8001950 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0202 	bic.w	r2, r2, #2
 8001992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001994:	f7ff fb8e 	bl	80010b4 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800199a:	e012      	b.n	80019c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800199c:	f7ff fb8a 	bl	80010b4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b0a      	cmp	r3, #10
 80019a8:	d90b      	bls.n	80019c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2205      	movs	r2, #5
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e09f      	b.n	8001b02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e5      	bne.n	800199c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e1b      	ldrb	r3, [r3, #24]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d108      	bne.n	80019ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e007      	b.n	80019fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7e5b      	ldrb	r3, [r3, #25]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d108      	bne.n	8001a14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e007      	b.n	8001a24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7e9b      	ldrb	r3, [r3, #26]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0220 	orr.w	r2, r2, #32
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e007      	b.n	8001a4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0220 	bic.w	r2, r2, #32
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7edb      	ldrb	r3, [r3, #27]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d108      	bne.n	8001a68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0210 	bic.w	r2, r2, #16
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e007      	b.n	8001a78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0210 	orr.w	r2, r2, #16
 8001a76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7f1b      	ldrb	r3, [r3, #28]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d108      	bne.n	8001a92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0208 	orr.w	r2, r2, #8
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e007      	b.n	8001aa2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0208 	bic.w	r2, r2, #8
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7f5b      	ldrb	r3, [r3, #29]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d108      	bne.n	8001abc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0204 	orr.w	r2, r2, #4
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e007      	b.n	8001acc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0204 	bic.w	r2, r2, #4
 8001aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	ea42 0103 	orr.w	r1, r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	@ (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	@ 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff3e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff8e 	bl	8001c00 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5d 	bl	8001bac <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff31 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e16b      	b.n	8002024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 815a 	bne.w	800201e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80b4 	beq.w	800201e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b60      	ldr	r3, [pc, #384]	@ (800203c <HAL_GPIO_Init+0x30c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a5f      	ldr	r2, [pc, #380]	@ (800203c <HAL_GPIO_Init+0x30c>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800203c <HAL_GPIO_Init+0x30c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8002040 <HAL_GPIO_Init+0x310>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a52      	ldr	r2, [pc, #328]	@ (8002044 <HAL_GPIO_Init+0x314>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a51      	ldr	r2, [pc, #324]	@ (8002048 <HAL_GPIO_Init+0x318>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a50      	ldr	r2, [pc, #320]	@ (800204c <HAL_GPIO_Init+0x31c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	@ (8002050 <HAL_GPIO_Init+0x320>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	@ (8002054 <HAL_GPIO_Init+0x324>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	@ (8002058 <HAL_GPIO_Init+0x328>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	@ (800205c <HAL_GPIO_Init+0x32c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	@ (8002060 <HAL_GPIO_Init+0x330>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x20a>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	@ (8002040 <HAL_GPIO_Init+0x310>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a32      	ldr	r2, [pc, #200]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b30      	ldr	r3, [pc, #192]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1d      	ldr	r2, [pc, #116]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <HAL_GPIO_Init+0x334>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae90 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002084:	e003      	b.n	800208e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	619a      	str	r2, [r3, #24]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af02      	add	r7, sp, #8
 80020a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e059      	b.n	8002160 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f006 fe44 	bl	8008d54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2203      	movs	r2, #3
 80020d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020da:	d102      	bne.n	80020e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fc50 	bl	800598c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7c1a      	ldrb	r2, [r3, #16]
 80020f4:	f88d 2000 	strb.w	r2, [sp]
 80020f8:	3304      	adds	r3, #4
 80020fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fc:	f003 fbd1 	bl	80058a2 <USB_CoreInit>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e026      	b.n	8002160 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fc48 	bl	80059ae <USB_SetCurrentMode>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e017      	b.n	8002160 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7c1a      	ldrb	r2, [r3, #16]
 8002138:	f88d 2000 	strb.w	r2, [sp]
 800213c:	3304      	adds	r3, #4
 800213e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002140:	f003 fdf2 	bl	8005d28 <USB_HostInit>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e004      	b.n	8002160 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08b      	sub	sp, #44	@ 0x2c
 800216c:	af04      	add	r7, sp, #16
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	70fb      	strb	r3, [r7, #3]
 800217a:	460b      	mov	r3, r1
 800217c:	70bb      	strb	r3, [r7, #2]
 800217e:	4613      	mov	r3, r2
 8002180:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002182:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002184:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_HCD_HC_Init+0x2c>
 8002190:	2302      	movs	r3, #2
 8002192:	e09d      	b.n	80022d0 <HAL_HCD_HC_Init+0x168>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	3319      	adds	r3, #25
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3314      	adds	r3, #20
 80021c0:	787a      	ldrb	r2, [r7, #1]
 80021c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3315      	adds	r3, #21
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3326      	adds	r3, #38	@ 0x26
 80021e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80021ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	78bb      	ldrb	r3, [r7, #2]
 80021f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021f6:	b2d8      	uxtb	r0, r3
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3316      	adds	r3, #22
 8002206:	4602      	mov	r2, r0
 8002208:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fbc8 	bl	80029a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002214:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002218:	2b00      	cmp	r3, #0
 800221a:	da0a      	bge.n	8002232 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3317      	adds	r3, #23
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e009      	b.n	8002246 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	3317      	adds	r3, #23
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fed0 	bl	8005ff0 <USB_GetHostSpeed>
 8002250:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002252:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10b      	bne.n	8002272 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800225a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_HCD_HC_Init+0x10a>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2bbc      	cmp	r3, #188	@ 0xbc
 800226c:	d901      	bls.n	8002272 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800226e:	23bc      	movs	r3, #188	@ 0xbc
 8002270:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3318      	adds	r3, #24
 8002282:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	b298      	uxth	r0, r3
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	3328      	adds	r3, #40	@ 0x28
 800229c:	4602      	mov	r2, r0
 800229e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	787c      	ldrb	r4, [r7, #1]
 80022aa:	78ba      	ldrb	r2, [r7, #2]
 80022ac:	78f9      	ldrb	r1, [r7, #3]
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4623      	mov	r3, r4
 80022be:	f003 febf 	bl	8006040 <USB_HC_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}

080022d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_HCD_HC_Halt+0x1e>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e00f      	b.n	8002316 <HAL_HCD_HC_Halt+0x3e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f004 fa51 	bl	80067ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	70fb      	strb	r3, [r7, #3]
 8002332:	460b      	mov	r3, r1
 8002334:	70bb      	strb	r3, [r7, #2]
 8002336:	4613      	mov	r3, r2
 8002338:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3317      	adds	r3, #23
 800234a:	78ba      	ldrb	r2, [r7, #2]
 800234c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3326      	adds	r3, #38	@ 0x26
 800235e:	787a      	ldrb	r2, [r7, #1]
 8002360:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002362:	7c3b      	ldrb	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d114      	bne.n	8002392 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	332a      	adds	r3, #42	@ 0x2a
 8002378:	2203      	movs	r2, #3
 800237a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3319      	adds	r3, #25
 800238c:	7f3a      	ldrb	r2, [r7, #28]
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e009      	b.n	80023a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	332a      	adds	r3, #42	@ 0x2a
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023a6:	787b      	ldrb	r3, [r7, #1]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	f200 8102 	bhi.w	80025b2 <HAL_HCD_HC_SubmitRequest+0x292>
 80023ae:	a201      	add	r2, pc, #4	@ (adr r2, 80023b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	0800259d 	.word	0x0800259d
 80023bc:	08002489 	.word	0x08002489
 80023c0:	08002513 	.word	0x08002513
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80023c4:	7c3b      	ldrb	r3, [r7, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	f040 80f5 	bne.w	80025b6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80023cc:	78bb      	ldrb	r3, [r7, #2]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d12d      	bne.n	800242e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80023d2:	8b3b      	ldrh	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	333d      	adds	r3, #61	@ 0x3d
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	333d      	adds	r3, #61	@ 0x3d
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	332a      	adds	r3, #42	@ 0x2a
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002416:	e0ce      	b.n	80025b6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	332a      	adds	r3, #42	@ 0x2a
 8002428:	2202      	movs	r2, #2
 800242a:	701a      	strb	r2, [r3, #0]
      break;
 800242c:	e0c3      	b.n	80025b6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	331a      	adds	r3, #26
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 80b8 	bne.w	80025b6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	333c      	adds	r3, #60	@ 0x3c
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	332a      	adds	r3, #42	@ 0x2a
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
      break;
 8002470:	e0a1      	b.n	80025b6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	332a      	adds	r3, #42	@ 0x2a
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
      break;
 8002486:	e096      	b.n	80025b6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002488:	78bb      	ldrb	r3, [r7, #2]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d120      	bne.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333d      	adds	r3, #61	@ 0x3d
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	332a      	adds	r3, #42	@ 0x2a
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024b8:	e07e      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	332a      	adds	r3, #42	@ 0x2a
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
      break;
 80024ce:	e073      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	333c      	adds	r3, #60	@ 0x3c
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	332a      	adds	r3, #42	@ 0x2a
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
      break;
 80024fa:	e05d      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	332a      	adds	r3, #42	@ 0x2a
 800250c:	2202      	movs	r2, #2
 800250e:	701a      	strb	r2, [r3, #0]
      break;
 8002510:	e052      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002512:	78bb      	ldrb	r3, [r7, #2]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d120      	bne.n	800255a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	333d      	adds	r3, #61	@ 0x3d
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	332a      	adds	r3, #42	@ 0x2a
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002542:	e039      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	332a      	adds	r3, #42	@ 0x2a
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
      break;
 8002558:	e02e      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	333c      	adds	r3, #60	@ 0x3c
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	332a      	adds	r3, #42	@ 0x2a
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
      break;
 8002584:	e018      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	332a      	adds	r3, #42	@ 0x2a
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
      break;
 800259a:	e00d      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	332a      	adds	r3, #42	@ 0x2a
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80025b2:	bf00      	nop
 80025b4:	e000      	b.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80025b6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	332c      	adds	r3, #44	@ 0x2c
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	8b39      	ldrh	r1, [r7, #24]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4403      	add	r3, r0
 80025dc:	3334      	adds	r3, #52	@ 0x34
 80025de:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334c      	adds	r3, #76	@ 0x4c
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3338      	adds	r3, #56	@ 0x38
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3315      	adds	r3, #21
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	334d      	adds	r3, #77	@ 0x4d
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	3310      	adds	r3, #16
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	1d19      	adds	r1, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	799b      	ldrb	r3, [r3, #6]
 800264a:	461a      	mov	r2, r3
 800264c:	f003 fe24 	bl	8006298 <USB_HC_StartXfer>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop

0800265c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fb11 	bl	8005c9a <USB_GetMode>
 8002678:	4603      	mov	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 80fb 	bne.w	8002876 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f003 fad4 	bl	8005c32 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80f1 	beq.w	8002874 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 facb 	bl	8005c32 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026a6:	d104      	bne.n	80026b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80026b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fabb 	bl	8005c32 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026c6:	d104      	bne.n	80026d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 faab 	bl	8005c32 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026e6:	d104      	bne.n	80026f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fa9b 	bl	8005c32 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d103      	bne.n	800270e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2202      	movs	r2, #2
 800270c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fa8d 	bl	8005c32 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800271e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002722:	d120      	bne.n	8002766 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800272c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d113      	bne.n	8002766 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800273e:	2110      	movs	r1, #16
 8002740:	6938      	ldr	r0, [r7, #16]
 8002742:	f003 f980 	bl	8005a46 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002746:	6938      	ldr	r0, [r7, #16]
 8002748:	f003 f9af 	bl	8005aaa <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7a5b      	ldrb	r3, [r3, #9]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d105      	bne.n	8002760 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fba8 	bl	8005eb0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f006 fb75 	bl	8008e50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fa61 	bl	8005c32 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002776:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800277a:	d102      	bne.n	8002782 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f001 fd4d 	bl	800421c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 fa53 	bl	8005c32 <USB_ReadInterrupts>
 800278c:	4603      	mov	r3, r0
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b08      	cmp	r3, #8
 8002794:	d106      	bne.n	80027a4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f006 fb3e 	bl	8008e18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2208      	movs	r2, #8
 80027a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fa42 	bl	8005c32 <USB_ReadInterrupts>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027b8:	d139      	bne.n	800282e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 ffe4 	bl	800678c <USB_HC_ReadInterrupt>
 80027c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e025      	b.n	8002818 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d018      	beq.n	8002812 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027f6:	d106      	bne.n	8002806 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f905 	bl	8002a0e <HCD_HC_IN_IRQHandler>
 8002804:	e005      	b.n	8002812 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 ff67 	bl	80036e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	795b      	ldrb	r3, [r3, #5]
 800281c:	461a      	mov	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4293      	cmp	r3, r2
 8002822:	d3d3      	bcc.n	80027cc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800282c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f003 f9fd 	bl	8005c32 <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d101      	bne.n	8002846 <HAL_HCD_IRQHandler+0x1ea>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_HCD_IRQHandler+0x1ec>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d014      	beq.n	8002876 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0210 	bic.w	r2, r2, #16
 800285a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f001 fbfe 	bl	800405e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0210 	orr.w	r2, r2, #16
 8002870:	619a      	str	r2, [r3, #24]
 8002872:	e000      	b.n	8002876 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002874:	bf00      	nop
    }
  }
}
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_HCD_Start+0x16>
 800288e:	2302      	movs	r3, #2
 8002890:	e013      	b.n	80028ba <HAL_HCD_Start+0x3e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 fb6c 	bl	8005f7e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 f85d 	bl	800596a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_HCD_Stop+0x16>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e00d      	b.n	80028f4 <HAL_HCD_Stop+0x32>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 f8bf 	bl	8006a68 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fb0e 	bl	8005f2a <USB_ResetPort>
 800290e:	4603      	mov	r3, r0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334c      	adds	r3, #76	@ 0x4c
 8002934:	781b      	ldrb	r3, [r3, #0]
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3338      	adds	r3, #56	@ 0x38
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fb50 	bl	800601e <USB_GetCurrentFrame>
 800297e:	4603      	mov	r3, r0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fb2b 	bl	8005ff0 <USB_GetHostSpeed>
 800299a:	4603      	mov	r3, r0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	331a      	adds	r3, #26
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	331b      	adds	r3, #27
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3325      	adds	r3, #37	@ 0x25
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3324      	adds	r3, #36	@ 0x24
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 f913 	bl	8005c58 <USB_ReadChInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d11a      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	334d      	adds	r3, #77	@ 0x4d
 8002a5e:	2207      	movs	r2, #7
 8002a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fe9f 	bl	80067ae <USB_HC_Halt>
 8002a70:	e09e      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 f8ec 	bl	8005c58 <USB_ReadChInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a8a:	d11b      	bne.n	8002ac4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	334d      	adds	r3, #77	@ 0x4d
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fe76 	bl	80067ae <USB_HC_Halt>
 8002ac2:	e075      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 f8c3 	bl	8005c58 <USB_ReadChInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d11a      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2308      	movs	r3, #8
 8002aec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	334d      	adds	r3, #77	@ 0x4d
 8002afe:	2206      	movs	r2, #6
 8002b00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fe4f 	bl	80067ae <USB_HC_Halt>
 8002b10:	e04e      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 f89c 	bl	8005c58 <USB_ReadChInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2a:	d11b      	bne.n	8002b64 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	334d      	adds	r3, #77	@ 0x4d
 8002b50:	2209      	movs	r2, #9
 8002b52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fe26 	bl	80067ae <USB_HC_Halt>
 8002b62:	e025      	b.n	8002bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 f873 	bl	8005c58 <USB_ReadChInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b78:	2b80      	cmp	r3, #128	@ 0x80
 8002b7a:	d119      	bne.n	8002bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	334d      	adds	r3, #77	@ 0x4d
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fdff 	bl	80067ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 f84d 	bl	8005c58 <USB_ReadChInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bc8:	d112      	bne.n	8002bf0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fdeb 	bl	80067ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bea:	6093      	str	r3, [r2, #8]
 8002bec:	f000 bd75 	b.w	80036da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 f82d 	bl	8005c58 <USB_ReadChInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	f040 8128 	bne.w	8002e5a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	2320      	movs	r3, #32
 8002c1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	331b      	adds	r3, #27
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d119      	bne.n	8002c66 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	331b      	adds	r3, #27
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	0151      	lsls	r1, r2, #5
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	440a      	add	r2, r1
 8002c5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c64:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	799b      	ldrb	r3, [r3, #6]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01b      	beq.n	8002ca6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3330      	adds	r3, #48	@ 0x30
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	1ac9      	subs	r1, r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4403      	add	r3, r0
 8002ca2:	3338      	adds	r3, #56	@ 0x38
 8002ca4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	334d      	adds	r3, #77	@ 0x4d
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3344      	adds	r3, #68	@ 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2301      	movs	r3, #1
 8002cde:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	3326      	adds	r3, #38	@ 0x26
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3326      	adds	r3, #38	@ 0x26
 8002d06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d110      	bne.n	8002d2e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 fd4a 	bl	80067ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d26:	461a      	mov	r2, r3
 8002d28:	2310      	movs	r3, #16
 8002d2a:	6093      	str	r3, [r2, #8]
 8002d2c:	e03d      	b.n	8002daa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3326      	adds	r3, #38	@ 0x26
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d00a      	beq.n	8002d5a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3326      	adds	r3, #38	@ 0x26
 8002d54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d127      	bne.n	8002daa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	0151      	lsls	r1, r2, #5
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	440a      	add	r2, r1
 8002d70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d78:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	334c      	adds	r3, #76	@ 0x4c
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	334c      	adds	r3, #76	@ 0x4c
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f006 f861 	bl	8008e6c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	799b      	ldrb	r3, [r3, #6]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d13b      	bne.n	8002e2a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3338      	adds	r3, #56	@ 0x38
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4403      	add	r3, r0
 8002dd2:	3328      	adds	r3, #40	@ 0x28
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	440b      	add	r3, r1
 8002dd8:	1e59      	subs	r1, r3, #1
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4403      	add	r3, r0
 8002de8:	3328      	adds	r3, #40	@ 0x28
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8470 	beq.w	80036da <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	333c      	adds	r3, #60	@ 0x3c
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	333c      	adds	r3, #60	@ 0x3c
 8002e22:	4602      	mov	r2, r0
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	f000 bc58 	b.w	80036da <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	333c      	adds	r3, #60	@ 0x3c
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b2d8      	uxtb	r0, r3
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	333c      	adds	r3, #60	@ 0x3c
 8002e52:	4602      	mov	r2, r0
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	f000 bc40 	b.w	80036da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f002 fef8 	bl	8005c58 <USB_ReadChInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d131      	bne.n	8002ed6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2320      	movs	r3, #32
 8002e82:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	331a      	adds	r3, #26
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f040 841f 	bne.w	80036da <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	331b      	adds	r3, #27
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	334d      	adds	r3, #77	@ 0x4d
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f003 fc6e 	bl	80067ae <USB_HC_Halt>
 8002ed2:	f000 bc02 	b.w	80036da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 feba 	bl	8005c58 <USB_ReadChInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	f040 8305 	bne.w	80034fa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efc:	461a      	mov	r2, r3
 8002efe:	2302      	movs	r3, #2
 8002f00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	334d      	adds	r3, #77	@ 0x4d
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d114      	bne.n	8002f42 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	334d      	adds	r3, #77	@ 0x4d
 8002f28:	2202      	movs	r2, #2
 8002f2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	334c      	adds	r3, #76	@ 0x4c
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e2cc      	b.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	334d      	adds	r3, #77	@ 0x4d
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d114      	bne.n	8002f82 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	334d      	adds	r3, #77	@ 0x4d
 8002f68:	2202      	movs	r2, #2
 8002f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334c      	adds	r3, #76	@ 0x4c
 8002f7c:	2205      	movs	r2, #5
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e2ac      	b.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334d      	adds	r3, #77	@ 0x4d
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b07      	cmp	r3, #7
 8002f96:	d00b      	beq.n	8002fb0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334d      	adds	r3, #77	@ 0x4d
 8002fa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002faa:	2b09      	cmp	r3, #9
 8002fac:	f040 80a6 	bne.w	80030fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334d      	adds	r3, #77	@ 0x4d
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3344      	adds	r3, #68	@ 0x44
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	1c59      	adds	r1, r3, #1
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4403      	add	r3, r0
 8002fe4:	3344      	adds	r3, #68	@ 0x44
 8002fe6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3344      	adds	r3, #68	@ 0x44
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d943      	bls.n	8003086 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3344      	adds	r3, #68	@ 0x44
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	331a      	adds	r3, #26
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d123      	bne.n	8003070 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	331b      	adds	r3, #27
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	331c      	adds	r3, #28
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	0151      	lsls	r1, r2, #5
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	440a      	add	r2, r1
 8003066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800306a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800306e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	334c      	adds	r3, #76	@ 0x4c
 8003080:	2204      	movs	r2, #4
 8003082:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003084:	e229      	b.n	80034da <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334c      	adds	r3, #76	@ 0x4c
 8003096:	2202      	movs	r2, #2
 8003098:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3326      	adds	r3, #38	@ 0x26
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3326      	adds	r3, #38	@ 0x26
 80030c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	f040 8209 	bne.w	80034da <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030fa:	e1ee      	b.n	80034da <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	334d      	adds	r3, #77	@ 0x4d
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b05      	cmp	r3, #5
 8003110:	f040 80c8 	bne.w	80032a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334d      	adds	r3, #77	@ 0x4d
 8003124:	2202      	movs	r2, #2
 8003126:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	331b      	adds	r3, #27
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b01      	cmp	r3, #1
 800313c:	f040 81ce 	bne.w	80034dc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3326      	adds	r3, #38	@ 0x26
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d16b      	bne.n	800322e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3348      	adds	r3, #72	@ 0x48
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	1c59      	adds	r1, r3, #1
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4403      	add	r3, r0
 8003176:	3348      	adds	r3, #72	@ 0x48
 8003178:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3348      	adds	r3, #72	@ 0x48
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d943      	bls.n	8003218 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3348      	adds	r3, #72	@ 0x48
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	331b      	adds	r3, #27
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3344      	adds	r3, #68	@ 0x44
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d809      	bhi.n	80031e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	331c      	adds	r3, #28
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	0151      	lsls	r1, r2, #5
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	440a      	add	r2, r1
 80031f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003200:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334c      	adds	r3, #76	@ 0x4c
 8003212:	2204      	movs	r2, #4
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e014      	b.n	8003242 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334c      	adds	r3, #76	@ 0x4c
 8003228:	2202      	movs	r2, #2
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e009      	b.n	8003242 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334c      	adds	r3, #76	@ 0x4c
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3326      	adds	r3, #38	@ 0x26
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3326      	adds	r3, #38	@ 0x26
 8003268:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800326a:	2b02      	cmp	r3, #2
 800326c:	f040 8136 	bne.w	80034dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003286:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800328e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e11b      	b.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	f040 8081 	bne.w	80033be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	@ 0x4d
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	331b      	adds	r3, #27
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 80fa 	bne.w	80034dc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	334c      	adds	r3, #76	@ 0x4c
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	0151      	lsls	r1, r2, #5
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	440a      	add	r2, r1
 8003312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	0151      	lsls	r1, r2, #5
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	440a      	add	r2, r1
 8003332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800333a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	0151      	lsls	r1, r2, #5
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	440a      	add	r2, r1
 8003352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003356:	f023 0320 	bic.w	r3, r3, #32
 800335a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3326      	adds	r3, #38	@ 0x26
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3326      	adds	r3, #38	@ 0x26
 8003382:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003384:	2b02      	cmp	r3, #2
 8003386:	f040 80a9 	bne.w	80034dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	e08e      	b.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	334d      	adds	r3, #77	@ 0x4d
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d143      	bne.n	800345c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334d      	adds	r3, #77	@ 0x4d
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334c      	adds	r3, #76	@ 0x4c
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3326      	adds	r3, #38	@ 0x26
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3326      	adds	r3, #38	@ 0x26
 8003422:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003424:	2b02      	cmp	r3, #2
 8003426:	d159      	bne.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800343e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003446:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003454:	461a      	mov	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e03f      	b.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	334d      	adds	r3, #77	@ 0x4d
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d126      	bne.n	80034c0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	334d      	adds	r3, #77	@ 0x4d
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	3344      	adds	r3, #68	@ 0x44
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4403      	add	r3, r0
 80034a6:	3344      	adds	r3, #68	@ 0x44
 80034a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	334c      	adds	r3, #76	@ 0x4c
 80034ba:	2204      	movs	r2, #4
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e00d      	b.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	334d      	adds	r3, #77	@ 0x4d
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f000 8100 	beq.w	80036d8 <HCD_HC_IN_IRQHandler+0xcca>
 80034d8:	e000      	b.n	80034dc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	334c      	adds	r3, #76	@ 0x4c
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f005 fcba 	bl	8008e6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034f8:	e0ef      	b.n	80036da <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f002 fba8 	bl	8005c58 <USB_ReadChInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350e:	2b40      	cmp	r3, #64	@ 0x40
 8003510:	d12f      	bne.n	8003572 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	2340      	movs	r3, #64	@ 0x40
 8003522:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334d      	adds	r3, #77	@ 0x4d
 8003534:	2205      	movs	r2, #5
 8003536:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	331a      	adds	r3, #26
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3344      	adds	r3, #68	@ 0x44
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f003 f91f 	bl	80067ae <USB_HC_Halt>
 8003570:	e0b3      	b.n	80036da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fb6c 	bl	8005c58 <USB_ReadChInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b10      	cmp	r3, #16
 8003588:	f040 80a7 	bne.w	80036da <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3326      	adds	r3, #38	@ 0x26
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d11b      	bne.n	80035da <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3344      	adds	r3, #68	@ 0x44
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	334d      	adds	r3, #77	@ 0x4d
 80035c6:	2204      	movs	r2, #4
 80035c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 f8eb 	bl	80067ae <USB_HC_Halt>
 80035d8:	e03f      	b.n	800365a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	3326      	adds	r3, #38	@ 0x26
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3326      	adds	r3, #38	@ 0x26
 8003600:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003602:	2b02      	cmp	r3, #2
 8003604:	d129      	bne.n	800365a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	3344      	adds	r3, #68	@ 0x44
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	799b      	ldrb	r3, [r3, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HCD_HC_IN_IRQHandler+0xc2a>
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	331b      	adds	r3, #27
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d110      	bne.n	800365a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	334d      	adds	r3, #77	@ 0x4d
 8003648:	2204      	movs	r2, #4
 800364a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f003 f8aa 	bl	80067ae <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	331b      	adds	r3, #27
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d129      	bne.n	80036c4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	331b      	adds	r3, #27
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	0151      	lsls	r1, r2, #5
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	440a      	add	r2, r1
 800369a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800369e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	0151      	lsls	r1, r2, #5
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	440a      	add	r2, r1
 80036ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036be:	f043 0320 	orr.w	r3, r3, #32
 80036c2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d0:	461a      	mov	r2, r3
 80036d2:	2310      	movs	r3, #16
 80036d4:	6093      	str	r3, [r2, #8]
 80036d6:	e000      	b.n	80036da <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80036d8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f002 faaa 	bl	8005c58 <USB_ReadChInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d11b      	bne.n	8003746 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	2304      	movs	r3, #4
 800371e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334d      	adds	r3, #77	@ 0x4d
 8003730:	2207      	movs	r2, #7
 8003732:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f003 f836 	bl	80067ae <USB_HC_Halt>
 8003742:	f000 bc89 	b.w	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fa82 	bl	8005c58 <USB_ReadChInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 8082 	bne.w	8003864 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376c:	461a      	mov	r2, r3
 800376e:	2320      	movs	r3, #32
 8003770:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3319      	adds	r3, #25
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d124      	bne.n	80037d2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3319      	adds	r3, #25
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334c      	adds	r3, #76	@ 0x4c
 80037ac:	2202      	movs	r2, #2
 80037ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	334d      	adds	r3, #77	@ 0x4d
 80037c0:	2203      	movs	r2, #3
 80037c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 ffee 	bl	80067ae <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	331a      	adds	r3, #26
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 8437 	bne.w	8004058 <HCD_HC_OUT_IRQHandler+0x978>
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	331b      	adds	r3, #27
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 842b 	bne.w	8004058 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3326      	adds	r3, #38	@ 0x26
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d009      	beq.n	800382c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	331b      	adds	r3, #27
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	334d      	adds	r3, #77	@ 0x4d
 800383c:	2203      	movs	r2, #3
 800383e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f002 ffb0 	bl	80067ae <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3344      	adds	r3, #68	@ 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e3f9      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f002 f9f3 	bl	8005c58 <USB_ReadChInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800387c:	d111      	bne.n	80038a2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800388a:	461a      	mov	r2, r3
 800388c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003890:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f002 ff87 	bl	80067ae <USB_HC_Halt>
 80038a0:	e3da      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f002 f9d4 	bl	8005c58 <USB_ReadChInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d168      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	3344      	adds	r3, #68	@ 0x44
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 f9be 	bl	8005c58 <USB_ReadChInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	d112      	bne.n	800390c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3319      	adds	r3, #25
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003906:	461a      	mov	r2, r3
 8003908:	2340      	movs	r3, #64	@ 0x40
 800390a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	331b      	adds	r3, #27
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d019      	beq.n	8003956 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	331b      	adds	r3, #27
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	440a      	add	r2, r1
 800394c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003954:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003962:	461a      	mov	r2, r3
 8003964:	2301      	movs	r3, #1
 8003966:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	334d      	adds	r3, #77	@ 0x4d
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f002 ff12 	bl	80067ae <USB_HC_Halt>
 800398a:	e365      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f002 f95f 	bl	8005c58 <USB_ReadChInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d139      	bne.n	8003a18 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334d      	adds	r3, #77	@ 0x4d
 80039b4:	2205      	movs	r2, #5
 80039b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	331a      	adds	r3, #26
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3319      	adds	r3, #25
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	3344      	adds	r3, #68	@ 0x44
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 fed5 	bl	80067ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a10:	461a      	mov	r2, r3
 8003a12:	2340      	movs	r3, #64	@ 0x40
 8003a14:	6093      	str	r3, [r2, #8]
 8003a16:	e31f      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f002 f919 	bl	8005c58 <USB_ReadChInterrupts>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d11a      	bne.n	8003a66 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2308      	movs	r3, #8
 8003a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	334d      	adds	r3, #77	@ 0x4d
 8003a52:	2206      	movs	r2, #6
 8003a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f002 fea5 	bl	80067ae <USB_HC_Halt>
 8003a64:	e2f8      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 f8f2 	bl	8005c58 <USB_ReadChInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d144      	bne.n	8003b08 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3344      	adds	r3, #68	@ 0x44
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	334d      	adds	r3, #77	@ 0x4d
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3319      	adds	r3, #25
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d114      	bne.n	8003ae6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3318      	adds	r3, #24
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3319      	adds	r3, #25
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fe5d 	bl	80067ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b00:	461a      	mov	r2, r3
 8003b02:	2310      	movs	r3, #16
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	e2a7      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 f8a1 	bl	8005c58 <USB_ReadChInterrupts>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b80      	cmp	r3, #128	@ 0x80
 8003b1e:	f040 8083 	bne.w	8003c28 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	799b      	ldrb	r3, [r3, #6]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d111      	bne.n	8003b4e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	334d      	adds	r3, #77	@ 0x4d
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 fe31 	bl	80067ae <USB_HC_Halt>
 8003b4c:	e062      	b.n	8003c14 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3344      	adds	r3, #68	@ 0x44
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	1c59      	adds	r1, r3, #1
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4403      	add	r3, r0
 8003b6e:	3344      	adds	r3, #68	@ 0x44
 8003b70:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3344      	adds	r3, #68	@ 0x44
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d922      	bls.n	8003bce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3344      	adds	r3, #68	@ 0x44
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	334c      	adds	r3, #76	@ 0x4c
 8003bac:	2204      	movs	r2, #4
 8003bae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	334c      	adds	r3, #76	@ 0x4c
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f005 f950 	bl	8008e6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bcc:	e022      	b.n	8003c14 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	334c      	adds	r3, #76	@ 0x4c
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bf8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c00:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	6093      	str	r3, [r2, #8]
 8003c26:	e217      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f002 f811 	bl	8005c58 <USB_ReadChInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c40:	d11b      	bne.n	8003c7a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	334d      	adds	r3, #77	@ 0x4d
 8003c52:	2209      	movs	r2, #9
 8003c54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 fda5 	bl	80067ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c70:	461a      	mov	r2, r3
 8003c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c76:	6093      	str	r3, [r2, #8]
 8003c78:	e1ee      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 ffe8 	bl	8005c58 <USB_ReadChInterrupts>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	f040 81df 	bne.w	8004052 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	334d      	adds	r3, #77	@ 0x4d
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f040 8093 	bne.w	8003de4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	334d      	adds	r3, #77	@ 0x4d
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334c      	adds	r3, #76	@ 0x4c
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3326      	adds	r3, #38	@ 0x26
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d00b      	beq.n	8003d14 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3326      	adds	r3, #38	@ 0x26
 8003d0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	f040 8190 	bne.w	8004034 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	799b      	ldrb	r3, [r3, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d115      	bne.n	8003d48 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	333d      	adds	r3, #61	@ 0x3d
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	f083 0301 	eor.w	r3, r3, #1
 8003d34:	b2d8      	uxtb	r0, r3
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	333d      	adds	r3, #61	@ 0x3d
 8003d44:	4602      	mov	r2, r0
 8003d46:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	799b      	ldrb	r3, [r3, #6]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	f040 8171 	bne.w	8004034 <HCD_HC_OUT_IRQHandler+0x954>
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3334      	adds	r3, #52	@ 0x34
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8165 	beq.w	8004034 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3334      	adds	r3, #52	@ 0x34
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4403      	add	r3, r0
 8003d8a:	3328      	adds	r3, #40	@ 0x28
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	440b      	add	r3, r1
 8003d90:	1e59      	subs	r1, r3, #1
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4403      	add	r3, r0
 8003da0:	3328      	adds	r3, #40	@ 0x28
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003da8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 813f 	beq.w	8004034 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	333d      	adds	r3, #61	@ 0x3d
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2d8      	uxtb	r0, r3
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	333d      	adds	r3, #61	@ 0x3d
 8003dde:	4602      	mov	r2, r0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	e127      	b.n	8004034 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	334d      	adds	r3, #77	@ 0x4d
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d120      	bne.n	8003e3c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	334d      	adds	r3, #77	@ 0x4d
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	331b      	adds	r3, #27
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	f040 8107 	bne.w	8004034 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	334c      	adds	r3, #76	@ 0x4c
 8003e36:	2202      	movs	r2, #2
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	e0fb      	b.n	8004034 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334d      	adds	r3, #77	@ 0x4d
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d13a      	bne.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	334d      	adds	r3, #77	@ 0x4d
 8003e62:	2202      	movs	r2, #2
 8003e64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	334c      	adds	r3, #76	@ 0x4c
 8003e76:	2202      	movs	r2, #2
 8003e78:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	331b      	adds	r3, #27
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	f040 80d1 	bne.w	8004034 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	331b      	adds	r3, #27
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec4:	6053      	str	r3, [r2, #4]
 8003ec6:	e0b5      	b.n	8004034 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	334d      	adds	r3, #77	@ 0x4d
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d114      	bne.n	8003f08 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ede:	78fa      	ldrb	r2, [r7, #3]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	334d      	adds	r3, #77	@ 0x4d
 8003eee:	2202      	movs	r2, #2
 8003ef0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	334c      	adds	r3, #76	@ 0x4c
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e095      	b.n	8004034 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	334d      	adds	r3, #77	@ 0x4d
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d114      	bne.n	8003f48 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	334d      	adds	r3, #77	@ 0x4d
 8003f2e:	2202      	movs	r2, #2
 8003f30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	334c      	adds	r3, #76	@ 0x4c
 8003f42:	2205      	movs	r2, #5
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e075      	b.n	8004034 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	334d      	adds	r3, #77	@ 0x4d
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	d00a      	beq.n	8003f74 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334d      	adds	r3, #77	@ 0x4d
 8003f6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f70:	2b09      	cmp	r3, #9
 8003f72:	d170      	bne.n	8004056 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	334d      	adds	r3, #77	@ 0x4d
 8003f84:	2202      	movs	r2, #2
 8003f86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3344      	adds	r3, #68	@ 0x44
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	1c59      	adds	r1, r3, #1
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4403      	add	r3, r0
 8003fa8:	3344      	adds	r3, #68	@ 0x44
 8003faa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3344      	adds	r3, #68	@ 0x44
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d914      	bls.n	8003fec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3344      	adds	r3, #68	@ 0x44
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	334c      	adds	r3, #76	@ 0x4c
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fea:	e022      	b.n	8004032 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	334c      	adds	r3, #76	@ 0x4c
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004016:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800401e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004032:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	334c      	adds	r3, #76	@ 0x4c
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f004 ff0e 	bl	8008e6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004050:	e002      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004056:	bf00      	nop
  }
}
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	@ 0x28
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	0c5b      	lsrs	r3, r3, #17
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004092:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d004      	beq.n	80040a4 <HCD_RXQLVL_IRQHandler+0x46>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b05      	cmp	r3, #5
 800409e:	f000 80b6 	beq.w	800420e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040a2:	e0b7      	b.n	8004214 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80b3 	beq.w	8004212 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	332c      	adds	r3, #44	@ 0x2c
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a7 	beq.w	8004212 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	3338      	adds	r3, #56	@ 0x38
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	18d1      	adds	r1, r2, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4403      	add	r3, r0
 80040e8:	3334      	adds	r3, #52	@ 0x34
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4299      	cmp	r1, r3
 80040ee:	f200 8083 	bhi.w	80041f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	332c      	adds	r3, #44	@ 0x2c
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	b292      	uxth	r2, r2
 800410c:	4619      	mov	r1, r3
 800410e:	f001 fd38 	bl	8005b82 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	332c      	adds	r3, #44	@ 0x2c
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	18d1      	adds	r1, r2, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4403      	add	r3, r0
 8004136:	332c      	adds	r3, #44	@ 0x2c
 8004138:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3338      	adds	r3, #56	@ 0x38
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	18d1      	adds	r1, r2, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4403      	add	r3, r0
 800415e:	3338      	adds	r3, #56	@ 0x38
 8004160:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	0cdb      	lsrs	r3, r3, #19
 8004172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004176:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	3328      	adds	r3, #40	@ 0x28
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4293      	cmp	r3, r2
 8004190:	d13f      	bne.n	8004212 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03c      	beq.n	8004212 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	333c      	adds	r3, #60	@ 0x3c
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2d8      	uxtb	r0, r3
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	333c      	adds	r3, #60	@ 0x3c
 80041f2:	4602      	mov	r2, r0
 80041f4:	701a      	strb	r2, [r3, #0]
      break;
 80041f6:	e00c      	b.n	8004212 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334c      	adds	r3, #76	@ 0x4c
 8004208:	2204      	movs	r2, #4
 800420a:	701a      	strb	r2, [r3, #0]
      break;
 800420c:	e001      	b.n	8004212 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004212:	bf00      	nop
  }
}
 8004214:	bf00      	nop
 8004216:	3728      	adds	r7, #40	@ 0x28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004248:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d10b      	bne.n	800426c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f004 fde8 	bl	8008e34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f043 0302 	orr.w	r3, r3, #2
 800426a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b08      	cmp	r3, #8
 8004274:	d132      	bne.n	80042dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f043 0308 	orr.w	r3, r3, #8
 800427c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d126      	bne.n	80042d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7a5b      	ldrb	r3, [r3, #9]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d113      	bne.n	80042b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004296:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800429a:	d106      	bne.n	80042aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fe04 	bl	8005eb0 <USB_InitFSLSPClkSel>
 80042a8:	e011      	b.n	80042ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2101      	movs	r1, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 fdfd 	bl	8005eb0 <USB_InitFSLSPClkSel>
 80042b6:	e00a      	b.n	80042ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	79db      	ldrb	r3, [r3, #7]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d106      	bne.n	80042ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042c6:	461a      	mov	r2, r3
 80042c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80042cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f004 fdda 	bl	8008e88 <HAL_HCD_PortEnabled_Callback>
 80042d4:	e002      	b.n	80042dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f004 fde4 	bl	8008ea4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d103      	bne.n	80042ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f043 0320 	orr.w	r3, r3, #32
 80042ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6013      	str	r3, [r2, #0]
}
 80042fa:	bf00      	nop
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e128      	b.n	8004568 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a90      	ldr	r2, [pc, #576]	@ (8004570 <HAL_I2S_Init+0x26c>)
 800432e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc fce5 	bl	8000d00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800434c:	f023 030f 	bic.w	r3, r3, #15
 8004350:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2202      	movs	r2, #2
 8004358:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d060      	beq.n	8004424 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800436a:	2310      	movs	r3, #16
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e001      	b.n	8004374 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004370:	2320      	movs	r3, #32
 8004372:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b20      	cmp	r3, #32
 800437a:	d802      	bhi.n	8004382 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004382:	2001      	movs	r0, #1
 8004384:	f001 f9a4 	bl	80056d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004388:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004392:	d125      	bne.n	80043e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d010      	beq.n	80043be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	3305      	adds	r3, #5
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	e01f      	b.n	80043fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	461a      	mov	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	3305      	adds	r3, #5
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e00e      	b.n	80043fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	3305      	adds	r3, #5
 80043fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a5c      	ldr	r2, [pc, #368]	@ (8004574 <HAL_I2S_Init+0x270>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e003      	b.n	800442c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004424:	2302      	movs	r3, #2
 8004426:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d902      	bls.n	8004438 <HAL_I2S_Init+0x134>
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2bff      	cmp	r3, #255	@ 0xff
 8004436:	d907      	bls.n	8004448 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	f043 0210 	orr.w	r2, r3, #16
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e08f      	b.n	8004568 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	ea42 0103 	orr.w	r1, r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	430a      	orrs	r2, r1
 800445a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6851      	ldr	r1, [r2, #4]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6892      	ldr	r2, [r2, #8]
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68d2      	ldr	r2, [r2, #12]
 8004478:	4311      	orrs	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6992      	ldr	r2, [r2, #24]
 800447e:	430a      	orrs	r2, r1
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800448a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d161      	bne.n	8004558 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a38      	ldr	r2, [pc, #224]	@ (8004578 <HAL_I2S_Init+0x274>)
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a37      	ldr	r2, [pc, #220]	@ (800457c <HAL_I2S_Init+0x278>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d101      	bne.n	80044a8 <HAL_I2S_Init+0x1a4>
 80044a4:	4b36      	ldr	r3, [pc, #216]	@ (8004580 <HAL_I2S_Init+0x27c>)
 80044a6:	e001      	b.n	80044ac <HAL_I2S_Init+0x1a8>
 80044a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	4932      	ldr	r1, [pc, #200]	@ (800457c <HAL_I2S_Init+0x278>)
 80044b4:	428a      	cmp	r2, r1
 80044b6:	d101      	bne.n	80044bc <HAL_I2S_Init+0x1b8>
 80044b8:	4a31      	ldr	r2, [pc, #196]	@ (8004580 <HAL_I2S_Init+0x27c>)
 80044ba:	e001      	b.n	80044c0 <HAL_I2S_Init+0x1bc>
 80044bc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80044c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044c4:	f023 030f 	bic.w	r3, r3, #15
 80044c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2b      	ldr	r2, [pc, #172]	@ (800457c <HAL_I2S_Init+0x278>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_I2S_Init+0x1d4>
 80044d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004580 <HAL_I2S_Init+0x27c>)
 80044d6:	e001      	b.n	80044dc <HAL_I2S_Init+0x1d8>
 80044d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044dc:	2202      	movs	r2, #2
 80044de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a25      	ldr	r2, [pc, #148]	@ (800457c <HAL_I2S_Init+0x278>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_I2S_Init+0x1ea>
 80044ea:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <HAL_I2S_Init+0x27c>)
 80044ec:	e001      	b.n	80044f2 <HAL_I2S_Init+0x1ee>
 80044ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fe:	d003      	beq.n	8004508 <HAL_I2S_Init+0x204>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d103      	bne.n	8004510 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e001      	b.n	8004514 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800451e:	4313      	orrs	r3, r2
 8004520:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004528:	4313      	orrs	r3, r2
 800452a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004532:	4313      	orrs	r3, r2
 8004534:	b29a      	uxth	r2, r3
 8004536:	897b      	ldrh	r3, [r7, #10]
 8004538:	4313      	orrs	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004540:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0d      	ldr	r2, [pc, #52]	@ (800457c <HAL_I2S_Init+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_I2S_Init+0x24c>
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <HAL_I2S_Init+0x27c>)
 800454e:	e001      	b.n	8004554 <HAL_I2S_Init+0x250>
 8004550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004554:	897a      	ldrh	r2, [r7, #10]
 8004556:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	0800467b 	.word	0x0800467b
 8004574:	cccccccd 	.word	0xcccccccd
 8004578:	08004791 	.word	0x08004791
 800457c:	40003800 	.word	0x40003800
 8004580:	40003400 	.word	0x40003400

08004584 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	1c9a      	adds	r2, r3, #2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10e      	bne.n	8004614 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004604:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffb8 	bl	8004584 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	b292      	uxth	r2, r2
 8004630:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10e      	bne.n	8004672 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004662:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff93 	bl	8004598 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b04      	cmp	r3, #4
 8004694:	d13a      	bne.n	800470c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d109      	bne.n	80046b4 <I2S_IRQHandler+0x3a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b40      	cmp	r3, #64	@ 0x40
 80046ac:	d102      	bne.n	80046b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff ffb4 	bl	800461c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ba:	2b40      	cmp	r3, #64	@ 0x40
 80046bc:	d126      	bne.n	800470c <I2S_IRQHandler+0x92>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d11f      	bne.n	800470c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff50 	bl	80045ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b03      	cmp	r3, #3
 8004716:	d136      	bne.n	8004786 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	d109      	bne.n	8004736 <I2S_IRQHandler+0xbc>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b80      	cmp	r3, #128	@ 0x80
 800472e:	d102      	bne.n	8004736 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ff45 	bl	80045c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b08      	cmp	r3, #8
 800473e:	d122      	bne.n	8004786 <I2S_IRQHandler+0x10c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b20      	cmp	r3, #32
 800474c:	d11b      	bne.n	8004786 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800475c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004778:	f043 0204 	orr.w	r2, r3, #4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff ff13 	bl	80045ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a92      	ldr	r2, [pc, #584]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80047aa:	4b92      	ldr	r3, [pc, #584]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047ac:	e001      	b.n	80047b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80047ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a8b      	ldr	r2, [pc, #556]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d101      	bne.n	80047cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047c8:	4b8a      	ldr	r3, [pc, #552]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047ca:	e001      	b.n	80047d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047dc:	d004      	beq.n	80047e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8099 	bne.w	800491a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f925 	bl	8004a4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f9c8 	bl	8004bac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004822:	2b40      	cmp	r3, #64	@ 0x40
 8004824:	d13a      	bne.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d035      	beq.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a6e      	ldr	r2, [pc, #440]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800483a:	4b6e      	ldr	r3, [pc, #440]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800483c:	e001      	b.n	8004842 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800483e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4969      	ldr	r1, [pc, #420]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800484a:	428b      	cmp	r3, r1
 800484c:	d101      	bne.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800484e:	4b69      	ldr	r3, [pc, #420]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004850:	e001      	b.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004852:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004856:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800485a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800486a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fe88 	bl	80045ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	f040 80c3 	bne.w	8004a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80bd 	beq.w	8004a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a49      	ldr	r2, [pc, #292]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048ce:	4b49      	ldr	r3, [pc, #292]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048d0:	e001      	b.n	80048d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4944      	ldr	r1, [pc, #272]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048de:	428b      	cmp	r3, r1
 80048e0:	d101      	bne.n	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80048e2:	4b44      	ldr	r3, [pc, #272]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048e4:	e001      	b.n	80048ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80048e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	f043 0204 	orr.w	r2, r3, #4
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fe4a 	bl	80045ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004918:	e089      	b.n	8004a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d107      	bne.n	8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8be 	bl	8004ab0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8fd 	bl	8004b48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b40      	cmp	r3, #64	@ 0x40
 8004956:	d12f      	bne.n	80049b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d02a      	beq.n	80049b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004970:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1e      	ldr	r2, [pc, #120]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800497e:	e001      	b.n	8004984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004980:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4919      	ldr	r1, [pc, #100]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800498c:	428b      	cmp	r3, r1
 800498e:	d101      	bne.n	8004994 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004990:	4b18      	ldr	r3, [pc, #96]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004992:	e001      	b.n	8004998 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004998:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800499c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	f043 0202 	orr.w	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fdfa 	bl	80045ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d136      	bne.n	8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d031      	beq.n	8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a07      	ldr	r2, [pc, #28]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049d6:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049d8:	e001      	b.n	80049de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4902      	ldr	r1, [pc, #8]	@ (80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049e6:	428b      	cmp	r3, r1
 80049e8:	d106      	bne.n	80049f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80049ea:	4b02      	ldr	r3, [pc, #8]	@ (80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049ec:	e006      	b.n	80049fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80049ee:	bf00      	nop
 80049f0:	40003800 	.word	0x40003800
 80049f4:	40003400 	.word	0x40003400
 80049f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a00:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fdc0 	bl	80045ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a2c:	e000      	b.n	8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a2e:	bf00      	nop
}
 8004a30:	bf00      	nop
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	1c99      	adds	r1, r3, #2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a5e:	881a      	ldrh	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d113      	bne.n	8004aa6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ffc9 	bl	8004a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c99      	adds	r1, r3, #2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ac2:	8819      	ldrh	r1, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b40 <I2SEx_TxISR_I2SExt+0x90>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <I2SEx_TxISR_I2SExt+0x22>
 8004ace:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <I2SEx_TxISR_I2SExt+0x94>)
 8004ad0:	e001      	b.n	8004ad6 <I2SEx_TxISR_I2SExt+0x26>
 8004ad2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d121      	bne.n	8004b36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a12      	ldr	r2, [pc, #72]	@ (8004b40 <I2SEx_TxISR_I2SExt+0x90>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <I2SEx_TxISR_I2SExt+0x50>
 8004afc:	4b11      	ldr	r3, [pc, #68]	@ (8004b44 <I2SEx_TxISR_I2SExt+0x94>)
 8004afe:	e001      	b.n	8004b04 <I2SEx_TxISR_I2SExt+0x54>
 8004b00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	490d      	ldr	r1, [pc, #52]	@ (8004b40 <I2SEx_TxISR_I2SExt+0x90>)
 8004b0c:	428b      	cmp	r3, r1
 8004b0e:	d101      	bne.n	8004b14 <I2SEx_TxISR_I2SExt+0x64>
 8004b10:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <I2SEx_TxISR_I2SExt+0x94>)
 8004b12:	e001      	b.n	8004b18 <I2SEx_TxISR_I2SExt+0x68>
 8004b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ff81 	bl	8004a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40003800 	.word	0x40003800
 8004b44:	40003400 	.word	0x40003400

08004b48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68d8      	ldr	r0, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	1c99      	adds	r1, r3, #2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b60:	b282      	uxth	r2, r0
 8004b62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d113      	bne.n	8004ba4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ff4a 	bl	8004a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a20      	ldr	r2, [pc, #128]	@ (8004c3c <I2SEx_RxISR_I2SExt+0x90>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <I2SEx_RxISR_I2SExt+0x16>
 8004bbe:	4b20      	ldr	r3, [pc, #128]	@ (8004c40 <I2SEx_RxISR_I2SExt+0x94>)
 8004bc0:	e001      	b.n	8004bc6 <I2SEx_RxISR_I2SExt+0x1a>
 8004bc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc6:	68d8      	ldr	r0, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	1c99      	adds	r1, r3, #2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004bd2:	b282      	uxth	r2, r0
 8004bd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d121      	bne.n	8004c32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a12      	ldr	r2, [pc, #72]	@ (8004c3c <I2SEx_RxISR_I2SExt+0x90>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <I2SEx_RxISR_I2SExt+0x50>
 8004bf8:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <I2SEx_RxISR_I2SExt+0x94>)
 8004bfa:	e001      	b.n	8004c00 <I2SEx_RxISR_I2SExt+0x54>
 8004bfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	490d      	ldr	r1, [pc, #52]	@ (8004c3c <I2SEx_RxISR_I2SExt+0x90>)
 8004c08:	428b      	cmp	r3, r1
 8004c0a:	d101      	bne.n	8004c10 <I2SEx_RxISR_I2SExt+0x64>
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c40 <I2SEx_RxISR_I2SExt+0x94>)
 8004c0e:	e001      	b.n	8004c14 <I2SEx_RxISR_I2SExt+0x68>
 8004c10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ff03 	bl	8004a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40003800 	.word	0x40003800
 8004c40:	40003400 	.word	0x40003400

08004c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e267      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d075      	beq.n	8004d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c62:	4b88      	ldr	r3, [pc, #544]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d00c      	beq.n	8004c88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6e:	4b85      	ldr	r3, [pc, #532]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d112      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7a:	4b82      	ldr	r3, [pc, #520]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c86:	d10b      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c88:	4b7e      	ldr	r3, [pc, #504]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05b      	beq.n	8004d4c <HAL_RCC_OscConfig+0x108>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d157      	bne.n	8004d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e242      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x74>
 8004caa:	4b76      	ldr	r3, [pc, #472]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a75      	ldr	r2, [pc, #468]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0xb0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x98>
 8004cc2:	4b70      	ldr	r3, [pc, #448]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a6f      	ldr	r2, [pc, #444]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b6d      	ldr	r3, [pc, #436]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a6c      	ldr	r2, [pc, #432]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xb0>
 8004cdc:	4b69      	ldr	r3, [pc, #420]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a68      	ldr	r2, [pc, #416]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b66      	ldr	r3, [pc, #408]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a65      	ldr	r2, [pc, #404]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fc f9da 	bl	80010b4 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc f9d6 	bl	80010b4 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e207      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b5b      	ldr	r3, [pc, #364]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xc0>
 8004d22:	e014      	b.n	8004d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fc f9c6 	bl	80010b4 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fc f9c2 	bl	80010b4 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	@ 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e1f3      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	4b51      	ldr	r3, [pc, #324]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0xe8>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d063      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d66:	4b47      	ldr	r3, [pc, #284]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d11c      	bne.n	8004dac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d72:	4b44      	ldr	r3, [pc, #272]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d116      	bne.n	8004dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	4b41      	ldr	r3, [pc, #260]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_RCC_OscConfig+0x152>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e1c7      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d96:	4b3b      	ldr	r3, [pc, #236]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4937      	ldr	r1, [pc, #220]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004daa:	e03a      	b.n	8004e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db4:	4b34      	ldr	r3, [pc, #208]	@ (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dba:	f7fc f97b 	bl	80010b4 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc2:	f7fc f977 	bl	80010b4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e1a8      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de0:	4b28      	ldr	r3, [pc, #160]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4925      	ldr	r1, [pc, #148]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	e015      	b.n	8004e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df6:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <HAL_RCC_OscConfig+0x244>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fc f95a 	bl	80010b4 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fc f956 	bl	80010b4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e187      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	4b1b      	ldr	r3, [pc, #108]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d036      	beq.n	8004e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e36:	4b15      	ldr	r3, [pc, #84]	@ (8004e8c <HAL_RCC_OscConfig+0x248>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fc f93a 	bl	80010b4 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fc f936 	bl	80010b4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e167      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e56:	4b0b      	ldr	r3, [pc, #44]	@ (8004e84 <HAL_RCC_OscConfig+0x240>)
 8004e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x200>
 8004e62:	e01b      	b.n	8004e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e64:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_OscConfig+0x248>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6a:	f7fc f923 	bl	80010b4 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e70:	e00e      	b.n	8004e90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e72:	f7fc f91f 	bl	80010b4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d907      	bls.n	8004e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e150      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	42470000 	.word	0x42470000
 8004e8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e90:	4b88      	ldr	r3, [pc, #544]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ea      	bne.n	8004e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8097 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eae:	4b81      	ldr	r3, [pc, #516]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10f      	bne.n	8004eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eca:	4b7a      	ldr	r3, [pc, #488]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eda:	4b77      	ldr	r3, [pc, #476]	@ (80050b8 <HAL_RCC_OscConfig+0x474>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d118      	bne.n	8004f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee6:	4b74      	ldr	r3, [pc, #464]	@ (80050b8 <HAL_RCC_OscConfig+0x474>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a73      	ldr	r2, [pc, #460]	@ (80050b8 <HAL_RCC_OscConfig+0x474>)
 8004eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef2:	f7fc f8df 	bl	80010b4 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efa:	f7fc f8db 	bl	80010b4 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e10c      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80050b8 <HAL_RCC_OscConfig+0x474>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCC_OscConfig+0x2ea>
 8004f20:	4b64      	ldr	r3, [pc, #400]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f24:	4a63      	ldr	r2, [pc, #396]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2c:	e01c      	b.n	8004f68 <HAL_RCC_OscConfig+0x324>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b05      	cmp	r3, #5
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x30c>
 8004f36:	4b5f      	ldr	r3, [pc, #380]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	4a5e      	ldr	r2, [pc, #376]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	f043 0304 	orr.w	r3, r3, #4
 8004f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f42:	4b5c      	ldr	r3, [pc, #368]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f46:	4a5b      	ldr	r2, [pc, #364]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f4e:	e00b      	b.n	8004f68 <HAL_RCC_OscConfig+0x324>
 8004f50:	4b58      	ldr	r3, [pc, #352]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f54:	4a57      	ldr	r2, [pc, #348]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5c:	4b55      	ldr	r3, [pc, #340]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f60:	4a54      	ldr	r2, [pc, #336]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f62:	f023 0304 	bic.w	r3, r3, #4
 8004f66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fc f8a0 	bl	80010b4 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7fc f89c 	bl	80010b4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e0cb      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	4b49      	ldr	r3, [pc, #292]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ee      	beq.n	8004f78 <HAL_RCC_OscConfig+0x334>
 8004f9a:	e014      	b.n	8004fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9c:	f7fc f88a 	bl	80010b4 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa4:	f7fc f886 	bl	80010b4 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e0b5      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fba:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ee      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fcc:	4b39      	ldr	r3, [pc, #228]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	4a38      	ldr	r2, [pc, #224]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80a1 	beq.w	8005124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe2:	4b34      	ldr	r3, [pc, #208]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d05c      	beq.n	80050a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d141      	bne.n	800507a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff6:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <HAL_RCC_OscConfig+0x478>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fc f85a 	bl	80010b4 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fc f856 	bl	80010b4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e087      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	4b27      	ldr	r3, [pc, #156]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	019b      	lsls	r3, r3, #6
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	491b      	ldr	r1, [pc, #108]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800504c:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <HAL_RCC_OscConfig+0x478>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fc f82f 	bl	80010b4 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505a:	f7fc f82b 	bl	80010b4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e05c      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506c:	4b11      	ldr	r3, [pc, #68]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x416>
 8005078:	e054      	b.n	8005124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507a:	4b10      	ldr	r3, [pc, #64]	@ (80050bc <HAL_RCC_OscConfig+0x478>)
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005080:	f7fc f818 	bl	80010b4 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005088:	f7fc f814 	bl	80010b4 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e045      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509a:	4b06      	ldr	r3, [pc, #24]	@ (80050b4 <HAL_RCC_OscConfig+0x470>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f0      	bne.n	8005088 <HAL_RCC_OscConfig+0x444>
 80050a6:	e03d      	b.n	8005124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e038      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40007000 	.word	0x40007000
 80050bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005130 <HAL_RCC_OscConfig+0x4ec>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d028      	beq.n	8005120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d121      	bne.n	8005120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d11a      	bne.n	8005120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d111      	bne.n	8005120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40023800 	.word	0x40023800

08005134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0cc      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005148:	4b68      	ldr	r3, [pc, #416]	@ (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d90c      	bls.n	8005170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b65      	ldr	r3, [pc, #404]	@ (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b63      	ldr	r3, [pc, #396]	@ (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0b8      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005188:	4b59      	ldr	r3, [pc, #356]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a58      	ldr	r2, [pc, #352]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a0:	4b53      	ldr	r3, [pc, #332]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a52      	ldr	r2, [pc, #328]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ac:	4b50      	ldr	r3, [pc, #320]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	494d      	ldr	r1, [pc, #308]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d044      	beq.n	8005254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d2:	4b47      	ldr	r3, [pc, #284]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d119      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e07f      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d003      	beq.n	80051f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	4b3f      	ldr	r3, [pc, #252]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e06f      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005202:	4b3b      	ldr	r3, [pc, #236]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e067      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005212:	4b37      	ldr	r3, [pc, #220]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f023 0203 	bic.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4934      	ldr	r1, [pc, #208]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	4313      	orrs	r3, r2
 8005222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005224:	f7fb ff46 	bl	80010b4 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522a:	e00a      	b.n	8005242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522c:	f7fb ff42 	bl	80010b4 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e04f      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005242:	4b2b      	ldr	r3, [pc, #172]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 020c 	and.w	r2, r3, #12
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	429a      	cmp	r2, r3
 8005252:	d1eb      	bne.n	800522c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005254:	4b25      	ldr	r3, [pc, #148]	@ (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d20c      	bcs.n	800527c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b22      	ldr	r3, [pc, #136]	@ (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e032      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005288:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4916      	ldr	r1, [pc, #88]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a6:	4b12      	ldr	r3, [pc, #72]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	490e      	ldr	r1, [pc, #56]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ba:	f000 f821 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	490a      	ldr	r1, [pc, #40]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052d6:	4b09      	ldr	r3, [pc, #36]	@ (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fb fea6 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40023c00 	.word	0x40023c00
 80052f0:	40023800 	.word	0x40023800
 80052f4:	08009560 	.word	0x08009560
 80052f8:	20000000 	.word	0x20000000
 80052fc:	20000004 	.word	0x20000004

08005300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005304:	b094      	sub	sp, #80	@ 0x50
 8005306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005318:	4b79      	ldr	r3, [pc, #484]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x200>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 030c 	and.w	r3, r3, #12
 8005320:	2b08      	cmp	r3, #8
 8005322:	d00d      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x40>
 8005324:	2b08      	cmp	r3, #8
 8005326:	f200 80e1 	bhi.w	80054ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0x34>
 800532e:	2b04      	cmp	r3, #4
 8005330:	d003      	beq.n	800533a <HAL_RCC_GetSysClockFreq+0x3a>
 8005332:	e0db      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b73      	ldr	r3, [pc, #460]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x204>)
 8005336:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005338:	e0db      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800533a:	4b73      	ldr	r3, [pc, #460]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x208>)
 800533c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800533e:	e0d8      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005340:	4b6f      	ldr	r3, [pc, #444]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x200>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005348:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800534a:	4b6d      	ldr	r3, [pc, #436]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x200>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d063      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005356:	4b6a      	ldr	r3, [pc, #424]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x200>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	2200      	movs	r2, #0
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005360:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005368:	633b      	str	r3, [r7, #48]	@ 0x30
 800536a:	2300      	movs	r3, #0
 800536c:	637b      	str	r3, [r7, #52]	@ 0x34
 800536e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005372:	4622      	mov	r2, r4
 8005374:	462b      	mov	r3, r5
 8005376:	f04f 0000 	mov.w	r0, #0
 800537a:	f04f 0100 	mov.w	r1, #0
 800537e:	0159      	lsls	r1, r3, #5
 8005380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005384:	0150      	lsls	r0, r2, #5
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4621      	mov	r1, r4
 800538c:	1a51      	subs	r1, r2, r1
 800538e:	6139      	str	r1, [r7, #16]
 8005390:	4629      	mov	r1, r5
 8005392:	eb63 0301 	sbc.w	r3, r3, r1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a4:	4659      	mov	r1, fp
 80053a6:	018b      	lsls	r3, r1, #6
 80053a8:	4651      	mov	r1, sl
 80053aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ae:	4651      	mov	r1, sl
 80053b0:	018a      	lsls	r2, r1, #6
 80053b2:	4651      	mov	r1, sl
 80053b4:	ebb2 0801 	subs.w	r8, r2, r1
 80053b8:	4659      	mov	r1, fp
 80053ba:	eb63 0901 	sbc.w	r9, r3, r1
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d2:	4690      	mov	r8, r2
 80053d4:	4699      	mov	r9, r3
 80053d6:	4623      	mov	r3, r4
 80053d8:	eb18 0303 	adds.w	r3, r8, r3
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	462b      	mov	r3, r5
 80053e0:	eb49 0303 	adc.w	r3, r9, r3
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053f2:	4629      	mov	r1, r5
 80053f4:	024b      	lsls	r3, r1, #9
 80053f6:	4621      	mov	r1, r4
 80053f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053fc:	4621      	mov	r1, r4
 80053fe:	024a      	lsls	r2, r1, #9
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005406:	2200      	movs	r2, #0
 8005408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800540a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800540c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005410:	f7fa feda 	bl	80001c8 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4613      	mov	r3, r2
 800541a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800541c:	e058      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541e:	4b38      	ldr	r3, [pc, #224]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x200>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	2200      	movs	r2, #0
 8005426:	4618      	mov	r0, r3
 8005428:	4611      	mov	r1, r2
 800542a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	2300      	movs	r3, #0
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
 8005434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	f04f 0000 	mov.w	r0, #0
 8005440:	f04f 0100 	mov.w	r1, #0
 8005444:	0159      	lsls	r1, r3, #5
 8005446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800544a:	0150      	lsls	r0, r2, #5
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4641      	mov	r1, r8
 8005452:	ebb2 0a01 	subs.w	sl, r2, r1
 8005456:	4649      	mov	r1, r9
 8005458:	eb63 0b01 	sbc.w	fp, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800546c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005470:	ebb2 040a 	subs.w	r4, r2, sl
 8005474:	eb63 050b 	sbc.w	r5, r3, fp
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	00eb      	lsls	r3, r5, #3
 8005482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005486:	00e2      	lsls	r2, r4, #3
 8005488:	4614      	mov	r4, r2
 800548a:	461d      	mov	r5, r3
 800548c:	4643      	mov	r3, r8
 800548e:	18e3      	adds	r3, r4, r3
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	464b      	mov	r3, r9
 8005494:	eb45 0303 	adc.w	r3, r5, r3
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054a6:	4629      	mov	r1, r5
 80054a8:	028b      	lsls	r3, r1, #10
 80054aa:	4621      	mov	r1, r4
 80054ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054b0:	4621      	mov	r1, r4
 80054b2:	028a      	lsls	r2, r1, #10
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ba:	2200      	movs	r2, #0
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	61fa      	str	r2, [r7, #28]
 80054c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c4:	f7fa fe80 	bl	80001c8 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4613      	mov	r3, r2
 80054ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	3301      	adds	r3, #1
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80054e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054ea:	e002      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054ec:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3750      	adds	r7, #80	@ 0x50
 80054f8:	46bd      	mov	sp, r7
 80054fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800
 8005504:	00f42400 	.word	0x00f42400
 8005508:	007a1200 	.word	0x007a1200

0800550c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d105      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005530:	2b00      	cmp	r3, #0
 8005532:	d035      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005534:	4b62      	ldr	r3, [pc, #392]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800553a:	f7fb fdbb 	bl	80010b4 <HAL_GetTick>
 800553e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005542:	f7fb fdb7 	bl	80010b4 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0b0      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005554:	4b5b      	ldr	r3, [pc, #364]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	019a      	lsls	r2, r3, #6
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	071b      	lsls	r3, r3, #28
 800556c:	4955      	ldr	r1, [pc, #340]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005574:	4b52      	ldr	r3, [pc, #328]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800557a:	f7fb fd9b 	bl	80010b4 <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005582:	f7fb fd97 	bl	80010b4 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e090      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005594:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8083 	beq.w	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	4b44      	ldr	r3, [pc, #272]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	4a43      	ldr	r2, [pc, #268]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80055be:	4b41      	ldr	r3, [pc, #260]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055ca:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3e      	ldr	r2, [pc, #248]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055d6:	f7fb fd6d 	bl	80010b4 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055de:	f7fb fd69 	bl	80010b4 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e062      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055f0:	4b35      	ldr	r3, [pc, #212]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055fc:	4b31      	ldr	r3, [pc, #196]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005604:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02f      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d028      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800561a:	4b2a      	ldr	r3, [pc, #168]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005622:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005624:	4b29      	ldr	r3, [pc, #164]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005626:	2201      	movs	r2, #1
 8005628:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800562a:	4b28      	ldr	r3, [pc, #160]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005630:	4a24      	ldr	r2, [pc, #144]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005636:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b01      	cmp	r3, #1
 8005640:	d114      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005642:	f7fb fd37 	bl	80010b4 <HAL_GetTick>
 8005646:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005648:	e00a      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564a:	f7fb fd33 	bl	80010b4 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e02a      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005660:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0ee      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005678:	d10d      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800567a:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800568a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800568e:	490d      	ldr	r1, [pc, #52]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005690:	4313      	orrs	r3, r2
 8005692:	608b      	str	r3, [r1, #8]
 8005694:	e005      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	4a0a      	ldr	r2, [pc, #40]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800569c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80056a0:	6093      	str	r3, [r2, #8]
 80056a2:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ae:	4905      	ldr	r1, [pc, #20]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	42470068 	.word	0x42470068
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40007000 	.word	0x40007000
 80056cc:	42470e40 	.word	0x42470e40

080056d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d13f      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80056ee:	4b24      	ldr	r3, [pc, #144]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056f6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d006      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005704:	d12f      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005706:	4b1f      	ldr	r3, [pc, #124]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005708:	617b      	str	r3, [r7, #20]
          break;
 800570a:	e02f      	b.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800570c:	4b1c      	ldr	r3, [pc, #112]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005714:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005718:	d108      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800571a:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005722:	4a19      	ldr	r2, [pc, #100]	@ (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	e007      	b.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800572c:	4b14      	ldr	r3, [pc, #80]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005734:	4a15      	ldr	r2, [pc, #84]	@ (800578c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005736:	fbb2 f3f3 	udiv	r3, r2, r3
 800573a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800573c:	4b10      	ldr	r3, [pc, #64]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800573e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005742:	099b      	lsrs	r3, r3, #6
 8005744:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005756:	0f1b      	lsrs	r3, r3, #28
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
          break;
 8005764:	e002      	b.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
          break;
 800576a:	bf00      	nop
        }
      }
      break;
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800576e:	bf00      	nop
    }
  }
  return frequency;
 8005770:	697b      	ldr	r3, [r7, #20]
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	00bb8000 	.word	0x00bb8000
 8005788:	007a1200 	.word	0x007a1200
 800578c:	00f42400 	.word	0x00f42400

08005790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07b      	b.n	800589a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b2:	d009      	beq.n	80057c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	61da      	str	r2, [r3, #28]
 80057ba:	e005      	b.n	80057c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fb fb0c 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584c:	ea42 0103 	orr.w	r1, r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005854:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	f003 0104 	and.w	r1, r3, #4
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	f003 0210 	and.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005888:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a2:	b084      	sub	sp, #16
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	f107 001c 	add.w	r0, r7, #28
 80058b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058b4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d123      	bne.n	8005904 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80058d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d105      	bne.n	80058f8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f9dc 	bl	8005cb6 <USB_CoreReset>
 80058fe:	4603      	mov	r3, r0
 8005900:	73fb      	strb	r3, [r7, #15]
 8005902:	e01b      	b.n	800593c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9d0 	bl	8005cb6 <USB_CoreReset>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800591a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	@ 0x38
 800592e:	e005      	b.n	800593c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800593c:	7fbb      	ldrb	r3, [r7, #30]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10b      	bne.n	800595a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f043 0206 	orr.w	r2, r3, #6
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005966:	b004      	add	sp, #16
 8005968:	4770      	bx	lr

0800596a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f023 0201 	bic.w	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d115      	bne.n	80059fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059dc:	200a      	movs	r0, #10
 80059de:	f7fb fb75 	bl	80010cc <HAL_Delay>
      ms += 10U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	330a      	adds	r3, #10
 80059e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f956 	bl	8005c9a <USB_GetMode>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d01e      	beq.n	8005a32 <USB_SetCurrentMode+0x84>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80059f8:	d9f0      	bls.n	80059dc <USB_SetCurrentMode+0x2e>
 80059fa:	e01a      	b.n	8005a32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d115      	bne.n	8005a2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a0e:	200a      	movs	r0, #10
 8005a10:	f7fb fb5c 	bl	80010cc <HAL_Delay>
      ms += 10U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	330a      	adds	r3, #10
 8005a18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f93d 	bl	8005c9a <USB_GetMode>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <USB_SetCurrentMode+0x84>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a2a:	d9f0      	bls.n	8005a0e <USB_SetCurrentMode+0x60>
 8005a2c:	e001      	b.n	8005a32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e005      	b.n	8005a3e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a36:	d101      	bne.n	8005a3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3301      	adds	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a60:	d901      	bls.n	8005a66 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e01b      	b.n	8005a9e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	daf2      	bge.n	8005a54 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a8a:	d901      	bls.n	8005a90 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e006      	b.n	8005a9e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d0f0      	beq.n	8005a7e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ac2:	d901      	bls.n	8005ac8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e018      	b.n	8005afa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	daf2      	bge.n	8005ab6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2210      	movs	r2, #16
 8005ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ae6:	d901      	bls.n	8005aec <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e006      	b.n	8005afa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d0f0      	beq.n	8005ada <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b089      	sub	sp, #36	@ 0x24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	4611      	mov	r1, r2
 8005b12:	461a      	mov	r2, r3
 8005b14:	460b      	mov	r3, r1
 8005b16:	71fb      	strb	r3, [r7, #7]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d123      	bne.n	8005b74 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b2c:	88bb      	ldrh	r3, [r7, #4]
 8005b2e:	3303      	adds	r3, #3
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e018      	b.n	8005b6c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	031a      	lsls	r2, r3, #12
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b46:	461a      	mov	r2, r3
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	3301      	adds	r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d3e2      	bcc.n	8005b3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3724      	adds	r7, #36	@ 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b08b      	sub	sp, #44	@ 0x2c
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	e014      	b.n	8005bd8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	3301      	adds	r3, #1
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	3301      	adds	r3, #1
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	623b      	str	r3, [r7, #32]
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d3e6      	bcc.n	8005bae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005be0:	8bfb      	ldrh	r3, [r7, #30]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01e      	beq.n	8005c24 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f107 0310 	add.w	r3, r7, #16
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	fa22 f303 	lsr.w	r3, r2, r3
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	701a      	strb	r2, [r3, #0]
      i++;
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	3301      	adds	r3, #1
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c18:	8bfb      	ldrh	r3, [r7, #30]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c1e:	8bfb      	ldrh	r3, [r7, #30]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ea      	bne.n	8005bfa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	372c      	adds	r7, #44	@ 0x2c
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4013      	ands	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cce:	d901      	bls.n	8005cd4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e022      	b.n	8005d1a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	daf2      	bge.n	8005cc2 <USB_CoreReset+0xc>

  count = 10U;
 8005cdc:	230a      	movs	r3, #10
 8005cde:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005ce0:	e002      	b.n	8005ce8 <USB_CoreReset+0x32>
  {
    count--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f9      	bne.n	8005ce2 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f043 0201 	orr.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d06:	d901      	bls.n	8005d0c <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e006      	b.n	8005d1a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d0f0      	beq.n	8005cfa <USB_CoreReset+0x44>

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d28:	b084      	sub	sp, #16
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d119      	bne.n	8005db2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d10a      	bne.n	8005d9c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d94:	f043 0304 	orr.w	r3, r3, #4
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e014      	b.n	8005dc6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005daa:	f023 0304 	bic.w	r3, r3, #4
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e009      	b.n	8005dc6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dc0:	f023 0304 	bic.w	r3, r3, #4
 8005dc4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dc6:	2110      	movs	r1, #16
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fe3c 	bl	8005a46 <USB_FlushTxFifo>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fe66 	bl	8005aaa <USB_FlushRxFifo>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	e015      	b.n	8005e1a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005e00:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2300      	movs	r3, #0
 8005e12:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	3301      	adds	r3, #1
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e1e:	461a      	mov	r2, r3
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d3e3      	bcc.n	8005dee <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <USB_HostInit+0x170>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d10b      	bne.n	8005e54 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a15      	ldr	r2, [pc, #84]	@ (8005e9c <USB_HostInit+0x174>)
 8005e48:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ea0 <USB_HostInit+0x178>)
 8005e4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005e52:	e009      	b.n	8005e68 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	@ 0x80
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a11      	ldr	r2, [pc, #68]	@ (8005ea4 <USB_HostInit+0x17c>)
 8005e5e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a11      	ldr	r2, [pc, #68]	@ (8005ea8 <USB_HostInit+0x180>)
 8005e64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f043 0210 	orr.w	r2, r3, #16
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699a      	ldr	r2, [r3, #24]
 8005e80:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <USB_HostInit+0x184>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e94:	b004      	add	sp, #16
 8005e96:	4770      	bx	lr
 8005e98:	40040000 	.word	0x40040000
 8005e9c:	01000200 	.word	0x01000200
 8005ea0:	00e00300 	.word	0x00e00300
 8005ea4:	00600080 	.word	0x00600080
 8005ea8:	004000e0 	.word	0x004000e0
 8005eac:	a3200008 	.word	0xa3200008

08005eb0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d107      	bne.n	8005f02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005efe:	6053      	str	r3, [r2, #4]
 8005f00:	e00c      	b.n	8005f1c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d107      	bne.n	8005f18 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f14:	6053      	str	r3, [r2, #4]
 8005f16:	e001      	b.n	8005f1c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f4a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f58:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f5a:	2064      	movs	r0, #100	@ 0x64
 8005f5c:	f7fb f8b6 	bl	80010cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f6c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f6e:	200a      	movs	r0, #10
 8005f70:	f7fb f8ac 	bl	80010cc <HAL_Delay>

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005fa2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <USB_DriveVbus+0x44>
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d106      	bne.n	8005fc2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fc0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fcc:	d109      	bne.n	8005fe2 <USB_DriveVbus+0x64>
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fe0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	0c5b      	lsrs	r3, r3, #17
 800600e:	f003 0303 	and.w	r3, r3, #3
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	b29b      	uxth	r3, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	4608      	mov	r0, r1
 800604a:	4611      	mov	r1, r2
 800604c:	461a      	mov	r2, r3
 800604e:	4603      	mov	r3, r0
 8006050:	70fb      	strb	r3, [r7, #3]
 8006052:	460b      	mov	r3, r1
 8006054:	70bb      	strb	r3, [r7, #2]
 8006056:	4613      	mov	r3, r2
 8006058:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800606e:	461a      	mov	r2, r3
 8006070:	f04f 33ff 	mov.w	r3, #4294967295
 8006074:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006076:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800607a:	2b03      	cmp	r3, #3
 800607c:	d87c      	bhi.n	8006178 <USB_HC_Init+0x138>
 800607e:	a201      	add	r2, pc, #4	@ (adr r2, 8006084 <USB_HC_Init+0x44>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	08006095 	.word	0x08006095
 8006088:	0800613b 	.word	0x0800613b
 800608c:	08006095 	.word	0x08006095
 8006090:	080060fd 	.word	0x080060fd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80060a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da10      	bge.n	80060d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ce:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80060d0:	e055      	b.n	800617e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a6f      	ldr	r2, [pc, #444]	@ (8006294 <USB_HC_Init+0x254>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d151      	bne.n	800617e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80060f8:	60d3      	str	r3, [r2, #12]
      break;
 80060fa:	e040      	b.n	800617e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006108:	461a      	mov	r2, r3
 800610a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800610e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006110:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006114:	2b00      	cmp	r3, #0
 8006116:	da34      	bge.n	8006182 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	440a      	add	r2, r1
 800612e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006136:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006138:	e023      	b.n	8006182 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006146:	461a      	mov	r2, r3
 8006148:	f240 2325 	movw	r3, #549	@ 0x225
 800614c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800614e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006152:	2b00      	cmp	r3, #0
 8006154:	da17      	bge.n	8006186 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	440a      	add	r2, r1
 800616c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006170:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006174:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006176:	e006      	b.n	8006186 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	77fb      	strb	r3, [r7, #31]
      break;
 800617c:	e004      	b.n	8006188 <USB_HC_Init+0x148>
      break;
 800617e:	bf00      	nop
 8006180:	e002      	b.n	8006188 <USB_HC_Init+0x148>
      break;
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <USB_HC_Init+0x148>
      break;
 8006186:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4413      	add	r3, r2
 8006190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006194:	461a      	mov	r2, r3
 8006196:	2300      	movs	r3, #0
 8006198:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	78fa      	ldrb	r2, [r7, #3]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061b4:	f043 0302 	orr.w	r3, r3, #2
 80061b8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	6939      	ldr	r1, [r7, #16]
 80061d0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061d4:	4313      	orrs	r3, r2
 80061d6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80061e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da03      	bge.n	80061f4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80061ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	e001      	b.n	80061f8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff fef9 	bl	8005ff0 <USB_GetHostSpeed>
 80061fe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006200:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006204:	2b02      	cmp	r3, #2
 8006206:	d106      	bne.n	8006216 <USB_HC_Init+0x1d6>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d003      	beq.n	8006216 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800620e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	e001      	b.n	800621a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800621a:	787b      	ldrb	r3, [r7, #1]
 800621c:	059b      	lsls	r3, r3, #22
 800621e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006222:	78bb      	ldrb	r3, [r7, #2]
 8006224:	02db      	lsls	r3, r3, #11
 8006226:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800622a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800622c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006230:	049b      	lsls	r3, r3, #18
 8006232:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006236:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006238:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800623a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800623e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	431a      	orrs	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	440a      	add	r2, r1
 8006250:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006258:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800625a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800625e:	2b03      	cmp	r3, #3
 8006260:	d003      	beq.n	800626a <USB_HC_Init+0x22a>
 8006262:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006266:	2b01      	cmp	r3, #1
 8006268:	d10f      	bne.n	800628a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	440a      	add	r2, r1
 8006280:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006288:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800628a:	7ffb      	ldrb	r3, [r7, #31]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40040000 	.word	0x40040000

08006298 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08c      	sub	sp, #48	@ 0x30
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80062b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062b4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006430 <USB_HC_StartXfer+0x198>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d12f      	bne.n	800631e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d11c      	bne.n	80062fe <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	7c9b      	ldrb	r3, [r3, #18]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <USB_HC_StartXfer+0x3c>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	7c9b      	ldrb	r3, [r3, #18]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d124      	bne.n	800631e <USB_HC_StartXfer+0x86>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	799b      	ldrb	r3, [r3, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d120      	bne.n	800631e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fa:	60d3      	str	r3, [r2, #12]
 80062fc:	e00f      	b.n	800631e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	791b      	ldrb	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <USB_HC_StartXfer+0x86>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	795b      	ldrb	r3, [r3, #5]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d107      	bne.n	800631e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	4619      	mov	r1, r3
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fb6b 	bl	80069f0 <USB_DoPing>
        return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e232      	b.n	8006784 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	799b      	ldrb	r3, [r3, #6]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d158      	bne.n	80063d8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006326:	2301      	movs	r3, #1
 8006328:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	78db      	ldrb	r3, [r3, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006332:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	8a92      	ldrh	r2, [r2, #20]
 8006338:	fb03 f202 	mul.w	r2, r3, r2
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	61da      	str	r2, [r3, #28]
 8006340:	e07c      	b.n	800643c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	7c9b      	ldrb	r3, [r3, #18]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d130      	bne.n	80063ac <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006350:	d918      	bls.n	8006384 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	8a9b      	ldrh	r3, [r3, #20]
 8006356:	461a      	mov	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d003      	beq.n	8006374 <USB_HC_StartXfer+0xdc>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d103      	bne.n	800637c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2202      	movs	r2, #2
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e05f      	b.n	800643c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2201      	movs	r2, #1
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	e05b      	b.n	800643c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d007      	beq.n	80063a4 <USB_HC_StartXfer+0x10c>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d003      	beq.n	80063a4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2204      	movs	r2, #4
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	e04b      	b.n	800643c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2203      	movs	r2, #3
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	e047      	b.n	800643c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10d      	bne.n	80063ce <USB_HC_StartXfer+0x136>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	8a92      	ldrh	r2, [r2, #20]
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d907      	bls.n	80063ce <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	8a92      	ldrh	r2, [r2, #20]
 80063c4:	fb03 f202 	mul.w	r2, r3, r2
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	61da      	str	r2, [r3, #28]
 80063cc:	e036      	b.n	800643c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	61da      	str	r2, [r3, #28]
 80063d6:	e031      	b.n	800643c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d018      	beq.n	8006412 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	8a92      	ldrh	r2, [r2, #20]
 80063e8:	4413      	add	r3, r2
 80063ea:	3b01      	subs	r3, #1
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	8a92      	ldrh	r2, [r2, #20]
 80063f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80063f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80063f8:	8b7b      	ldrh	r3, [r7, #26]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90b      	bls.n	8006416 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80063fe:	8b7b      	ldrh	r3, [r7, #26]
 8006400:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006402:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	8a92      	ldrh	r2, [r2, #20]
 8006408:	fb03 f202 	mul.w	r2, r3, r2
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	61da      	str	r2, [r3, #28]
 8006410:	e001      	b.n	8006416 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006412:	2301      	movs	r3, #1
 8006414:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	78db      	ldrb	r3, [r3, #3]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800641e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	8a92      	ldrh	r2, [r2, #20]
 8006424:	fb03 f202 	mul.w	r2, r3, r2
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	61da      	str	r2, [r3, #28]
 800642c:	e006      	b.n	800643c <USB_HC_StartXfer+0x1a4>
 800642e:	bf00      	nop
 8006430:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006444:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006446:	04d9      	lsls	r1, r3, #19
 8006448:	4ba3      	ldr	r3, [pc, #652]	@ (80066d8 <USB_HC_StartXfer+0x440>)
 800644a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800644c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7d9b      	ldrb	r3, [r3, #22]
 8006452:	075b      	lsls	r3, r3, #29
 8006454:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006458:	69f9      	ldr	r1, [r7, #28]
 800645a:	0148      	lsls	r0, r1, #5
 800645c:	6a39      	ldr	r1, [r7, #32]
 800645e:	4401      	add	r1, r0
 8006460:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006464:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006466:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6999      	ldr	r1, [r3, #24]
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647e:	460a      	mov	r2, r1
 8006480:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	6a3a      	ldr	r2, [r7, #32]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	7e7b      	ldrb	r3, [r7, #25]
 80064ca:	075b      	lsls	r3, r3, #29
 80064cc:	69f9      	ldr	r1, [r7, #28]
 80064ce:	0148      	lsls	r0, r1, #5
 80064d0:	6a39      	ldr	r1, [r7, #32]
 80064d2:	4401      	add	r1, r0
 80064d4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80064d8:	4313      	orrs	r3, r2
 80064da:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	799b      	ldrb	r3, [r3, #6]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	f040 80c3 	bne.w	800666c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	7c5b      	ldrb	r3, [r3, #17]
 80064ea:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80064f0:	4313      	orrs	r3, r2
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80064fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006502:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	440a      	add	r2, r1
 800651a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800651e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006522:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	79db      	ldrb	r3, [r3, #7]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d123      	bne.n	8006574 <USB_HC_StartXfer+0x2dc>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	78db      	ldrb	r3, [r3, #3]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11f      	bne.n	8006574 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	440a      	add	r2, r1
 800654a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800654e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006552:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	4413      	add	r3, r2
 800655c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	6a3a      	ldr	r2, [r7, #32]
 8006568:	440a      	add	r2, r1
 800656a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800656e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006572:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	7c9b      	ldrb	r3, [r3, #18]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d003      	beq.n	8006584 <USB_HC_StartXfer+0x2ec>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	7c9b      	ldrb	r3, [r3, #18]
 8006580:	2b03      	cmp	r3, #3
 8006582:	d117      	bne.n	80065b4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006588:	2b01      	cmp	r3, #1
 800658a:	d113      	bne.n	80065b4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	78db      	ldrb	r3, [r3, #3]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10f      	bne.n	80065b4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	7c9b      	ldrb	r3, [r3, #18]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d162      	bne.n	8006682 <USB_HC_StartXfer+0x3ea>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	78db      	ldrb	r3, [r3, #3]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d15e      	bne.n	8006682 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d858      	bhi.n	8006680 <USB_HC_StartXfer+0x3e8>
 80065ce:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <USB_HC_StartXfer+0x33c>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	08006607 	.word	0x08006607
 80065dc:	08006629 	.word	0x08006629
 80065e0:	0800664b 	.word	0x0800664b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006602:	6053      	str	r3, [r2, #4]
          break;
 8006604:	e03d      	b.n	8006682 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	440a      	add	r2, r1
 800661c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006620:	f043 030e 	orr.w	r3, r3, #14
 8006624:	6053      	str	r3, [r2, #4]
          break;
 8006626:	e02c      	b.n	8006682 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	4413      	add	r3, r2
 8006630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	440a      	add	r2, r1
 800663e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006646:	6053      	str	r3, [r2, #4]
          break;
 8006648:	e01b      	b.n	8006682 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	440a      	add	r2, r1
 8006660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006668:	6053      	str	r3, [r2, #4]
          break;
 800666a:	e00a      	b.n	8006682 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6053      	str	r3, [r2, #4]
 800667e:	e000      	b.n	8006682 <USB_HC_StartXfer+0x3ea>
          break;
 8006680:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006698:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	78db      	ldrb	r3, [r3, #3]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	e003      	b.n	80066b4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066b2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ba:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c8:	461a      	mov	r2, r3
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e055      	b.n	8006784 <USB_HC_StartXfer+0x4ec>
 80066d8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	78db      	ldrb	r3, [r3, #3]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d14e      	bne.n	8006782 <USB_HC_StartXfer+0x4ea>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d04a      	beq.n	8006782 <USB_HC_StartXfer+0x4ea>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	79db      	ldrb	r3, [r3, #7]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d146      	bne.n	8006782 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	7c9b      	ldrb	r3, [r3, #18]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d831      	bhi.n	8006760 <USB_HC_StartXfer+0x4c8>
 80066fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006704 <USB_HC_StartXfer+0x46c>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006715 	.word	0x08006715
 8006708:	08006739 	.word	0x08006739
 800670c:	08006715 	.word	0x08006715
 8006710:	08006739 	.word	0x08006739
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	3303      	adds	r3, #3
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800671e:	8afa      	ldrh	r2, [r7, #22]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006724:	b29b      	uxth	r3, r3
 8006726:	429a      	cmp	r2, r3
 8006728:	d91c      	bls.n	8006764 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	619a      	str	r2, [r3, #24]
        }
        break;
 8006736:	e015      	b.n	8006764 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	3303      	adds	r3, #3
 800673e:	089b      	lsrs	r3, r3, #2
 8006740:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006742:	8afa      	ldrh	r2, [r7, #22]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	b29b      	uxth	r3, r3
 800674e:	429a      	cmp	r2, r3
 8006750:	d90a      	bls.n	8006768 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	619a      	str	r2, [r3, #24]
        }
        break;
 800675e:	e003      	b.n	8006768 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <USB_HC_StartXfer+0x4d2>
        break;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <USB_HC_StartXfer+0x4d2>
        break;
 8006768:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6999      	ldr	r1, [r3, #24]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	785a      	ldrb	r2, [r3, #1]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	b29b      	uxth	r3, r3
 8006778:	2000      	movs	r0, #0
 800677a:	9000      	str	r0, [sp, #0]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff f9c2 	bl	8005b06 <USB_WritePacket>
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3728      	adds	r7, #40	@ 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	b29b      	uxth	r3, r3
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b089      	sub	sp, #36	@ 0x24
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067be:	78fb      	ldrb	r3, [r7, #3]
 80067c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	0c9b      	lsrs	r3, r3, #18
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	0fdb      	lsrs	r3, r3, #31
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	0fdb      	lsrs	r3, r3, #31
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b20      	cmp	r3, #32
 8006812:	d10d      	bne.n	8006830 <USB_HC_Halt+0x82>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <USB_HC_Halt+0x82>
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d002      	beq.n	800682c <USB_HC_Halt+0x7e>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d101      	bne.n	8006830 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e0d8      	b.n	80069e2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <USB_HC_Halt+0x8e>
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b02      	cmp	r3, #2
 800683a:	d173      	bne.n	8006924 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	440a      	add	r2, r1
 8006852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006856:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800685a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b00      	cmp	r3, #0
 8006866:	d14a      	bne.n	80068fe <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d133      	bne.n	80068dc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	440a      	add	r2, r1
 800688a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800688e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006892:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068b2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068c0:	d82e      	bhi.n	8006920 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068d8:	d0ec      	beq.n	80068b4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068da:	e081      	b.n	80069e0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068fc:	e070      	b.n	80069e0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	440a      	add	r2, r1
 8006914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006918:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800691c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800691e:	e05f      	b.n	80069e0 <USB_HC_Halt+0x232>
            break;
 8006920:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006922:	e05d      	b.n	80069e0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	69fa      	ldr	r2, [r7, #28]
 8006938:	440a      	add	r2, r1
 800693a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800693e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006942:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d133      	bne.n	80069bc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	440a      	add	r2, r1
 800696a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800696e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006972:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	440a      	add	r2, r1
 800698a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800698e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006992:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3301      	adds	r3, #1
 8006998:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069a0:	d81d      	bhi.n	80069de <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069b8:	d0ec      	beq.n	8006994 <USB_HC_Halt+0x1e6>
 80069ba:	e011      	b.n	80069e0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	e000      	b.n	80069e0 <USB_HC_Halt+0x232>
          break;
 80069de:	bf00      	nop
    }
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3724      	adds	r7, #36	@ 0x24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a04:	2301      	movs	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	04da      	lsls	r2, r3, #19
 8006a0c:	4b15      	ldr	r3, [pc, #84]	@ (8006a64 <USB_DoPing+0x74>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a20:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a38:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a40:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	1ff80000 	.word	0x1ff80000

08006a68 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fe ff85 	bl	800598c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a82:	2110      	movs	r1, #16
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fe ffde 	bl	8005a46 <USB_FlushTxFifo>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff f808 	bl	8005aaa <USB_FlushRxFifo>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e01f      	b.n	8006aea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ac0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ac8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ad0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ade:	461a      	mov	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b0f      	cmp	r3, #15
 8006aee:	d9dc      	bls.n	8006aaa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e034      	b.n	8006b60 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b3c:	d80c      	bhi.n	8006b58 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b54:	d0ec      	beq.n	8006b30 <USB_StopHost+0xc8>
 8006b56:	e000      	b.n	8006b5a <USB_StopHost+0xf2>
        break;
 8006b58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b0f      	cmp	r3, #15
 8006b64:	d9c7      	bls.n	8006af6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7fe fef4 	bl	800596a <USB_EnableGlobalInt>

  return ret;
 8006b82:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b8c:	b590      	push	{r4, r7, lr}
 8006b8e:	b089      	sub	sp, #36	@ 0x24
 8006b90:	af04      	add	r7, sp, #16
 8006b92:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b94:	2301      	movs	r3, #1
 8006b96:	2202      	movs	r2, #2
 8006b98:	2102      	movs	r1, #2
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fc83 	bl	80074a6 <USBH_FindInterface>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2bff      	cmp	r3, #255	@ 0xff
 8006ba8:	d002      	beq.n	8006bb0 <USBH_CDC_InterfaceInit+0x24>
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d901      	bls.n	8006bb4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e13d      	b.n	8006e30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc58 	bl	800746e <USBH_SelectInterface>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e131      	b.n	8006e30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006bd2:	2050      	movs	r0, #80	@ 0x50
 8006bd4:	f002 fb6a 	bl	80092ac <malloc>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006bec:	2302      	movs	r3, #2
 8006bee:	e11f      	b.n	8006e30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006bf0:	2250      	movs	r2, #80	@ 0x50
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	68b8      	ldr	r0, [r7, #8]
 8006bf6:	f002 fc17 	bl	8009428 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	211a      	movs	r1, #26
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da15      	bge.n	8006c3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	211a      	movs	r1, #26
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	211a      	movs	r1, #26
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c38:	881a      	ldrh	r2, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 ffc4 	bl	8008bd2 <USBH_AllocPipe>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	7819      	ldrb	r1, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	7858      	ldrb	r0, [r3, #1]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	8952      	ldrh	r2, [r2, #10]
 8006c6a:	9202      	str	r2, [sp, #8]
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	9201      	str	r2, [sp, #4]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	4623      	mov	r3, r4
 8006c74:	4602      	mov	r2, r0
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 ff7c 	bl	8008b74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2200      	movs	r2, #0
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f002 fa8b 	bl	80091a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	210a      	movs	r1, #10
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc08 	bl	80074a6 <USBH_FindInterface>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2bff      	cmp	r3, #255	@ 0xff
 8006c9e:	d002      	beq.n	8006ca6 <USBH_CDC_InterfaceInit+0x11a>
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d901      	bls.n	8006caa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e0c2      	b.n	8006e30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	211a      	movs	r1, #26
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da16      	bge.n	8006cf0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	211a      	movs	r1, #26
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	4413      	add	r3, r2
 8006cce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	211a      	movs	r1, #26
 8006cde:	fb01 f303 	mul.w	r3, r1, r3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006ce8:	881a      	ldrh	r2, [r3, #0]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	835a      	strh	r2, [r3, #26]
 8006cee:	e015      	b.n	8006d1c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	211a      	movs	r1, #26
 8006cf6:	fb01 f303 	mul.w	r3, r1, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	211a      	movs	r1, #26
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d16:	881a      	ldrh	r2, [r3, #0]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	211a      	movs	r1, #26
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	4413      	add	r3, r2
 8006d28:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da16      	bge.n	8006d62 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	211a      	movs	r1, #26
 8006d3a:	fb01 f303 	mul.w	r3, r1, r3
 8006d3e:	4413      	add	r3, r2
 8006d40:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	211a      	movs	r1, #26
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006d5a:	881a      	ldrh	r2, [r3, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	835a      	strh	r2, [r3, #26]
 8006d60:	e015      	b.n	8006d8e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	211a      	movs	r1, #26
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d72:	781a      	ldrb	r2, [r3, #0]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	211a      	movs	r1, #26
 8006d7e:	fb01 f303 	mul.w	r3, r1, r3
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006d88:	881a      	ldrh	r2, [r3, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	7b9b      	ldrb	r3, [r3, #14]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 ff1c 	bl	8008bd2 <USBH_AllocPipe>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	7bdb      	ldrb	r3, [r3, #15]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 ff12 	bl	8008bd2 <USBH_AllocPipe>
 8006dae:	4603      	mov	r3, r0
 8006db0:	461a      	mov	r2, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	7b59      	ldrb	r1, [r3, #13]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7b98      	ldrb	r0, [r3, #14]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	8b12      	ldrh	r2, [r2, #24]
 8006dce:	9202      	str	r2, [sp, #8]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	9201      	str	r2, [sp, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 feca 	bl	8008b74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	7b19      	ldrb	r1, [r3, #12]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	7bd8      	ldrb	r0, [r3, #15]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	8b52      	ldrh	r2, [r2, #26]
 8006df8:	9202      	str	r2, [sp, #8]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	9201      	str	r2, [sp, #4]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4623      	mov	r3, r4
 8006e02:	4602      	mov	r2, r0
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 feb5 	bl	8008b74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	7b5b      	ldrb	r3, [r3, #13]
 8006e16:	2200      	movs	r2, #0
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f002 f9c0 	bl	80091a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	7b1b      	ldrb	r3, [r3, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f002 f9b9 	bl	80091a0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd90      	pop	{r4, r7, pc}

08006e38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 feaa 	bl	8008bb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fed5 	bl	8008c14 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	7b1b      	ldrb	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00e      	beq.n	8006e96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	7b1b      	ldrb	r3, [r3, #12]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fe97 	bl	8008bb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	7b1b      	ldrb	r3, [r3, #12]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fec2 	bl	8008c14 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	7b5b      	ldrb	r3, [r3, #13]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00e      	beq.n	8006ebc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	7b5b      	ldrb	r3, [r3, #13]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fe84 	bl	8008bb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	7b5b      	ldrb	r3, [r3, #13]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 feaf 	bl	8008c14 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f002 f9f3 	bl	80092bc <free>
    phost->pActiveClass->pData = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006edc:	2200      	movs	r2, #0
 8006ede:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3340      	adds	r3, #64	@ 0x40
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8b1 	bl	800706a <GetLineCoding>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d105      	bne.n	8006f1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f18:	2102      	movs	r1, #2
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f30:	2301      	movs	r3, #1
 8006f32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d877      	bhi.n	800703c <USBH_CDC_Process+0x114>
 8006f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f54 <USBH_CDC_Process+0x2c>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f69 	.word	0x08006f69
 8006f58:	08006f6f 	.word	0x08006f6f
 8006f5c:	08006f9f 	.word	0x08006f9f
 8006f60:	08007013 	.word	0x08007013
 8006f64:	08007021 	.word	0x08007021
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	e06d      	b.n	800704a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f897 	bl	80070a8 <SetLineCoding>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f8c:	e058      	b.n	8007040 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d055      	beq.n	8007040 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2204      	movs	r2, #4
 8006f98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006f9c:	e050      	b.n	8007040 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	3340      	adds	r3, #64	@ 0x40
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f860 	bl	800706a <GetLineCoding>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d126      	bne.n	8007002 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc6:	791b      	ldrb	r3, [r3, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d13b      	bne.n	8007044 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fd6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d133      	bne.n	8007044 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fe6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d12b      	bne.n	8007044 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d124      	bne.n	8007044 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f958 	bl	80072b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007000:	e020      	b.n	8007044 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d01d      	beq.n	8007044 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2204      	movs	r2, #4
 800700c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007010:	e018      	b.n	8007044 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f867 	bl	80070e6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8da 	bl	80071d2 <CDC_ProcessReception>
      break;
 800701e:	e014      	b.n	800704a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f81e 	bl	8008064 <USBH_ClrFeature>
 8007028:	4603      	mov	r3, r0
 800702a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800703a:	e005      	b.n	8007048 <USBH_CDC_Process+0x120>

    default:
      break;
 800703c:	bf00      	nop
 800703e:	e004      	b.n	800704a <USBH_CDC_Process+0x122>
      break;
 8007040:	bf00      	nop
 8007042:	e002      	b.n	800704a <USBH_CDC_Process+0x122>
      break;
 8007044:	bf00      	nop
 8007046:	e000      	b.n	800704a <USBH_CDC_Process+0x122>
      break;
 8007048:	bf00      	nop

  }

  return status;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	22a1      	movs	r2, #161	@ 0xa1
 8007078:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2221      	movs	r2, #33	@ 0x21
 800707e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2207      	movs	r2, #7
 8007090:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2207      	movs	r2, #7
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fb17 	bl	80086cc <USBH_CtlReq>
 800709e:	4603      	mov	r3, r0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2221      	movs	r2, #33	@ 0x21
 80070b6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2207      	movs	r2, #7
 80070ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2207      	movs	r2, #7
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 faf8 	bl	80086cc <USBH_CtlReq>
 80070dc:	4603      	mov	r3, r0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b086      	sub	sp, #24
 80070ea:	af02      	add	r7, sp, #8
 80070ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007102:	2b01      	cmp	r3, #1
 8007104:	d002      	beq.n	800710c <CDC_ProcessTransmission+0x26>
 8007106:	2b02      	cmp	r3, #2
 8007108:	d023      	beq.n	8007152 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800710a:	e05e      	b.n	80071ca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	8b12      	ldrh	r2, [r2, #24]
 8007114:	4293      	cmp	r3, r2
 8007116:	d90b      	bls.n	8007130 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	69d9      	ldr	r1, [r3, #28]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8b1a      	ldrh	r2, [r3, #24]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	7b5b      	ldrb	r3, [r3, #13]
 8007124:	2001      	movs	r0, #1
 8007126:	9000      	str	r0, [sp, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fce0 	bl	8008aee <USBH_BulkSendData>
 800712e:	e00b      	b.n	8007148 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	7b5b      	ldrb	r3, [r3, #13]
 800713e:	2001      	movs	r0, #1
 8007140:	9000      	str	r0, [sp, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fcd3 	bl	8008aee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007150:	e03b      	b.n	80071ca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7b5b      	ldrb	r3, [r3, #13]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fff7 	bl	800914c <USBH_LL_GetURBState>
 800715e:	4603      	mov	r3, r0
 8007160:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007162:	7afb      	ldrb	r3, [r7, #11]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d128      	bne.n	80071ba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	8b12      	ldrh	r2, [r2, #24]
 8007170:	4293      	cmp	r3, r2
 8007172:	d90e      	bls.n	8007192 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	8b12      	ldrh	r2, [r2, #24]
 800717c:	1a9a      	subs	r2, r3, r2
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	8b12      	ldrh	r2, [r2, #24]
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	61da      	str	r2, [r3, #28]
 8007190:	e002      	b.n	8007198 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071a8:	e00e      	b.n	80071c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f868 	bl	8007288 <USBH_CDC_TransmitCallback>
      break;
 80071b8:	e006      	b.n	80071c8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80071ba:	7afb      	ldrb	r3, [r7, #11]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d103      	bne.n	80071c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071c8:	bf00      	nop
  }
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d002      	beq.n	80071f8 <CDC_ProcessReception+0x26>
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d00e      	beq.n	8007214 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80071f6:	e043      	b.n	8007280 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6a19      	ldr	r1, [r3, #32]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	8b5a      	ldrh	r2, [r3, #26]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	7b1b      	ldrb	r3, [r3, #12]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fc97 	bl	8008b38 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2204      	movs	r2, #4
 800720e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007212:	e035      	b.n	8007280 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	7b1b      	ldrb	r3, [r3, #12]
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 ff96 	bl	800914c <USBH_LL_GetURBState>
 8007220:	4603      	mov	r3, r0
 8007222:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007224:	7cfb      	ldrb	r3, [r7, #19]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d129      	bne.n	800727e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	7b1b      	ldrb	r3, [r3, #12]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 fef9 	bl	8009028 <USBH_LL_GetLastXferSize>
 8007236:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	429a      	cmp	r2, r3
 8007240:	d016      	beq.n	8007270 <CDC_ProcessReception+0x9e>
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	8b5b      	ldrh	r3, [r3, #26]
 8007246:	461a      	mov	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4293      	cmp	r3, r2
 800724c:	d110      	bne.n	8007270 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1ad2      	subs	r2, r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a1a      	ldr	r2, [r3, #32]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	441a      	add	r2, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2203      	movs	r2, #3
 800726a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800726e:	e006      	b.n	800727e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f80f 	bl	800729c <USBH_CDC_ReceiveCallback>
      break;
 800727e:	bf00      	nop
  }
}
 8007280:	bf00      	nop
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80072d8:	2302      	movs	r3, #2
 80072da:	e029      	b.n	8007330 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	79fa      	ldrb	r2, [r7, #7]
 80072e0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f81f 	bl	8007338 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f001 fdc9 	bl	8008ec0 <USBH_LL_Init>

  return USBH_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	e009      	b.n	800735a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	33e0      	adds	r3, #224	@ 0xe0
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b0f      	cmp	r3, #15
 800735e:	d9f2      	bls.n	8007346 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e009      	b.n	800737a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007380:	d3f1      	bcc.n	8007366 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2240      	movs	r2, #64	@ 0x40
 80073a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	331c      	adds	r3, #28
 80073d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f002 f825 	bl	8009428 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80073e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073e8:	2100      	movs	r1, #0
 80073ea:	4618      	mov	r0, r3
 80073ec:	f002 f81c 	bl	8009428 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80073f6:	2212      	movs	r2, #18
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 f814 	bl	8009428 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007406:	223e      	movs	r2, #62	@ 0x3e
 8007408:	2100      	movs	r1, #0
 800740a:	4618      	mov	r0, r3
 800740c:	f002 f80c 	bl	8009428 <memset>

  return USBH_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10e      	bne.n	8007456 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800743e:	1c59      	adds	r1, r3, #1
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	33de      	adds	r3, #222	@ 0xde
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	e004      	b.n	8007460 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007456:	2302      	movs	r3, #2
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	e001      	b.n	8007460 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800745c:	2302      	movs	r3, #2
 800745e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007484:	78fa      	ldrb	r2, [r7, #3]
 8007486:	429a      	cmp	r2, r3
 8007488:	d204      	bcs.n	8007494 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	78fa      	ldrb	r2, [r7, #3]
 800748e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007492:	e001      	b.n	8007498 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007494:	2302      	movs	r3, #2
 8007496:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	4608      	mov	r0, r1
 80074b0:	4611      	mov	r1, r2
 80074b2:	461a      	mov	r2, r3
 80074b4:	4603      	mov	r3, r0
 80074b6:	70fb      	strb	r3, [r7, #3]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70bb      	strb	r3, [r7, #2]
 80074bc:	4613      	mov	r3, r2
 80074be:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80074ce:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074d0:	e025      	b.n	800751e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	221a      	movs	r2, #26
 80074d6:	fb02 f303 	mul.w	r3, r2, r3
 80074da:	3308      	adds	r3, #8
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	3302      	adds	r3, #2
 80074e2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	795b      	ldrb	r3, [r3, #5]
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d002      	beq.n	80074f4 <USBH_FindInterface+0x4e>
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	2bff      	cmp	r3, #255	@ 0xff
 80074f2:	d111      	bne.n	8007518 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80074f8:	78ba      	ldrb	r2, [r7, #2]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d002      	beq.n	8007504 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074fe:	78bb      	ldrb	r3, [r7, #2]
 8007500:	2bff      	cmp	r3, #255	@ 0xff
 8007502:	d109      	bne.n	8007518 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007508:	787a      	ldrb	r2, [r7, #1]
 800750a:	429a      	cmp	r2, r3
 800750c:	d002      	beq.n	8007514 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800750e:	787b      	ldrb	r3, [r7, #1]
 8007510:	2bff      	cmp	r3, #255	@ 0xff
 8007512:	d101      	bne.n	8007518 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	e006      	b.n	8007526 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	3301      	adds	r3, #1
 800751c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d9d6      	bls.n	80074d2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007524:	23ff      	movs	r3, #255	@ 0xff
}
 8007526:	4618      	mov	r0, r3
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fcfc 	bl	8008f38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007540:	2101      	movs	r1, #1
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fe15 	bl	8009172 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af04      	add	r7, sp, #16
 800755a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800755c:	2302      	movs	r3, #2
 800755e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	d102      	bne.n	8007576 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2203      	movs	r2, #3
 8007574:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b0b      	cmp	r3, #11
 800757e:	f200 81bc 	bhi.w	80078fa <USBH_Process+0x3a6>
 8007582:	a201      	add	r2, pc, #4	@ (adr r2, 8007588 <USBH_Process+0x34>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075b9 	.word	0x080075b9
 800758c:	080075eb 	.word	0x080075eb
 8007590:	08007655 	.word	0x08007655
 8007594:	08007895 	.word	0x08007895
 8007598:	080078fb 	.word	0x080078fb
 800759c:	080076f5 	.word	0x080076f5
 80075a0:	0800783b 	.word	0x0800783b
 80075a4:	0800772b 	.word	0x0800772b
 80075a8:	0800774b 	.word	0x0800774b
 80075ac:	08007769 	.word	0x08007769
 80075b0:	080077ad 	.word	0x080077ad
 80075b4:	0800787d 	.word	0x0800787d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 819c 	beq.w	80078fe <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80075cc:	20c8      	movs	r0, #200	@ 0xc8
 80075ce:	f001 fe1a 	bl	8009206 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 fd0d 	bl	8008ff2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80075e8:	e189      	b.n	80078fe <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2202      	movs	r2, #2
 8007602:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007604:	e18a      	b.n	800791c <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800760c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007610:	d914      	bls.n	800763c <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007618:	3301      	adds	r3, #1
 800761a:	b2da      	uxtb	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007628:	2b03      	cmp	r3, #3
 800762a:	d903      	bls.n	8007634 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	220d      	movs	r2, #13
 8007630:	701a      	strb	r2, [r3, #0]
      break;
 8007632:	e173      	b.n	800791c <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
      break;
 800763a:	e16f      	b.n	800791c <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007642:	f103 020a 	add.w	r2, r3, #10
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800764c:	200a      	movs	r0, #10
 800764e:	f001 fdda 	bl	8009206 <USBH_Delay>
      break;
 8007652:	e163      	b.n	800791c <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d005      	beq.n	800766a <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007664:	2104      	movs	r1, #4
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800766a:	2064      	movs	r0, #100	@ 0x64
 800766c:	f001 fdcb 	bl	8009206 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fc97 	bl	8008fa4 <USBH_LL_GetSpeed>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2205      	movs	r2, #5
 8007684:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007686:	2100      	movs	r1, #0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 faa2 	bl	8008bd2 <USBH_AllocPipe>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007696:	2180      	movs	r1, #128	@ 0x80
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fa9a 	bl	8008bd2 <USBH_AllocPipe>
 800769e:	4603      	mov	r3, r0
 80076a0:	461a      	mov	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7919      	ldrb	r1, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076ba:	9202      	str	r2, [sp, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	4603      	mov	r3, r0
 80076c4:	2280      	movs	r2, #128	@ 0x80
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fa54 	bl	8008b74 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7959      	ldrb	r1, [r3, #5]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076e0:	9202      	str	r2, [sp, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4603      	mov	r3, r0
 80076ea:	2200      	movs	r2, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 fa41 	bl	8008b74 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80076f2:	e113      	b.n	800791c <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f917 	bl	8007928 <USBH_HandleEnum>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 80fd 	bne.w	8007902 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007716:	2b01      	cmp	r3, #1
 8007718:	d103      	bne.n	8007722 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2208      	movs	r2, #8
 800771e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007720:	e0ef      	b.n	8007902 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2207      	movs	r2, #7
 8007726:	701a      	strb	r2, [r3, #0]
      break;
 8007728:	e0eb      	b.n	8007902 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80e8 	beq.w	8007906 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800773c:	2101      	movs	r1, #1
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2208      	movs	r2, #8
 8007746:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007748:	e0dd      	b.n	8007906 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fc3f 	bl	8007fd6 <USBH_SetCfg>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 80d5 	bne.w	800790a <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2209      	movs	r2, #9
 8007764:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007766:	e0d0      	b.n	800790a <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d016      	beq.n	80077a4 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007776:	2101      	movs	r1, #1
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc4f 	bl	800801c <USBH_SetFeature>
 800777e:	4603      	mov	r3, r0
 8007780:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d103      	bne.n	8007792 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	220a      	movs	r2, #10
 800778e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007790:	e0bd      	b.n	800790e <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b03      	cmp	r3, #3
 8007798:	f040 80b9 	bne.w	800790e <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	220a      	movs	r2, #10
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e0b4      	b.n	800790e <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	220a      	movs	r2, #10
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e0b0      	b.n	800790e <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80ad 	beq.w	8007912 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
 80077c4:	e016      	b.n	80077f4 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80077c6:	7bfa      	ldrb	r2, [r7, #15]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	32de      	adds	r2, #222	@ 0xde
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	791a      	ldrb	r2, [r3, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80077d8:	429a      	cmp	r2, r3
 80077da:	d108      	bne.n	80077ee <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 80077dc:	7bfa      	ldrb	r2, [r7, #15]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32de      	adds	r2, #222	@ 0xde
 80077e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80077ec:	e005      	b.n	80077fa <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	3301      	adds	r3, #1
 80077f2:	73fb      	strb	r3, [r7, #15]
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0e5      	beq.n	80077c6 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d016      	beq.n	8007832 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	4798      	blx	r3
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2206      	movs	r2, #6
 800781a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007822:	2103      	movs	r1, #3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007828:	e073      	b.n	8007912 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	220d      	movs	r2, #13
 800782e:	701a      	strb	r2, [r3, #0]
      break;
 8007830:	e06f      	b.n	8007912 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	220d      	movs	r2, #13
 8007836:	701a      	strb	r2, [r3, #0]
      break;
 8007838:	e06b      	b.n	8007912 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d017      	beq.n	8007874 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
 8007850:	4603      	mov	r3, r0
 8007852:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	220b      	movs	r2, #11
 8007860:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007862:	e058      	b.n	8007916 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d154      	bne.n	8007916 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	220d      	movs	r2, #13
 8007870:	701a      	strb	r2, [r3, #0]
      break;
 8007872:	e050      	b.n	8007916 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	220d      	movs	r2, #13
 8007878:	701a      	strb	r2, [r3, #0]
      break;
 800787a:	e04c      	b.n	8007916 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d049      	beq.n	800791a <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
      }
      break;
 8007892:	e042      	b.n	800791a <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fd4b 	bl	8007338 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078d0:	2105      	movs	r1, #5
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d107      	bne.n	80078f2 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fe21 	bl	8007532 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80078f0:	e014      	b.n	800791c <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 fb20 	bl	8008f38 <USBH_LL_Start>
      break;
 80078f8:	e010      	b.n	800791c <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80078fa:	bf00      	nop
 80078fc:	e00e      	b.n	800791c <USBH_Process+0x3c8>
      break;
 80078fe:	bf00      	nop
 8007900:	e00c      	b.n	800791c <USBH_Process+0x3c8>
      break;
 8007902:	bf00      	nop
 8007904:	e00a      	b.n	800791c <USBH_Process+0x3c8>
    break;
 8007906:	bf00      	nop
 8007908:	e008      	b.n	800791c <USBH_Process+0x3c8>
      break;
 800790a:	bf00      	nop
 800790c:	e006      	b.n	800791c <USBH_Process+0x3c8>
      break;
 800790e:	bf00      	nop
 8007910:	e004      	b.n	800791c <USBH_Process+0x3c8>
      break;
 8007912:	bf00      	nop
 8007914:	e002      	b.n	800791c <USBH_Process+0x3c8>
      break;
 8007916:	bf00      	nop
 8007918:	e000      	b.n	800791c <USBH_Process+0x3c8>
      break;
 800791a:	bf00      	nop
  }
  return USBH_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop

08007928 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b088      	sub	sp, #32
 800792c:	af04      	add	r7, sp, #16
 800792e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007934:	2301      	movs	r3, #1
 8007936:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b07      	cmp	r3, #7
 800793e:	f200 81bd 	bhi.w	8007cbc <USBH_HandleEnum+0x394>
 8007942:	a201      	add	r2, pc, #4	@ (adr r2, 8007948 <USBH_HandleEnum+0x20>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	08007969 	.word	0x08007969
 800794c:	08007a23 	.word	0x08007a23
 8007950:	08007a8d 	.word	0x08007a8d
 8007954:	08007b17 	.word	0x08007b17
 8007958:	08007b81 	.word	0x08007b81
 800795c:	08007bf1 	.word	0x08007bf1
 8007960:	08007c37 	.word	0x08007c37
 8007964:	08007c7d 	.word	0x08007c7d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007968:	2108      	movs	r1, #8
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa50 	bl	8007e10 <USBH_Get_DevDesc>
 8007970:	4603      	mov	r3, r0
 8007972:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d12e      	bne.n	80079d8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7919      	ldrb	r1, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800799e:	9202      	str	r2, [sp, #8]
 80079a0:	2200      	movs	r2, #0
 80079a2:	9201      	str	r2, [sp, #4]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	4603      	mov	r3, r0
 80079a8:	2280      	movs	r2, #128	@ 0x80
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 f8e2 	bl	8008b74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7959      	ldrb	r1, [r3, #5]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	9201      	str	r2, [sp, #4]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4603      	mov	r3, r0
 80079ce:	2200      	movs	r2, #0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 f8cf 	bl	8008b74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079d6:	e173      	b.n	8007cc0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	f040 8170 	bne.w	8007cc0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079e6:	3301      	adds	r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d903      	bls.n	8007a02 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	220d      	movs	r2, #13
 80079fe:	701a      	strb	r2, [r3, #0]
      break;
 8007a00:	e15e      	b.n	8007cc0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	795b      	ldrb	r3, [r3, #5]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f903 	bl	8008c14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	791b      	ldrb	r3, [r3, #4]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f8fd 	bl	8008c14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
      break;
 8007a20:	e14e      	b.n	8007cc0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a22:	2112      	movs	r1, #18
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f9f3 	bl	8007e10 <USBH_Get_DevDesc>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a3a:	e143      	b.n	8007cc4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	f040 8140 	bne.w	8007cc4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d903      	bls.n	8007a66 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	220d      	movs	r2, #13
 8007a62:	701a      	strb	r2, [r3, #0]
      break;
 8007a64:	e12e      	b.n	8007cc4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 f8d1 	bl	8008c14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	791b      	ldrb	r3, [r3, #4]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f8cb 	bl	8008c14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
      break;
 8007a8a:	e11b      	b.n	8007cc4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa7d 	bl	8007f8e <USBH_SetAddress>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d130      	bne.n	8007b00 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007a9e:	2002      	movs	r0, #2
 8007aa0:	f001 fbb1 	bl	8009206 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2203      	movs	r2, #3
 8007ab0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7919      	ldrb	r1, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ac6:	9202      	str	r2, [sp, #8]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	9201      	str	r2, [sp, #4]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2280      	movs	r2, #128	@ 0x80
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f84e 	bl	8008b74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	7959      	ldrb	r1, [r3, #5]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007aec:	9202      	str	r2, [sp, #8]
 8007aee:	2200      	movs	r2, #0
 8007af0:	9201      	str	r2, [sp, #4]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4603      	mov	r3, r0
 8007af6:	2200      	movs	r2, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f83b 	bl	8008b74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007afe:	e0e3      	b.n	8007cc8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	f040 80e0 	bne.w	8007cc8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	220d      	movs	r2, #13
 8007b0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	705a      	strb	r2, [r3, #1]
      break;
 8007b14:	e0d8      	b.n	8007cc8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b16:	2109      	movs	r1, #9
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9a5 	bl	8007e68 <USBH_Get_CfgDesc>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b2e:	e0cd      	b.n	8007ccc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	f040 80ca 	bne.w	8007ccc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d903      	bls.n	8007b5a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	220d      	movs	r2, #13
 8007b56:	701a      	strb	r2, [r3, #0]
      break;
 8007b58:	e0b8      	b.n	8007ccc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	795b      	ldrb	r3, [r3, #5]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f857 	bl	8008c14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	791b      	ldrb	r3, [r3, #4]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f851 	bl	8008c14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e0a5      	b.n	8007ccc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f96d 	bl	8007e68 <USBH_Get_CfgDesc>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2205      	movs	r2, #5
 8007b9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b9e:	e097      	b.n	8007cd0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	f040 8094 	bne.w	8007cd0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d903      	bls.n	8007bca <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	220d      	movs	r2, #13
 8007bc6:	701a      	strb	r2, [r3, #0]
      break;
 8007bc8:	e082      	b.n	8007cd0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	795b      	ldrb	r3, [r3, #5]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 f81f 	bl	8008c14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	791b      	ldrb	r3, [r3, #4]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f819 	bl	8008c14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
      break;
 8007bee:	e06f      	b.n	8007cd0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d019      	beq.n	8007c2e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c06:	23ff      	movs	r3, #255	@ 0xff
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f957 	bl	8007ebc <USBH_Get_StringDesc>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d103      	bne.n	8007c20 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2206      	movs	r2, #6
 8007c1c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007c1e:	e059      	b.n	8007cd4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d156      	bne.n	8007cd4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2206      	movs	r2, #6
 8007c2a:	705a      	strb	r2, [r3, #1]
      break;
 8007c2c:	e052      	b.n	8007cd4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2206      	movs	r2, #6
 8007c32:	705a      	strb	r2, [r3, #1]
      break;
 8007c34:	e04e      	b.n	8007cd4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d019      	beq.n	8007c74 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c4c:	23ff      	movs	r3, #255	@ 0xff
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f934 	bl	8007ebc <USBH_Get_StringDesc>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2207      	movs	r2, #7
 8007c62:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007c64:	e038      	b.n	8007cd8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d135      	bne.n	8007cd8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2207      	movs	r2, #7
 8007c70:	705a      	strb	r2, [r3, #1]
      break;
 8007c72:	e031      	b.n	8007cd8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2207      	movs	r2, #7
 8007c78:	705a      	strb	r2, [r3, #1]
      break;
 8007c7a:	e02d      	b.n	8007cd8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d017      	beq.n	8007cb6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c92:	23ff      	movs	r3, #255	@ 0xff
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f911 	bl	8007ebc <USBH_Get_StringDesc>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007ca8:	e018      	b.n	8007cdc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d115      	bne.n	8007cdc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	e012      	b.n	8007cdc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cba:	e00f      	b.n	8007cdc <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007cbc:	bf00      	nop
 8007cbe:	e00e      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007cc0:	bf00      	nop
 8007cc2:	e00c      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e00a      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007cc8:	bf00      	nop
 8007cca:	e008      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007ccc:	bf00      	nop
 8007cce:	e006      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e004      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e002      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e000      	b.n	8007cde <USBH_HandleEnum+0x3b6>
      break;
 8007cdc:	bf00      	nop
  }
  return Status;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f804 	bl	8007d2a <USBH_HandleSof>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b0b      	cmp	r3, #11
 8007d3a:	d10a      	bne.n	8007d52 <USBH_HandleSof+0x28>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
  }
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8007d6a:	bf00      	nop
}
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8007d8e:	bf00      	nop
}
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 f8c0 	bl	8008f6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	791b      	ldrb	r3, [r3, #4]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 ff0d 	bl	8008c14 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	795b      	ldrb	r3, [r3, #5]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 ff07 	bl	8008c14 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e1c:	887b      	ldrh	r3, [r7, #2]
 8007e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e22:	d901      	bls.n	8007e28 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e01b      	b.n	8007e60 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e2e:	887b      	ldrh	r3, [r7, #2]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	4613      	mov	r3, r2
 8007e34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f872 	bl	8007f24 <USBH_GetDescriptor>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e50:	887a      	ldrh	r2, [r7, #2]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f929 	bl	80080ac <USBH_ParseDevDesc>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	331c      	adds	r3, #28
 8007e78:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007e7a:	887b      	ldrh	r3, [r7, #2]
 8007e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e80:	d901      	bls.n	8007e86 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e016      	b.n	8007eb4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e86:	887b      	ldrh	r3, [r7, #2]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f846 	bl	8007f24 <USBH_GetDescriptor>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ea2:	887b      	ldrh	r3, [r7, #2]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9af 	bl	800820c <USBH_ParseCfgDesc>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	460b      	mov	r3, r1
 8007eca:	72fb      	strb	r3, [r7, #11]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007ed0:	893b      	ldrh	r3, [r7, #8]
 8007ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed6:	d802      	bhi.n	8007ede <USBH_Get_StringDesc+0x22>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e01c      	b.n	8007f1c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007eea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007ef2:	893b      	ldrh	r3, [r7, #8]
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	2100      	movs	r1, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 f812 	bl	8007f24 <USBH_GetDescriptor>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d107      	bne.n	8007f1a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f10:	893a      	ldrh	r2, [r7, #8]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fb8c 	bl	8008632 <USBH_ParseStringDesc>
  }

  return status;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	72fb      	strb	r3, [r7, #11]
 8007f32:	4613      	mov	r3, r2
 8007f34:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	789b      	ldrb	r3, [r3, #2]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d11c      	bne.n	8007f78 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2206      	movs	r2, #6
 8007f4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	893a      	ldrh	r2, [r7, #8]
 8007f54:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f56:	893b      	ldrh	r3, [r7, #8]
 8007f58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f60:	d104      	bne.n	8007f6c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f240 4209 	movw	r2, #1033	@ 0x409
 8007f68:	829a      	strh	r2, [r3, #20]
 8007f6a:	e002      	b.n	8007f72 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8b3a      	ldrh	r2, [r7, #24]
 8007f76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f78:	8b3b      	ldrh	r3, [r7, #24]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	6879      	ldr	r1, [r7, #4]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 fba4 	bl	80086cc <USBH_CtlReq>
 8007f84:	4603      	mov	r3, r0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	789b      	ldrb	r3, [r3, #2]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d10f      	bne.n	8007fc2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2205      	movs	r2, #5
 8007fac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fb80 	bl	80086cc <USBH_CtlReq>
 8007fcc:	4603      	mov	r3, r0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	789b      	ldrb	r3, [r3, #2]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d10e      	bne.n	8008008 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2209      	movs	r2, #9
 8007ff4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	887a      	ldrh	r2, [r7, #2]
 8007ffa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb5d 	bl	80086cc <USBH_CtlReq>
 8008012:	4603      	mov	r3, r0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	789b      	ldrb	r3, [r3, #2]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d10f      	bne.n	8008050 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2203      	movs	r2, #3
 800803a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	b29a      	uxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008050:	2200      	movs	r2, #0
 8008052:	2100      	movs	r1, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fb39 	bl	80086cc <USBH_CtlReq>
 800805a:	4603      	mov	r3, r0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	789b      	ldrb	r3, [r3, #2]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10f      	bne.n	8008098 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	b29a      	uxth	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008098:	2200      	movs	r2, #0
 800809a:	2100      	movs	r1, #0
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fb15 	bl	80086cc <USBH_CtlReq>
 80080a2:	4603      	mov	r3, r0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80080c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80080cc:	2302      	movs	r3, #2
 80080ce:	e094      	b.n	80081fa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	781a      	ldrb	r2, [r3, #0]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	785a      	ldrb	r2, [r3, #1]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	3302      	adds	r3, #2
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	3303      	adds	r3, #3
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	4313      	orrs	r3, r2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	791a      	ldrb	r2, [r3, #4]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	795a      	ldrb	r2, [r3, #5]
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	799a      	ldrb	r2, [r3, #6]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	79da      	ldrb	r2, [r3, #7]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800812a:	2b01      	cmp	r3, #1
 800812c:	d11b      	bne.n	8008166 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	79db      	ldrb	r3, [r3, #7]
 8008132:	2b20      	cmp	r3, #32
 8008134:	dc0f      	bgt.n	8008156 <USBH_ParseDevDesc+0xaa>
 8008136:	2b08      	cmp	r3, #8
 8008138:	db0f      	blt.n	800815a <USBH_ParseDevDesc+0xae>
 800813a:	3b08      	subs	r3, #8
 800813c:	4a32      	ldr	r2, [pc, #200]	@ (8008208 <USBH_ParseDevDesc+0x15c>)
 800813e:	fa22 f303 	lsr.w	r3, r2, r3
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	bf14      	ite	ne
 800814a:	2301      	movne	r3, #1
 800814c:	2300      	moveq	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <USBH_ParseDevDesc+0xb6>
 8008154:	e001      	b.n	800815a <USBH_ParseDevDesc+0xae>
 8008156:	2b40      	cmp	r3, #64	@ 0x40
 8008158:	d003      	beq.n	8008162 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2208      	movs	r2, #8
 800815e:	71da      	strb	r2, [r3, #7]
        break;
 8008160:	e000      	b.n	8008164 <USBH_ParseDevDesc+0xb8>
        break;
 8008162:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008164:	e00e      	b.n	8008184 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800816c:	2b02      	cmp	r3, #2
 800816e:	d107      	bne.n	8008180 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	79db      	ldrb	r3, [r3, #7]
 8008174:	2b08      	cmp	r3, #8
 8008176:	d005      	beq.n	8008184 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2208      	movs	r2, #8
 800817c:	71da      	strb	r2, [r3, #7]
 800817e:	e001      	b.n	8008184 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008180:	2303      	movs	r3, #3
 8008182:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	2b08      	cmp	r3, #8
 8008188:	d936      	bls.n	80081f8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	3308      	adds	r3, #8
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	3309      	adds	r3, #9
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	021b      	lsls	r3, r3, #8
 800819a:	b29b      	uxth	r3, r3
 800819c:	4313      	orrs	r3, r2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	330a      	adds	r3, #10
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	330b      	adds	r3, #11
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	4313      	orrs	r3, r2
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	330c      	adds	r3, #12
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	330d      	adds	r3, #13
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	7b9a      	ldrb	r2, [r3, #14]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	7bda      	ldrb	r2, [r3, #15]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	7c1a      	ldrb	r2, [r3, #16]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	7c5a      	ldrb	r2, [r3, #17]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	01000101 	.word	0x01000101

0800820c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08c      	sub	sp, #48	@ 0x30
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008220:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800823a:	2302      	movs	r3, #2
 800823c:	e0de      	b.n	80083fc <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b09      	cmp	r3, #9
 8008248:	d002      	beq.n	8008250 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	2209      	movs	r2, #9
 800824e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	785a      	ldrb	r2, [r3, #1]
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3302      	adds	r3, #2
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3303      	adds	r3, #3
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	b29b      	uxth	r3, r3
 8008272:	4313      	orrs	r3, r2
 8008274:	b29b      	uxth	r3, r3
 8008276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800827a:	bf28      	it	cs
 800827c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008280:	b29a      	uxth	r2, r3
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	791a      	ldrb	r2, [r3, #4]
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	795a      	ldrb	r2, [r3, #5]
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	799a      	ldrb	r2, [r3, #6]
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	79da      	ldrb	r2, [r3, #7]
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	7a1a      	ldrb	r2, [r3, #8]
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	2b09      	cmp	r3, #9
 80082b2:	f240 80a1 	bls.w	80083f8 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80082b6:	2309      	movs	r3, #9
 80082b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082be:	e085      	b.n	80083cc <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082c0:	f107 0316 	add.w	r3, r7, #22
 80082c4:	4619      	mov	r1, r3
 80082c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082c8:	f000 f9e6 	bl	8008698 <USBH_GetNextDesc>
 80082cc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d17a      	bne.n	80083cc <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d002      	beq.n	80082e4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	2209      	movs	r2, #9
 80082e2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80082e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082e8:	221a      	movs	r2, #26
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	3308      	adds	r3, #8
 80082f0:	6a3a      	ldr	r2, [r7, #32]
 80082f2:	4413      	add	r3, r2
 80082f4:	3302      	adds	r3, #2
 80082f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80082f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082fa:	69f8      	ldr	r0, [r7, #28]
 80082fc:	f000 f882 	bl	8008404 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800830a:	e043      	b.n	8008394 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800830c:	f107 0316 	add.w	r3, r7, #22
 8008310:	4619      	mov	r1, r3
 8008312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008314:	f000 f9c0 	bl	8008698 <USBH_GetNextDesc>
 8008318:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b05      	cmp	r3, #5
 8008320:	d138      	bne.n	8008394 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	795b      	ldrb	r3, [r3, #5]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d113      	bne.n	8008352 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800832e:	2b02      	cmp	r3, #2
 8008330:	d003      	beq.n	800833a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	799b      	ldrb	r3, [r3, #6]
 8008336:	2b03      	cmp	r3, #3
 8008338:	d10b      	bne.n	8008352 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	79db      	ldrb	r3, [r3, #7]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10b      	bne.n	800835a <USBH_ParseCfgDesc+0x14e>
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b09      	cmp	r3, #9
 8008348:	d007      	beq.n	800835a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834c:	2209      	movs	r2, #9
 800834e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008350:	e003      	b.n	800835a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	2207      	movs	r2, #7
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	e000      	b.n	800835c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800835a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800835c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008360:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008364:	3201      	adds	r2, #1
 8008366:	00d2      	lsls	r2, r2, #3
 8008368:	211a      	movs	r1, #26
 800836a:	fb01 f303 	mul.w	r3, r1, r3
 800836e:	4413      	add	r3, r2
 8008370:	3308      	adds	r3, #8
 8008372:	6a3a      	ldr	r2, [r7, #32]
 8008374:	4413      	add	r3, r2
 8008376:	3304      	adds	r3, #4
 8008378:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800837a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800837c:	69b9      	ldr	r1, [r7, #24]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f86f 	bl	8008462 <USBH_ParseEPDesc>
 8008384:	4603      	mov	r3, r0
 8008386:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800838a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800838e:	3301      	adds	r3, #1
 8008390:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008394:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008398:	2b01      	cmp	r3, #1
 800839a:	d80a      	bhi.n	80083b2 <USBH_ParseCfgDesc+0x1a6>
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d204      	bcs.n	80083b2 <USBH_ParseCfgDesc+0x1a6>
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	885a      	ldrh	r2, [r3, #2]
 80083ac:	8afb      	ldrh	r3, [r7, #22]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d8ac      	bhi.n	800830c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	791b      	ldrb	r3, [r3, #4]
 80083b6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d201      	bcs.n	80083c2 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80083be:	2303      	movs	r3, #3
 80083c0:	e01c      	b.n	80083fc <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80083c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083c6:	3301      	adds	r3, #1
 80083c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d805      	bhi.n	80083e0 <USBH_ParseCfgDesc+0x1d4>
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	885a      	ldrh	r2, [r3, #2]
 80083d8:	8afb      	ldrh	r3, [r7, #22]
 80083da:	429a      	cmp	r2, r3
 80083dc:	f63f af70 	bhi.w	80082c0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	791b      	ldrb	r3, [r3, #4]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	bf28      	it	cs
 80083e8:	2302      	movcs	r3, #2
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d201      	bcs.n	80083f8 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e001      	b.n	80083fc <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80083f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3730      	adds	r7, #48	@ 0x30
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	785a      	ldrb	r2, [r3, #1]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	789a      	ldrb	r2, [r3, #2]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	78da      	ldrb	r2, [r3, #3]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	791a      	ldrb	r2, [r3, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	795a      	ldrb	r2, [r3, #5]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	799a      	ldrb	r2, [r3, #6]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	79da      	ldrb	r2, [r3, #7]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	7a1a      	ldrb	r2, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	721a      	strb	r2, [r3, #8]
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008462:	b480      	push	{r7}
 8008464:	b087      	sub	sp, #28
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	781a      	ldrb	r2, [r3, #0]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	785a      	ldrb	r2, [r3, #1]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	789a      	ldrb	r2, [r3, #2]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	78da      	ldrb	r2, [r3, #3]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3304      	adds	r3, #4
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3305      	adds	r3, #5
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	4313      	orrs	r3, r2
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	799a      	ldrb	r2, [r3, #6]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	889b      	ldrh	r3, [r3, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084c4:	d804      	bhi.n	80084d0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ce:	d901      	bls.n	80084d4 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80084d0:	2303      	movs	r3, #3
 80084d2:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d136      	bne.n	800854c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	78db      	ldrb	r3, [r3, #3]
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d108      	bne.n	80084fc <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	889b      	ldrh	r3, [r3, #4]
 80084ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f2:	f240 8097 	bls.w	8008624 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80084f6:	2303      	movs	r3, #3
 80084f8:	75fb      	strb	r3, [r7, #23]
 80084fa:	e093      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	78db      	ldrb	r3, [r3, #3]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d107      	bne.n	8008518 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	889b      	ldrh	r3, [r3, #4]
 800850c:	2b40      	cmp	r3, #64	@ 0x40
 800850e:	f240 8089 	bls.w	8008624 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008512:	2303      	movs	r3, #3
 8008514:	75fb      	strb	r3, [r7, #23]
 8008516:	e085      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	78db      	ldrb	r3, [r3, #3]
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	2b01      	cmp	r3, #1
 8008522:	d005      	beq.n	8008530 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800852c:	2b03      	cmp	r3, #3
 800852e:	d10a      	bne.n	8008546 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	799b      	ldrb	r3, [r3, #6]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <USBH_ParseEPDesc+0xde>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	799b      	ldrb	r3, [r3, #6]
 800853c:	2b10      	cmp	r3, #16
 800853e:	d970      	bls.n	8008622 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008540:	2303      	movs	r3, #3
 8008542:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008544:	e06d      	b.n	8008622 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008546:	2303      	movs	r3, #3
 8008548:	75fb      	strb	r3, [r7, #23]
 800854a:	e06b      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008552:	2b01      	cmp	r3, #1
 8008554:	d13c      	bne.n	80085d0 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	78db      	ldrb	r3, [r3, #3]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d005      	beq.n	800856e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	78db      	ldrb	r3, [r3, #3]
 8008566:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	889b      	ldrh	r3, [r3, #4]
 8008572:	2b40      	cmp	r3, #64	@ 0x40
 8008574:	d956      	bls.n	8008624 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008576:	2303      	movs	r3, #3
 8008578:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800857a:	e053      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	78db      	ldrb	r3, [r3, #3]
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	2b01      	cmp	r3, #1
 8008586:	d10e      	bne.n	80085a6 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	799b      	ldrb	r3, [r3, #6]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008594:	2b10      	cmp	r3, #16
 8008596:	d803      	bhi.n	80085a0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800859c:	2b40      	cmp	r3, #64	@ 0x40
 800859e:	d941      	bls.n	8008624 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085a0:	2303      	movs	r3, #3
 80085a2:	75fb      	strb	r3, [r7, #23]
 80085a4:	e03e      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	78db      	ldrb	r3, [r3, #3]
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d10b      	bne.n	80085ca <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	799b      	ldrb	r3, [r3, #6]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <USBH_ParseEPDesc+0x162>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	889b      	ldrh	r3, [r3, #4]
 80085be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085c2:	d32f      	bcc.n	8008624 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085c4:	2303      	movs	r3, #3
 80085c6:	75fb      	strb	r3, [r7, #23]
 80085c8:	e02c      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80085ca:	2303      	movs	r3, #3
 80085cc:	75fb      	strb	r3, [r7, #23]
 80085ce:	e029      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d120      	bne.n	800861c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	78db      	ldrb	r3, [r3, #3]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d106      	bne.n	80085f4 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	889b      	ldrh	r3, [r3, #4]
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d01a      	beq.n	8008624 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085ee:	2303      	movs	r3, #3
 80085f0:	75fb      	strb	r3, [r7, #23]
 80085f2:	e017      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	78db      	ldrb	r3, [r3, #3]
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d10a      	bne.n	8008616 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	799b      	ldrb	r3, [r3, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <USBH_ParseEPDesc+0x1ae>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	889b      	ldrh	r3, [r3, #4]
 800860c:	2b08      	cmp	r3, #8
 800860e:	d909      	bls.n	8008624 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008610:	2303      	movs	r3, #3
 8008612:	75fb      	strb	r3, [r7, #23]
 8008614:	e006      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
 800861a:	e003      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800861c:	2303      	movs	r3, #3
 800861e:	75fb      	strb	r3, [r7, #23]
 8008620:	e000      	b.n	8008624 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008622:	bf00      	nop
  }

  return status;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
}
 8008626:	4618      	mov	r0, r3
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	4613      	mov	r3, r2
 800863e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d120      	bne.n	800868c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	1e9a      	subs	r2, r3, #2
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	4293      	cmp	r3, r2
 8008654:	bf28      	it	cs
 8008656:	4613      	movcs	r3, r2
 8008658:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3302      	adds	r3, #2
 800865e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008660:	2300      	movs	r3, #0
 8008662:	82fb      	strh	r3, [r7, #22]
 8008664:	e00b      	b.n	800867e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008666:	8afb      	ldrh	r3, [r7, #22]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	3301      	adds	r3, #1
 8008676:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008678:	8afb      	ldrh	r3, [r7, #22]
 800867a:	3302      	adds	r3, #2
 800867c:	82fb      	strh	r3, [r7, #22]
 800867e:	8afa      	ldrh	r2, [r7, #22]
 8008680:	8abb      	ldrh	r3, [r7, #20]
 8008682:	429a      	cmp	r2, r3
 8008684:	d3ef      	bcc.n	8008666 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
  }
}
 800868c:	bf00      	nop
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	7812      	ldrb	r2, [r2, #0]
 80086aa:	4413      	add	r3, r2
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086be:	68fb      	ldr	r3, [r7, #12]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	4613      	mov	r3, r2
 80086d8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086da:	2301      	movs	r3, #1
 80086dc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	789b      	ldrb	r3, [r3, #2]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d002      	beq.n	80086ec <USBH_CtlReq+0x20>
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d00f      	beq.n	800870a <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80086ea:	e027      	b.n	800873c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2202      	movs	r2, #2
 8008702:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008704:	2301      	movs	r3, #1
 8008706:	75fb      	strb	r3, [r7, #23]
      break;
 8008708:	e018      	b.n	800873c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f81c 	bl	8008748 <USBH_HandleControl>
 8008710:	4603      	mov	r3, r0
 8008712:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <USBH_CtlReq+0x54>
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d106      	bne.n	800872e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	761a      	strb	r2, [r3, #24]
      break;
 800872c:	e005      	b.n	800873a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d102      	bne.n	800873a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	709a      	strb	r2, [r3, #2]
      break;
 800873a:	bf00      	nop
  }
  return status;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af02      	add	r7, sp, #8
 800874e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008754:	2300      	movs	r3, #0
 8008756:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7e1b      	ldrb	r3, [r3, #24]
 800875c:	3b01      	subs	r3, #1
 800875e:	2b0a      	cmp	r3, #10
 8008760:	f200 8157 	bhi.w	8008a12 <USBH_HandleControl+0x2ca>
 8008764:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <USBH_HandleControl+0x24>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	08008799 	.word	0x08008799
 8008770:	080087b3 	.word	0x080087b3
 8008774:	0800881d 	.word	0x0800881d
 8008778:	08008843 	.word	0x08008843
 800877c:	0800887d 	.word	0x0800887d
 8008780:	080088a7 	.word	0x080088a7
 8008784:	080088f9 	.word	0x080088f9
 8008788:	0800891b 	.word	0x0800891b
 800878c:	08008957 	.word	0x08008957
 8008790:	0800897d 	.word	0x0800897d
 8008794:	080089bb 	.word	0x080089bb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f103 0110 	add.w	r1, r3, #16
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	795b      	ldrb	r3, [r3, #5]
 80087a2:	461a      	mov	r2, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f945 	bl	8008a34 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2202      	movs	r2, #2
 80087ae:	761a      	strb	r2, [r3, #24]
      break;
 80087b0:	e13a      	b.n	8008a28 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	795b      	ldrb	r3, [r3, #5]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fcc7 	bl	800914c <USBH_LL_GetURBState>
 80087be:	4603      	mov	r3, r0
 80087c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d11e      	bne.n	8008806 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	7c1b      	ldrb	r3, [r3, #16]
 80087cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	8adb      	ldrh	r3, [r3, #22]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087da:	7b7b      	ldrb	r3, [r7, #13]
 80087dc:	2b80      	cmp	r3, #128	@ 0x80
 80087de:	d103      	bne.n	80087e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2203      	movs	r2, #3
 80087e4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80087e6:	e116      	b.n	8008a16 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2205      	movs	r2, #5
 80087ec:	761a      	strb	r2, [r3, #24]
      break;
 80087ee:	e112      	b.n	8008a16 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 80087f0:	7b7b      	ldrb	r3, [r7, #13]
 80087f2:	2b80      	cmp	r3, #128	@ 0x80
 80087f4:	d103      	bne.n	80087fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2209      	movs	r2, #9
 80087fa:	761a      	strb	r2, [r3, #24]
      break;
 80087fc:	e10b      	b.n	8008a16 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2207      	movs	r2, #7
 8008802:	761a      	strb	r2, [r3, #24]
      break;
 8008804:	e107      	b.n	8008a16 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b04      	cmp	r3, #4
 800880a:	d003      	beq.n	8008814 <USBH_HandleControl+0xcc>
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b02      	cmp	r3, #2
 8008810:	f040 8101 	bne.w	8008a16 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	220b      	movs	r2, #11
 8008818:	761a      	strb	r2, [r3, #24]
      break;
 800881a:	e0fc      	b.n	8008a16 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008822:	b29a      	uxth	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6899      	ldr	r1, [r3, #8]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	899a      	ldrh	r2, [r3, #12]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	791b      	ldrb	r3, [r3, #4]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f93c 	bl	8008ab2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2204      	movs	r2, #4
 800883e:	761a      	strb	r2, [r3, #24]
      break;
 8008840:	e0f2      	b.n	8008a28 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	791b      	ldrb	r3, [r3, #4]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fc7f 	bl	800914c <USBH_LL_GetURBState>
 800884e:	4603      	mov	r3, r0
 8008850:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d103      	bne.n	8008860 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2209      	movs	r2, #9
 800885c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800885e:	e0dc      	b.n	8008a1a <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b05      	cmp	r3, #5
 8008864:	d102      	bne.n	800886c <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8008866:	2303      	movs	r3, #3
 8008868:	73fb      	strb	r3, [r7, #15]
      break;
 800886a:	e0d6      	b.n	8008a1a <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	2b04      	cmp	r3, #4
 8008870:	f040 80d3 	bne.w	8008a1a <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	220b      	movs	r2, #11
 8008878:	761a      	strb	r2, [r3, #24]
      break;
 800887a:	e0ce      	b.n	8008a1a <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6899      	ldr	r1, [r3, #8]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	899a      	ldrh	r2, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	795b      	ldrb	r3, [r3, #5]
 8008888:	2001      	movs	r0, #1
 800888a:	9000      	str	r0, [sp, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f8eb 	bl	8008a68 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008898:	b29a      	uxth	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2206      	movs	r2, #6
 80088a2:	761a      	strb	r2, [r3, #24]
      break;
 80088a4:	e0c0      	b.n	8008a28 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	795b      	ldrb	r3, [r3, #5]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fc4d 	bl	800914c <USBH_LL_GetURBState>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d103      	bne.n	80088c4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2207      	movs	r2, #7
 80088c0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80088c2:	e0ac      	b.n	8008a1e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b05      	cmp	r3, #5
 80088c8:	d105      	bne.n	80088d6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	220c      	movs	r2, #12
 80088ce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088d0:	2303      	movs	r3, #3
 80088d2:	73fb      	strb	r3, [r7, #15]
      break;
 80088d4:	e0a3      	b.n	8008a1e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d103      	bne.n	80088e4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2205      	movs	r2, #5
 80088e0:	761a      	strb	r2, [r3, #24]
      break;
 80088e2:	e09c      	b.n	8008a1e <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	f040 8099 	bne.w	8008a1e <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	220b      	movs	r2, #11
 80088f0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80088f2:	2302      	movs	r3, #2
 80088f4:	73fb      	strb	r3, [r7, #15]
      break;
 80088f6:	e092      	b.n	8008a1e <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	791b      	ldrb	r3, [r3, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	2100      	movs	r1, #0
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f8d6 	bl	8008ab2 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800890c:	b29a      	uxth	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2208      	movs	r2, #8
 8008916:	761a      	strb	r2, [r3, #24]

      break;
 8008918:	e086      	b.n	8008a28 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	791b      	ldrb	r3, [r3, #4]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc13 	bl	800914c <USBH_LL_GetURBState>
 8008926:	4603      	mov	r3, r0
 8008928:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d105      	bne.n	800893c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	220d      	movs	r2, #13
 8008934:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800893a:	e072      	b.n	8008a22 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b04      	cmp	r3, #4
 8008940:	d103      	bne.n	800894a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	220b      	movs	r2, #11
 8008946:	761a      	strb	r2, [r3, #24]
      break;
 8008948:	e06b      	b.n	8008a22 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b05      	cmp	r3, #5
 800894e:	d168      	bne.n	8008a22 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8008950:	2303      	movs	r3, #3
 8008952:	73fb      	strb	r3, [r7, #15]
      break;
 8008954:	e065      	b.n	8008a22 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	795b      	ldrb	r3, [r3, #5]
 800895a:	2201      	movs	r2, #1
 800895c:	9200      	str	r2, [sp, #0]
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f880 	bl	8008a68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	220a      	movs	r2, #10
 8008978:	761a      	strb	r2, [r3, #24]
      break;
 800897a:	e055      	b.n	8008a28 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	795b      	ldrb	r3, [r3, #5]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fbe2 	bl	800914c <USBH_LL_GetURBState>
 8008988:	4603      	mov	r3, r0
 800898a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d105      	bne.n	800899e <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	220d      	movs	r2, #13
 800899a:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800899c:	e043      	b.n	8008a26 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d103      	bne.n	80089ac <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2209      	movs	r2, #9
 80089a8:	761a      	strb	r2, [r3, #24]
      break;
 80089aa:	e03c      	b.n	8008a26 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d139      	bne.n	8008a26 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	220b      	movs	r2, #11
 80089b6:	761a      	strb	r2, [r3, #24]
      break;
 80089b8:	e035      	b.n	8008a26 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7e5b      	ldrb	r3, [r3, #25]
 80089be:	3301      	adds	r3, #1
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	765a      	strb	r2, [r3, #25]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7e5b      	ldrb	r3, [r3, #25]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d806      	bhi.n	80089dc <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089da:	e025      	b.n	8008a28 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089e2:	2106      	movs	r1, #6
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	795b      	ldrb	r3, [r3, #5]
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f90d 	bl	8008c14 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	791b      	ldrb	r3, [r3, #4]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f907 	bl	8008c14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a10:	e00a      	b.n	8008a28 <USBH_HandleControl+0x2e0>

    default:
      break;
 8008a12:	bf00      	nop
 8008a14:	e008      	b.n	8008a28 <USBH_HandleControl+0x2e0>
      break;
 8008a16:	bf00      	nop
 8008a18:	e006      	b.n	8008a28 <USBH_HandleControl+0x2e0>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e004      	b.n	8008a28 <USBH_HandleControl+0x2e0>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e002      	b.n	8008a28 <USBH_HandleControl+0x2e0>
      break;
 8008a22:	bf00      	nop
 8008a24:	e000      	b.n	8008a28 <USBH_HandleControl+0x2e0>
      break;
 8008a26:	bf00      	nop
  }

  return status;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop

08008a34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af04      	add	r7, sp, #16
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a42:	79f9      	ldrb	r1, [r7, #7]
 8008a44:	2300      	movs	r3, #0
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	2308      	movs	r3, #8
 8008a4a:	9302      	str	r3, [sp, #8]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	2300      	movs	r3, #0
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	2300      	movs	r3, #0
 8008a56:	2200      	movs	r2, #0
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fb46 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af04      	add	r7, sp, #16
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4611      	mov	r1, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	460b      	mov	r3, r1
 8008a78:	80fb      	strh	r3, [r7, #6]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a8c:	7979      	ldrb	r1, [r7, #5]
 8008a8e:	7e3b      	ldrb	r3, [r7, #24]
 8008a90:	9303      	str	r3, [sp, #12]
 8008a92:	88fb      	ldrh	r3, [r7, #6]
 8008a94:	9302      	str	r3, [sp, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fb21 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b088      	sub	sp, #32
 8008ab6:	af04      	add	r7, sp, #16
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	4611      	mov	r1, r2
 8008abe:	461a      	mov	r2, r3
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	80fb      	strh	r3, [r7, #6]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ac8:	7979      	ldrb	r1, [r7, #5]
 8008aca:	2300      	movs	r3, #0
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	9302      	str	r3, [sp, #8]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	2300      	movs	r3, #0
 8008adc:	2201      	movs	r2, #1
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fb03 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ae4:	2300      	movs	r3, #0

}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b088      	sub	sp, #32
 8008af2:	af04      	add	r7, sp, #16
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	4611      	mov	r1, r2
 8008afa:	461a      	mov	r2, r3
 8008afc:	460b      	mov	r3, r1
 8008afe:	80fb      	strh	r3, [r7, #6]
 8008b00:	4613      	mov	r3, r2
 8008b02:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b12:	7979      	ldrb	r1, [r7, #5]
 8008b14:	7e3b      	ldrb	r3, [r7, #24]
 8008b16:	9303      	str	r3, [sp, #12]
 8008b18:	88fb      	ldrh	r3, [r7, #6]
 8008b1a:	9302      	str	r3, [sp, #8]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	2301      	movs	r3, #1
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	2302      	movs	r3, #2
 8008b26:	2200      	movs	r2, #0
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 fade 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af04      	add	r7, sp, #16
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	4611      	mov	r1, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	460b      	mov	r3, r1
 8008b48:	80fb      	strh	r3, [r7, #6]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b4e:	7979      	ldrb	r1, [r7, #5]
 8008b50:	2300      	movs	r3, #0
 8008b52:	9303      	str	r3, [sp, #12]
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	2302      	movs	r3, #2
 8008b62:	2201      	movs	r2, #1
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 fac0 	bl	80090ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	4611      	mov	r1, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	70fb      	strb	r3, [r7, #3]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70bb      	strb	r3, [r7, #2]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b8e:	7878      	ldrb	r0, [r7, #1]
 8008b90:	78ba      	ldrb	r2, [r7, #2]
 8008b92:	78f9      	ldrb	r1, [r7, #3]
 8008b94:	8b3b      	ldrh	r3, [r7, #24]
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	7d3b      	ldrb	r3, [r7, #20]
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	7c3b      	ldrb	r3, [r7, #16]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fa53 	bl	800904e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa72 	bl	80090ac <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f836 	bl	8008c50 <USBH_GetFreePipe>
 8008be4:	4603      	mov	r3, r0
 8008be6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008be8:	89fb      	ldrh	r3, [r7, #14]
 8008bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00a      	beq.n	8008c08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	33e0      	adds	r3, #224	@ 0xe0
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	440b      	add	r3, r1
 8008c06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c08:	89fb      	ldrh	r3, [r7, #14]
 8008c0a:	b2db      	uxtb	r3, r3
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	2b0f      	cmp	r3, #15
 8008c24:	d80d      	bhi.n	8008c42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	33e0      	adds	r3, #224	@ 0xe0
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c38:	6879      	ldr	r1, [r7, #4]
 8008c3a:	33e0      	adds	r3, #224	@ 0xe0
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
 8008c60:	e00f      	b.n	8008c82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	33e0      	adds	r3, #224	@ 0xe0
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	e007      	b.n	8008c8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	73fb      	strb	r3, [r7, #15]
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b0f      	cmp	r3, #15
 8008c86:	d9ec      	bls.n	8008c62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	490e      	ldr	r1, [pc, #56]	@ (8008cd8 <MX_USB_HOST_Init+0x40>)
 8008ca0:	480e      	ldr	r0, [pc, #56]	@ (8008cdc <MX_USB_HOST_Init+0x44>)
 8008ca2:	f7fe fb0f 	bl	80072c4 <USBH_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008cac:	f7f7 febc 	bl	8000a28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008cb0:	490b      	ldr	r1, [pc, #44]	@ (8008ce0 <MX_USB_HOST_Init+0x48>)
 8008cb2:	480a      	ldr	r0, [pc, #40]	@ (8008cdc <MX_USB_HOST_Init+0x44>)
 8008cb4:	f7fe fbb1 	bl	800741a <USBH_RegisterClass>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cbe:	f7f7 feb3 	bl	8000a28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008cc2:	4806      	ldr	r0, [pc, #24]	@ (8008cdc <MX_USB_HOST_Init+0x44>)
 8008cc4:	f7fe fc35 	bl	8007532 <USBH_Start>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008cce:	f7f7 feab 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008cd2:	bf00      	nop
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	08008cf9 	.word	0x08008cf9
 8008cdc:	200001b4 	.word	0x200001b4
 8008ce0:	2000000c 	.word	0x2000000c

08008ce4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008ce8:	4802      	ldr	r0, [pc, #8]	@ (8008cf4 <MX_USB_HOST_Process+0x10>)
 8008cea:	f7fe fc33 	bl	8007554 <USBH_Process>
}
 8008cee:	bf00      	nop
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	200001b4 	.word	0x200001b4

08008cf8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d819      	bhi.n	8008d40 <USBH_UserProcess+0x48>
 8008d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <USBH_UserProcess+0x1c>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d41 	.word	0x08008d41
 8008d18:	08008d31 	.word	0x08008d31
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d39 	.word	0x08008d39
 8008d24:	08008d29 	.word	0x08008d29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d28:	4b09      	ldr	r3, [pc, #36]	@ (8008d50 <USBH_UserProcess+0x58>)
 8008d2a:	2203      	movs	r2, #3
 8008d2c:	701a      	strb	r2, [r3, #0]
  break;
 8008d2e:	e008      	b.n	8008d42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d30:	4b07      	ldr	r3, [pc, #28]	@ (8008d50 <USBH_UserProcess+0x58>)
 8008d32:	2202      	movs	r2, #2
 8008d34:	701a      	strb	r2, [r3, #0]
  break;
 8008d36:	e004      	b.n	8008d42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d38:	4b05      	ldr	r3, [pc, #20]	@ (8008d50 <USBH_UserProcess+0x58>)
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	701a      	strb	r2, [r3, #0]
  break;
 8008d3e:	e000      	b.n	8008d42 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d42:	bf00      	nop
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	2000058c 	.word	0x2000058c

08008d54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08a      	sub	sp, #40	@ 0x28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d5c:	f107 0314 	add.w	r3, r7, #20
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	605a      	str	r2, [r3, #4]
 8008d66:	609a      	str	r2, [r3, #8]
 8008d68:	60da      	str	r2, [r3, #12]
 8008d6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d74:	d147      	bne.n	8008e06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d76:	2300      	movs	r3, #0
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	4b25      	ldr	r3, [pc, #148]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7e:	4a24      	ldr	r2, [pc, #144]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008d80:	f043 0301 	orr.w	r3, r3, #1
 8008d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d86:	4b22      	ldr	r3, [pc, #136]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008da0:	f107 0314 	add.w	r3, r7, #20
 8008da4:	4619      	mov	r1, r3
 8008da6:	481b      	ldr	r0, [pc, #108]	@ (8008e14 <HAL_HCD_MspInit+0xc0>)
 8008da8:	f7f8 ffc2 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008dac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008db2:	2302      	movs	r3, #2
 8008db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dc2:	f107 0314 	add.w	r3, r7, #20
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4812      	ldr	r0, [pc, #72]	@ (8008e14 <HAL_HCD_MspInit+0xc0>)
 8008dca:	f7f8 ffb1 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dce:	4b10      	ldr	r3, [pc, #64]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd8:	6353      	str	r3, [r2, #52]	@ 0x34
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008de2:	4a0b      	ldr	r2, [pc, #44]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8008dea:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <HAL_HCD_MspInit+0xbc>)
 8008dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008df6:	2200      	movs	r2, #0
 8008df8:	2100      	movs	r1, #0
 8008dfa:	2043      	movs	r0, #67	@ 0x43
 8008dfc:	f7f8 ff61 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e00:	2043      	movs	r0, #67	@ 0x43
 8008e02:	f7f8 ff7a 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e06:	bf00      	nop
 8008e08:	3728      	adds	r7, #40	@ 0x28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	40023800 	.word	0x40023800
 8008e14:	40020000 	.word	0x40020000

08008e18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe ff6d 	bl	8007d06 <USBH_LL_IncTimer>
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe ffa9 	bl	8007d9a <USBH_LL_Connect>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe ffb2 	bl	8007dc8 <USBH_LL_Disconnect>
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe ff5f 	bl	8007d5a <USBH_LL_PortEnabled>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe ff5f 	bl	8007d76 <USBH_LL_PortDisabled>
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d12a      	bne.n	8008f28 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ed2:	4a18      	ldr	r2, [pc, #96]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a15      	ldr	r2, [pc, #84]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008ede:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ee2:	4b14      	ldr	r3, [pc, #80]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008ee4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ee8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008eea:	4b12      	ldr	r3, [pc, #72]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008eec:	2208      	movs	r2, #8
 8008eee:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008ef0:	4b10      	ldr	r3, [pc, #64]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008efc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008efe:	2202      	movs	r2, #2
 8008f00:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f02:	4b0c      	ldr	r3, [pc, #48]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f08:	480a      	ldr	r0, [pc, #40]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008f0a:	f7f9 f8c6 	bl	800209a <HAL_HCD_Init>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f14:	f7f7 fd88 	bl	8000a28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f18:	4806      	ldr	r0, [pc, #24]	@ (8008f34 <USBH_LL_Init+0x74>)
 8008f1a:	f7f9 fd27 	bl	800296c <HAL_HCD_GetCurrentFrame>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7fe fee0 	bl	8007ce8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000590 	.word	0x20000590

08008f38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7f9 fc94 	bl	800287c <HAL_HCD_Start>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f95e 	bl	800921c <USBH_Get_USB_Status>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7f9 fc9c 	bl	80028c2 <HAL_HCD_Stop>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 f943 	bl	800921c <USBH_Get_USB_Status>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fac:	2301      	movs	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7f9 fce6 	bl	8002988 <HAL_HCD_GetCurrentSpeed>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d00c      	beq.n	8008fdc <USBH_LL_GetSpeed+0x38>
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d80d      	bhi.n	8008fe2 <USBH_LL_GetSpeed+0x3e>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <USBH_LL_GetSpeed+0x2c>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d003      	beq.n	8008fd6 <USBH_LL_GetSpeed+0x32>
 8008fce:	e008      	b.n	8008fe2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd4:	e008      	b.n	8008fe8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fda:	e005      	b.n	8008fe8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe0:	e002      	b.n	8008fe8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe6:	bf00      	nop
  }
  return  speed;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009008:	4618      	mov	r0, r3
 800900a:	f7f9 fc77 	bl	80028fc <HAL_HCD_ResetPort>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f901 	bl	800921c <USBH_Get_USB_Status>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800903a:	78fa      	ldrb	r2, [r7, #3]
 800903c:	4611      	mov	r1, r2
 800903e:	4618      	mov	r0, r3
 8009040:	f7f9 fc7f 	bl	8002942 <HAL_HCD_HC_GetXferCount>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800904e:	b590      	push	{r4, r7, lr}
 8009050:	b089      	sub	sp, #36	@ 0x24
 8009052:	af04      	add	r7, sp, #16
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	461a      	mov	r2, r3
 800905c:	4603      	mov	r3, r0
 800905e:	70fb      	strb	r3, [r7, #3]
 8009060:	460b      	mov	r3, r1
 8009062:	70bb      	strb	r3, [r7, #2]
 8009064:	4613      	mov	r3, r2
 8009066:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009076:	787c      	ldrb	r4, [r7, #1]
 8009078:	78ba      	ldrb	r2, [r7, #2]
 800907a:	78f9      	ldrb	r1, [r7, #3]
 800907c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800907e:	9302      	str	r3, [sp, #8]
 8009080:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	f897 3020 	ldrb.w	r3, [r7, #32]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4623      	mov	r3, r4
 800908e:	f7f9 f86b 	bl	8002168 <HAL_HCD_HC_Init>
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f8bf 	bl	800921c <USBH_Get_USB_Status>
 800909e:	4603      	mov	r3, r0
 80090a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd90      	pop	{r4, r7, pc}

080090ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f9 f904 	bl	80022d8 <HAL_HCD_HC_Halt>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f8a0 	bl	800921c <USBH_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80090ea:	b590      	push	{r4, r7, lr}
 80090ec:	b089      	sub	sp, #36	@ 0x24
 80090ee:	af04      	add	r7, sp, #16
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	461a      	mov	r2, r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	70fb      	strb	r3, [r7, #3]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70bb      	strb	r3, [r7, #2]
 8009100:	4613      	mov	r3, r2
 8009102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009112:	787c      	ldrb	r4, [r7, #1]
 8009114:	78ba      	ldrb	r2, [r7, #2]
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009120:	9302      	str	r3, [sp, #8]
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	f897 3020 	ldrb.w	r3, [r7, #32]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	4623      	mov	r3, r4
 800912e:	f7f9 f8f7 	bl	8002320 <HAL_HCD_HC_SubmitRequest>
 8009132:	4603      	mov	r3, r0
 8009134:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f86f 	bl	800921c <USBH_Get_USB_Status>
 800913e:	4603      	mov	r3, r0
 8009140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009142:	7bbb      	ldrb	r3, [r7, #14]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	bd90      	pop	{r4, r7, pc}

0800914c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7f9 fbd8 	bl	8002918 <HAL_HCD_HC_GetURBState>
 8009168:	4603      	mov	r3, r0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009184:	2b01      	cmp	r3, #1
 8009186:	d103      	bne.n	8009190 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f872 	bl	8009274 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009190:	20c8      	movs	r0, #200	@ 0xc8
 8009192:	f7f7 ff9b 	bl	80010cc <HAL_Delay>
  return USBH_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
 80091ac:	4613      	mov	r3, r2
 80091ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091b8:	78fa      	ldrb	r2, [r7, #3]
 80091ba:	68f9      	ldr	r1, [r7, #12]
 80091bc:	4613      	mov	r3, r2
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	3317      	adds	r3, #23
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80091ce:	78fa      	ldrb	r2, [r7, #3]
 80091d0:	68f9      	ldr	r1, [r7, #12]
 80091d2:	4613      	mov	r3, r2
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	1a9b      	subs	r3, r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	333c      	adds	r3, #60	@ 0x3c
 80091de:	78ba      	ldrb	r2, [r7, #2]
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e009      	b.n	80091f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	4613      	mov	r3, r2
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	333d      	adds	r3, #61	@ 0x3d
 80091f4:	78ba      	ldrb	r2, [r7, #2]
 80091f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7f7 ff5c 	bl	80010cc <HAL_Delay>
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	2b03      	cmp	r3, #3
 800922e:	d817      	bhi.n	8009260 <USBH_Get_USB_Status+0x44>
 8009230:	a201      	add	r2, pc, #4	@ (adr r2, 8009238 <USBH_Get_USB_Status+0x1c>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009249 	.word	0x08009249
 800923c:	0800924f 	.word	0x0800924f
 8009240:	08009255 	.word	0x08009255
 8009244:	0800925b 	.word	0x0800925b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
    break;
 800924c:	e00b      	b.n	8009266 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800924e:	2302      	movs	r3, #2
 8009250:	73fb      	strb	r3, [r7, #15]
    break;
 8009252:	e008      	b.n	8009266 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
    break;
 8009258:	e005      	b.n	8009266 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	73fb      	strb	r3, [r7, #15]
    break;
 800925e:	e002      	b.n	8009266 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009260:	2302      	movs	r3, #2
 8009262:	73fb      	strb	r3, [r7, #15]
    break;
 8009264:	bf00      	nop
  }
  return usb_status;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
 800928c:	e001      	b.n	8009292 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800928e:	2301      	movs	r3, #1
 8009290:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	461a      	mov	r2, r3
 8009296:	2101      	movs	r1, #1
 8009298:	4803      	ldr	r0, [pc, #12]	@ (80092a8 <MX_DriverVbusFS+0x34>)
 800929a:	f7f8 fee5 	bl	8002068 <HAL_GPIO_WritePin>
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	40020800 	.word	0x40020800

080092ac <malloc>:
 80092ac:	4b02      	ldr	r3, [pc, #8]	@ (80092b8 <malloc+0xc>)
 80092ae:	4601      	mov	r1, r0
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	f000 b82d 	b.w	8009310 <_malloc_r>
 80092b6:	bf00      	nop
 80092b8:	2000002c 	.word	0x2000002c

080092bc <free>:
 80092bc:	4b02      	ldr	r3, [pc, #8]	@ (80092c8 <free+0xc>)
 80092be:	4601      	mov	r1, r0
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	f000 b8f5 	b.w	80094b0 <_free_r>
 80092c6:	bf00      	nop
 80092c8:	2000002c 	.word	0x2000002c

080092cc <sbrk_aligned>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4e0f      	ldr	r6, [pc, #60]	@ (800930c <sbrk_aligned+0x40>)
 80092d0:	460c      	mov	r4, r1
 80092d2:	6831      	ldr	r1, [r6, #0]
 80092d4:	4605      	mov	r5, r0
 80092d6:	b911      	cbnz	r1, 80092de <sbrk_aligned+0x12>
 80092d8:	f000 f8ae 	bl	8009438 <_sbrk_r>
 80092dc:	6030      	str	r0, [r6, #0]
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f000 f8a9 	bl	8009438 <_sbrk_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d103      	bne.n	80092f2 <sbrk_aligned+0x26>
 80092ea:	f04f 34ff 	mov.w	r4, #4294967295
 80092ee:	4620      	mov	r0, r4
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	1cc4      	adds	r4, r0, #3
 80092f4:	f024 0403 	bic.w	r4, r4, #3
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d0f8      	beq.n	80092ee <sbrk_aligned+0x22>
 80092fc:	1a21      	subs	r1, r4, r0
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f89a 	bl	8009438 <_sbrk_r>
 8009304:	3001      	adds	r0, #1
 8009306:	d1f2      	bne.n	80092ee <sbrk_aligned+0x22>
 8009308:	e7ef      	b.n	80092ea <sbrk_aligned+0x1e>
 800930a:	bf00      	nop
 800930c:	20000970 	.word	0x20000970

08009310 <_malloc_r>:
 8009310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009314:	1ccd      	adds	r5, r1, #3
 8009316:	f025 0503 	bic.w	r5, r5, #3
 800931a:	3508      	adds	r5, #8
 800931c:	2d0c      	cmp	r5, #12
 800931e:	bf38      	it	cc
 8009320:	250c      	movcc	r5, #12
 8009322:	2d00      	cmp	r5, #0
 8009324:	4606      	mov	r6, r0
 8009326:	db01      	blt.n	800932c <_malloc_r+0x1c>
 8009328:	42a9      	cmp	r1, r5
 800932a:	d904      	bls.n	8009336 <_malloc_r+0x26>
 800932c:	230c      	movs	r3, #12
 800932e:	6033      	str	r3, [r6, #0]
 8009330:	2000      	movs	r0, #0
 8009332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800940c <_malloc_r+0xfc>
 800933a:	f000 f869 	bl	8009410 <__malloc_lock>
 800933e:	f8d8 3000 	ldr.w	r3, [r8]
 8009342:	461c      	mov	r4, r3
 8009344:	bb44      	cbnz	r4, 8009398 <_malloc_r+0x88>
 8009346:	4629      	mov	r1, r5
 8009348:	4630      	mov	r0, r6
 800934a:	f7ff ffbf 	bl	80092cc <sbrk_aligned>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	4604      	mov	r4, r0
 8009352:	d158      	bne.n	8009406 <_malloc_r+0xf6>
 8009354:	f8d8 4000 	ldr.w	r4, [r8]
 8009358:	4627      	mov	r7, r4
 800935a:	2f00      	cmp	r7, #0
 800935c:	d143      	bne.n	80093e6 <_malloc_r+0xd6>
 800935e:	2c00      	cmp	r4, #0
 8009360:	d04b      	beq.n	80093fa <_malloc_r+0xea>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	4639      	mov	r1, r7
 8009366:	4630      	mov	r0, r6
 8009368:	eb04 0903 	add.w	r9, r4, r3
 800936c:	f000 f864 	bl	8009438 <_sbrk_r>
 8009370:	4581      	cmp	r9, r0
 8009372:	d142      	bne.n	80093fa <_malloc_r+0xea>
 8009374:	6821      	ldr	r1, [r4, #0]
 8009376:	1a6d      	subs	r5, r5, r1
 8009378:	4629      	mov	r1, r5
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ffa6 	bl	80092cc <sbrk_aligned>
 8009380:	3001      	adds	r0, #1
 8009382:	d03a      	beq.n	80093fa <_malloc_r+0xea>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	442b      	add	r3, r5
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	f8d8 3000 	ldr.w	r3, [r8]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	bb62      	cbnz	r2, 80093ec <_malloc_r+0xdc>
 8009392:	f8c8 7000 	str.w	r7, [r8]
 8009396:	e00f      	b.n	80093b8 <_malloc_r+0xa8>
 8009398:	6822      	ldr	r2, [r4, #0]
 800939a:	1b52      	subs	r2, r2, r5
 800939c:	d420      	bmi.n	80093e0 <_malloc_r+0xd0>
 800939e:	2a0b      	cmp	r2, #11
 80093a0:	d917      	bls.n	80093d2 <_malloc_r+0xc2>
 80093a2:	1961      	adds	r1, r4, r5
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	6025      	str	r5, [r4, #0]
 80093a8:	bf18      	it	ne
 80093aa:	6059      	strne	r1, [r3, #4]
 80093ac:	6863      	ldr	r3, [r4, #4]
 80093ae:	bf08      	it	eq
 80093b0:	f8c8 1000 	streq.w	r1, [r8]
 80093b4:	5162      	str	r2, [r4, r5]
 80093b6:	604b      	str	r3, [r1, #4]
 80093b8:	4630      	mov	r0, r6
 80093ba:	f000 f82f 	bl	800941c <__malloc_unlock>
 80093be:	f104 000b 	add.w	r0, r4, #11
 80093c2:	1d23      	adds	r3, r4, #4
 80093c4:	f020 0007 	bic.w	r0, r0, #7
 80093c8:	1ac2      	subs	r2, r0, r3
 80093ca:	bf1c      	itt	ne
 80093cc:	1a1b      	subne	r3, r3, r0
 80093ce:	50a3      	strne	r3, [r4, r2]
 80093d0:	e7af      	b.n	8009332 <_malloc_r+0x22>
 80093d2:	6862      	ldr	r2, [r4, #4]
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	bf0c      	ite	eq
 80093d8:	f8c8 2000 	streq.w	r2, [r8]
 80093dc:	605a      	strne	r2, [r3, #4]
 80093de:	e7eb      	b.n	80093b8 <_malloc_r+0xa8>
 80093e0:	4623      	mov	r3, r4
 80093e2:	6864      	ldr	r4, [r4, #4]
 80093e4:	e7ae      	b.n	8009344 <_malloc_r+0x34>
 80093e6:	463c      	mov	r4, r7
 80093e8:	687f      	ldr	r7, [r7, #4]
 80093ea:	e7b6      	b.n	800935a <_malloc_r+0x4a>
 80093ec:	461a      	mov	r2, r3
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	d1fb      	bne.n	80093ec <_malloc_r+0xdc>
 80093f4:	2300      	movs	r3, #0
 80093f6:	6053      	str	r3, [r2, #4]
 80093f8:	e7de      	b.n	80093b8 <_malloc_r+0xa8>
 80093fa:	230c      	movs	r3, #12
 80093fc:	6033      	str	r3, [r6, #0]
 80093fe:	4630      	mov	r0, r6
 8009400:	f000 f80c 	bl	800941c <__malloc_unlock>
 8009404:	e794      	b.n	8009330 <_malloc_r+0x20>
 8009406:	6005      	str	r5, [r0, #0]
 8009408:	e7d6      	b.n	80093b8 <_malloc_r+0xa8>
 800940a:	bf00      	nop
 800940c:	20000974 	.word	0x20000974

08009410 <__malloc_lock>:
 8009410:	4801      	ldr	r0, [pc, #4]	@ (8009418 <__malloc_lock+0x8>)
 8009412:	f000 b84b 	b.w	80094ac <__retarget_lock_acquire_recursive>
 8009416:	bf00      	nop
 8009418:	20000ab4 	.word	0x20000ab4

0800941c <__malloc_unlock>:
 800941c:	4801      	ldr	r0, [pc, #4]	@ (8009424 <__malloc_unlock+0x8>)
 800941e:	f000 b846 	b.w	80094ae <__retarget_lock_release_recursive>
 8009422:	bf00      	nop
 8009424:	20000ab4 	.word	0x20000ab4

08009428 <memset>:
 8009428:	4402      	add	r2, r0
 800942a:	4603      	mov	r3, r0
 800942c:	4293      	cmp	r3, r2
 800942e:	d100      	bne.n	8009432 <memset+0xa>
 8009430:	4770      	bx	lr
 8009432:	f803 1b01 	strb.w	r1, [r3], #1
 8009436:	e7f9      	b.n	800942c <memset+0x4>

08009438 <_sbrk_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d06      	ldr	r5, [pc, #24]	@ (8009454 <_sbrk_r+0x1c>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	f7f7 fd5e 	bl	8000f04 <_sbrk>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_sbrk_r+0x1a>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_sbrk_r+0x1a>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20000ab0 	.word	0x20000ab0

08009458 <__errno>:
 8009458:	4b01      	ldr	r3, [pc, #4]	@ (8009460 <__errno+0x8>)
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	2000002c 	.word	0x2000002c

08009464 <__libc_init_array>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	4d0d      	ldr	r5, [pc, #52]	@ (800949c <__libc_init_array+0x38>)
 8009468:	4c0d      	ldr	r4, [pc, #52]	@ (80094a0 <__libc_init_array+0x3c>)
 800946a:	1b64      	subs	r4, r4, r5
 800946c:	10a4      	asrs	r4, r4, #2
 800946e:	2600      	movs	r6, #0
 8009470:	42a6      	cmp	r6, r4
 8009472:	d109      	bne.n	8009488 <__libc_init_array+0x24>
 8009474:	4d0b      	ldr	r5, [pc, #44]	@ (80094a4 <__libc_init_array+0x40>)
 8009476:	4c0c      	ldr	r4, [pc, #48]	@ (80094a8 <__libc_init_array+0x44>)
 8009478:	f000 f864 	bl	8009544 <_init>
 800947c:	1b64      	subs	r4, r4, r5
 800947e:	10a4      	asrs	r4, r4, #2
 8009480:	2600      	movs	r6, #0
 8009482:	42a6      	cmp	r6, r4
 8009484:	d105      	bne.n	8009492 <__libc_init_array+0x2e>
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	f855 3b04 	ldr.w	r3, [r5], #4
 800948c:	4798      	blx	r3
 800948e:	3601      	adds	r6, #1
 8009490:	e7ee      	b.n	8009470 <__libc_init_array+0xc>
 8009492:	f855 3b04 	ldr.w	r3, [r5], #4
 8009496:	4798      	blx	r3
 8009498:	3601      	adds	r6, #1
 800949a:	e7f2      	b.n	8009482 <__libc_init_array+0x1e>
 800949c:	08009578 	.word	0x08009578
 80094a0:	08009578 	.word	0x08009578
 80094a4:	08009578 	.word	0x08009578
 80094a8:	0800957c 	.word	0x0800957c

080094ac <__retarget_lock_acquire_recursive>:
 80094ac:	4770      	bx	lr

080094ae <__retarget_lock_release_recursive>:
 80094ae:	4770      	bx	lr

080094b0 <_free_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4605      	mov	r5, r0
 80094b4:	2900      	cmp	r1, #0
 80094b6:	d041      	beq.n	800953c <_free_r+0x8c>
 80094b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094bc:	1f0c      	subs	r4, r1, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bfb8      	it	lt
 80094c2:	18e4      	addlt	r4, r4, r3
 80094c4:	f7ff ffa4 	bl	8009410 <__malloc_lock>
 80094c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009540 <_free_r+0x90>)
 80094ca:	6813      	ldr	r3, [r2, #0]
 80094cc:	b933      	cbnz	r3, 80094dc <_free_r+0x2c>
 80094ce:	6063      	str	r3, [r4, #4]
 80094d0:	6014      	str	r4, [r2, #0]
 80094d2:	4628      	mov	r0, r5
 80094d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094d8:	f7ff bfa0 	b.w	800941c <__malloc_unlock>
 80094dc:	42a3      	cmp	r3, r4
 80094de:	d908      	bls.n	80094f2 <_free_r+0x42>
 80094e0:	6820      	ldr	r0, [r4, #0]
 80094e2:	1821      	adds	r1, r4, r0
 80094e4:	428b      	cmp	r3, r1
 80094e6:	bf01      	itttt	eq
 80094e8:	6819      	ldreq	r1, [r3, #0]
 80094ea:	685b      	ldreq	r3, [r3, #4]
 80094ec:	1809      	addeq	r1, r1, r0
 80094ee:	6021      	streq	r1, [r4, #0]
 80094f0:	e7ed      	b.n	80094ce <_free_r+0x1e>
 80094f2:	461a      	mov	r2, r3
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	b10b      	cbz	r3, 80094fc <_free_r+0x4c>
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	d9fa      	bls.n	80094f2 <_free_r+0x42>
 80094fc:	6811      	ldr	r1, [r2, #0]
 80094fe:	1850      	adds	r0, r2, r1
 8009500:	42a0      	cmp	r0, r4
 8009502:	d10b      	bne.n	800951c <_free_r+0x6c>
 8009504:	6820      	ldr	r0, [r4, #0]
 8009506:	4401      	add	r1, r0
 8009508:	1850      	adds	r0, r2, r1
 800950a:	4283      	cmp	r3, r0
 800950c:	6011      	str	r1, [r2, #0]
 800950e:	d1e0      	bne.n	80094d2 <_free_r+0x22>
 8009510:	6818      	ldr	r0, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	6053      	str	r3, [r2, #4]
 8009516:	4408      	add	r0, r1
 8009518:	6010      	str	r0, [r2, #0]
 800951a:	e7da      	b.n	80094d2 <_free_r+0x22>
 800951c:	d902      	bls.n	8009524 <_free_r+0x74>
 800951e:	230c      	movs	r3, #12
 8009520:	602b      	str	r3, [r5, #0]
 8009522:	e7d6      	b.n	80094d2 <_free_r+0x22>
 8009524:	6820      	ldr	r0, [r4, #0]
 8009526:	1821      	adds	r1, r4, r0
 8009528:	428b      	cmp	r3, r1
 800952a:	bf04      	itt	eq
 800952c:	6819      	ldreq	r1, [r3, #0]
 800952e:	685b      	ldreq	r3, [r3, #4]
 8009530:	6063      	str	r3, [r4, #4]
 8009532:	bf04      	itt	eq
 8009534:	1809      	addeq	r1, r1, r0
 8009536:	6021      	streq	r1, [r4, #0]
 8009538:	6054      	str	r4, [r2, #4]
 800953a:	e7ca      	b.n	80094d2 <_free_r+0x22>
 800953c:	bd38      	pop	{r3, r4, r5, pc}
 800953e:	bf00      	nop
 8009540:	20000974 	.word	0x20000974

08009544 <_init>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr

08009550 <_fini>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	bf00      	nop
 8009554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009556:	bc08      	pop	{r3}
 8009558:	469e      	mov	lr, r3
 800955a:	4770      	bx	lr
