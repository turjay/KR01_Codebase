
deneme 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003764  08003764  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003764  08003764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800376c  0800376c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800376c  0800376c  0000476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003770  08003770  00004770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003774  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          0000016c  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aebb  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cfa  00000000  00000000  0000fefb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00011bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b3  00000000  00000000  00012740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ee2  00000000  00000000  00012ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2e0  00000000  00000000  00034ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d555d  00000000  00000000  000421b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117712  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002efc  00000000  00000000  00117758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011a654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003734 	.word	0x08003734

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003734 	.word	0x08003734

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <APPS_Init>:
// Önceden atanacak sensör aralıkları
static uint16_t sensor1_min = 0, sensor1_max = 4095;
static uint16_t sensor2_min = 0, sensor2_max = 4095;

void APPS_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, adcdata, ADC_CHANNEL_COUNT);
 80004bc:	2202      	movs	r2, #2
 80004be:	4904      	ldr	r1, [pc, #16]	@ (80004d0 <APPS_Init+0x18>)
 80004c0:	4804      	ldr	r0, [pc, #16]	@ (80004d4 <APPS_Init+0x1c>)
 80004c2:	f000 fcf9 	bl	8000eb8 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);
 80004c6:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <APPS_Init+0x20>)
 80004c8:	f002 fb5a 	bl	8002b80 <HAL_TIM_Base_Start>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	20000040 	.word	0x20000040
 80004d8:	20000130 	.word	0x20000130

080004dc <APPS_Loop>:

void APPS_Loop(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b089      	sub	sp, #36	@ 0x24
 80004e0:	af00      	add	r7, sp, #0
    int32_t val1 = adcdata[0];
 80004e2:	4b54      	ldr	r3, [pc, #336]	@ (8000634 <APPS_Loop+0x158>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	617b      	str	r3, [r7, #20]
    int32_t val2 = adcdata[1];
 80004e8:	4b52      	ldr	r3, [pc, #328]	@ (8000634 <APPS_Loop+0x158>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	613b      	str	r3, [r7, #16]

    float norm1 = (val1 - sensor1_min) / (float)(sensor1_max - sensor1_min);
 80004ee:	4b52      	ldr	r3, [pc, #328]	@ (8000638 <APPS_Loop+0x15c>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	ee07 3a90 	vmov	s15, r3
 80004fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000500:	4b4e      	ldr	r3, [pc, #312]	@ (800063c <APPS_Loop+0x160>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b4c      	ldr	r3, [pc, #304]	@ (8000638 <APPS_Loop+0x15c>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	ee07 3a90 	vmov	s15, r3
 8000510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000518:	edc7 7a07 	vstr	s15, [r7, #28]
    float norm2 = (val2 - sensor2_min) / (float)(sensor2_max - sensor2_min);
 800051c:	4b48      	ldr	r3, [pc, #288]	@ (8000640 <APPS_Loop+0x164>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	1a9b      	subs	r3, r3, r2
 8000526:	ee07 3a90 	vmov	s15, r3
 800052a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800052e:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <APPS_Loop+0x168>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	461a      	mov	r2, r3
 8000534:	4b42      	ldr	r3, [pc, #264]	@ (8000640 <APPS_Loop+0x164>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	ee07 3a90 	vmov	s15, r3
 800053e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000546:	edc7 7a06 	vstr	s15, [r7, #24]

    // 0.0 - 1.0 sınırla
    if (norm1 < 0.0f) norm1 = 0.0f;
 800054a:	edd7 7a07 	vldr	s15, [r7, #28]
 800054e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000556:	d502      	bpl.n	800055e <APPS_Loop+0x82>
 8000558:	f04f 0300 	mov.w	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
    if (norm1 > 1.0f) norm1 = 1.0f;
 800055e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800056e:	dd02      	ble.n	8000576 <APPS_Loop+0x9a>
 8000570:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000574:	61fb      	str	r3, [r7, #28]
    if (norm2 < 0.0f) norm2 = 0.0f;
 8000576:	edd7 7a06 	vldr	s15, [r7, #24]
 800057a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000582:	d502      	bpl.n	800058a <APPS_Loop+0xae>
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
    if (norm2 > 1.0f) norm2 = 1.0f;
 800058a:	edd7 7a06 	vldr	s15, [r7, #24]
 800058e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059a:	dd02      	ble.n	80005a2 <APPS_Loop+0xc6>
 800059c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80005a0:	61bb      	str	r3, [r7, #24]

    float diff = fabsf(norm1 - norm2);
 80005a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80005a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80005aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005ae:	eef0 7ae7 	vabs.f32	s15, s15
 80005b2:	edc7 7a03 	vstr	s15, [r7, #12]

    uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 80005b6:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <APPS_Loop+0x16c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005bc:	60bb      	str	r3, [r7, #8]

    if (diff > (TOLERANCE_PERCENT / 100.0f)) {
 80005be:	edd7 7a03 	vldr	s15, [r7, #12]
 80005c2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800064c <APPS_Loop+0x170>
 80005c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ce:	dd24      	ble.n	800061a <APPS_Loop+0x13e>
        if (!diff_flag) {
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <APPS_Loop+0x174>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f083 0301 	eor.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <APPS_Loop+0x110>
            diff_flag = true;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <APPS_Loop+0x174>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
            diff_start_time = now;
 80005e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000654 <APPS_Loop+0x178>)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	6013      	str	r3, [r2, #0]
        }
    } else {
        diff_flag = false;
        permanent_fault = false;
    }
}
 80005ea:	e01c      	b.n	8000626 <APPS_Loop+0x14a>
            uint32_t elapsed = (now >= diff_start_time) ? (now - diff_start_time) : (0xFFFFFFFF - diff_start_time + now);
 80005ec:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <APPS_Loop+0x178>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d304      	bcc.n	8000600 <APPS_Loop+0x124>
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <APPS_Loop+0x178>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	e004      	b.n	800060a <APPS_Loop+0x12e>
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <APPS_Loop+0x178>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	3b01      	subs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
            if (elapsed >= DIFF_TIME_MS) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b63      	cmp	r3, #99	@ 0x63
 8000610:	d909      	bls.n	8000626 <APPS_Loop+0x14a>
                permanent_fault = true;
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <APPS_Loop+0x17c>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
}
 8000618:	e005      	b.n	8000626 <APPS_Loop+0x14a>
        diff_flag = false;
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <APPS_Loop+0x174>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
        permanent_fault = false;
 8000620:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <APPS_Loop+0x17c>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	3724      	adds	r7, #36	@ 0x24
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000002c 	.word	0x2000002c
 8000638:	2000003c 	.word	0x2000003c
 800063c:	20000000 	.word	0x20000000
 8000640:	2000003e 	.word	0x2000003e
 8000644:	20000002 	.word	0x20000002
 8000648:	20000130 	.word	0x20000130
 800064c:	3dcccccd 	.word	0x3dcccccd
 8000650:	20000034 	.word	0x20000034
 8000654:	20000038 	.word	0x20000038
 8000658:	20000035 	.word	0x20000035

0800065c <APPS_IsPermanentFault>:

bool APPS_IsPermanentFault(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
    return permanent_fault;
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <APPS_IsPermanentFault+0x14>)
 8000662:	781b      	ldrb	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000035 	.word	0x20000035

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fb68 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f812 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000680:	f000 f982 	bl	8000988 <MX_DMA_Init>
  MX_GPIO_Init();
 8000684:	f000 f9a0 	bl	80009c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000688:	f000 f876 	bl	8000778 <MX_ADC1_Init>
  MX_TIM3_Init();
 800068c:	f000 f8d4 	bl	8000838 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000690:	f000 f92c 	bl	80008ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  APPS_Init();
 8000694:	f7ff ff10 	bl	80004b8 <APPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  APPS_Loop();
 8000698:	f7ff ff20 	bl	80004dc <APPS_Loop>

	      if (APPS_IsPermanentFault()) {
 800069c:	f7ff ffde 	bl	800065c <APPS_IsPermanentFault>
	  APPS_Loop();
 80006a0:	e7fa      	b.n	8000698 <main+0x24>
	...

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	@ 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 f812 	bl	80036dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	@ 0xa8
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fdb5 	bl	8002298 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 f970 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2105      	movs	r1, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f002 f816 	bl	8002788 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 f959 	bl	8000a18 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800078a:	4b28      	ldr	r3, [pc, #160]	@ (800082c <MX_ADC1_Init+0xb4>)
 800078c:	4a28      	ldr	r2, [pc, #160]	@ (8000830 <MX_ADC1_Init+0xb8>)
 800078e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_ADC1_Init+0xb4>)
 8000792:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000798:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_ADC1_Init+0xb4>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <MX_ADC1_Init+0xbc>)
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007be:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007c4:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007d2:	4b16      	ldr	r3, [pc, #88]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d8:	4814      	ldr	r0, [pc, #80]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007da:	f000 fb29 	bl	8000e30 <HAL_ADC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007e4:	f000 f918 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80007f0:	2303      	movs	r3, #3
 80007f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <MX_ADC1_Init+0xb4>)
 80007fa:	f000 fc8f 	bl	800111c <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000804:	f000 f908 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_ADC1_Init+0xb4>)
 8000816:	f000 fc81 	bl	800111c <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000820:	f000 f8fa 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000040 	.word	0x20000040
 8000830:	40012000 	.word	0x40012000
 8000834:	0f000001 	.word	0x0f000001

08000838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085a:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <MX_TIM3_Init+0xac>)
 800085c:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <MX_TIM3_Init+0xb0>)
 800085e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_TIM3_Init+0xac>)
 8000862:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_TIM3_Init+0xac>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800086e:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_TIM3_Init+0xac>)
 8000870:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_TIM3_Init+0xac>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_TIM3_Init+0xac>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000882:	4818      	ldr	r0, [pc, #96]	@ (80008e4 <MX_TIM3_Init+0xac>)
 8000884:	f002 f9e4 	bl	8002c50 <HAL_TIM_PWM_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800088e:	f000 f8c3 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4619      	mov	r1, r3
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <MX_TIM3_Init+0xac>)
 80008a2:	f002 fe9f 	bl	80035e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008ac:	f000 f8b4 	bl	8000a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b0:	2360      	movs	r3, #96	@ 0x60
 80008b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	4619      	mov	r1, r3
 80008c6:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_TIM3_Init+0xac>)
 80008c8:	f002 fa12 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008d2:	f000 f8a1 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008d6:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <MX_TIM3_Init+0xac>)
 80008d8:	f000 f988 	bl	8000bec <HAL_TIM_MspPostInit>

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000e8 	.word	0x200000e8
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_TIM4_Init+0x94>)
 800090a:	4a1e      	ldr	r2, [pc, #120]	@ (8000984 <MX_TIM4_Init+0x98>)
 800090c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <MX_TIM4_Init+0x94>)
 8000910:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000914:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_TIM4_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_TIM4_Init+0x94>)
 800091e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000922:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_TIM4_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_TIM4_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000930:	4813      	ldr	r0, [pc, #76]	@ (8000980 <MX_TIM4_Init+0x94>)
 8000932:	f002 f8d5 	bl	8002ae0 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800093c:	f000 f86c 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_TIM4_Init+0x94>)
 800094e:	f002 fa91 	bl	8002e74 <HAL_TIM_ConfigClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000958:	f000 f85e 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_TIM4_Init+0x94>)
 800096a:	f002 fe3b 	bl	80035e4 <HAL_TIMEx_MasterConfigSynchronization>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000974:	f000 f850 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000130 	.word	0x20000130
 8000984:	40000800 	.word	0x40000800

08000988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_DMA_Init+0x3c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <MX_DMA_Init+0x3c>)
 8000998:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	203c      	movs	r0, #60	@ 0x3c
 80009b0:	f000 ff2f 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80009b4:	203c      	movs	r0, #60	@ 0x3c
 80009b6:	f000 ff48 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_GPIO_Init+0x4c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <MX_GPIO_Init+0x4c>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <MX_GPIO_Init+0x4c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_GPIO_Init+0x4c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <MX_GPIO_Init+0x4c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_GPIO_Init+0x4c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <Error_Handler+0x8>

08000a24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2f      	ldr	r2, [pc, #188]	@ (8000b50 <HAL_ADC_MspInit+0xdc>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d158      	bne.n	8000b48 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <HAL_ADC_MspInit+0xe0>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b54 <HAL_ADC_MspInit+0xe0>)
 8000aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <HAL_ADC_MspInit+0xe0>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <HAL_ADC_MspInit+0xe0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a26      	ldr	r2, [pc, #152]	@ (8000b54 <HAL_ADC_MspInit+0xe0>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <HAL_ADC_MspInit+0xe0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481d      	ldr	r0, [pc, #116]	@ (8000b58 <HAL_ADC_MspInit+0xe4>)
 8000ae2:	f001 fa3d 	bl	8001f60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <HAL_ADC_MspInit+0xec>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b2e:	f000 fea7 	bl	8001880 <HAL_DMA_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000b38:	f7ff ff6e 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b40:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b42:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40012000 	.word	0x40012000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	20000088 	.word	0x20000088
 8000b60:	40026470 	.word	0x40026470

08000b64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10d      	bne.n	8000b92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_TIM_PWM_MspInit+0x40>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <HAL_TIM_PWM_MspInit+0x40>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <HAL_TIM_PWM_MspInit+0x40>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40000400 	.word	0x40000400
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000be4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10d      	bne.n	8000bd6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_TIM_Base_MspInit+0x40>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a09      	ldr	r2, [pc, #36]	@ (8000be8 <HAL_TIM_Base_MspInit+0x40>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <HAL_TIM_Base_MspInit+0x40>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40000800 	.word	0x40000800
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <HAL_TIM_MspPostInit+0x68>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d11d      	bne.n	8000c4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c2a:	2340      	movs	r3, #64	@ 0x40
 8000c2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <HAL_TIM_MspPostInit+0x70>)
 8000c46:	f001 f98b 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb6:	f000 f89b 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <DMA2_Stream4_IRQHandler+0x10>)
 8000cc6:	f000 fee1 	bl	8001a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000088 	.word	0x20000088

08000cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cfc:	f7ff ffea 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	@ (8000d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f002 fce1 	bl	80036ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2a:	f7ff fca3 	bl	8000674 <main>
  bx  lr    
 8000d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d3c:	08003774 	.word	0x08003774
  ldr r2, =_sbss
 8000d40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d44:	2000017c 	.word	0x2000017c

08000d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <HAL_Init+0x40>)
 8000d56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <HAL_Init+0x40>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <HAL_Init+0x40>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 fd41 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fe50 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023c00 	.word	0x40023c00

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 fd59 	bl	8001866 <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 fd21 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000004 	.word	0x20000004
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000178 	.word	0x20000178

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000178 	.word	0x20000178

08000e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e033      	b.n	8000eae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d109      	bne.n	8000e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fe10 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d118      	bne.n	8000ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e76:	f023 0302 	bic.w	r3, r3, #2
 8000e7a:	f043 0202 	orr.w	r2, r3, #2
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 fa6c 	bl	8001360 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e9e:	e001      	b.n	8000ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Start_DMA+0x22>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e0eb      	b.n	80010b2 <HAL_ADC_Start_DMA+0x1fa>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d018      	beq.n	8000f22 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f00:	4b6e      	ldr	r3, [pc, #440]	@ (80010bc <HAL_ADC_Start_DMA+0x204>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a6e      	ldr	r2, [pc, #440]	@ (80010c0 <HAL_ADC_Start_DMA+0x208>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	0c9a      	lsrs	r2, r3, #18
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000f14:	e002      	b.n	8000f1c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f9      	bne.n	8000f16 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f30:	d107      	bne.n	8000f42 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f40:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 80a3 	bne.w	8001098 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d007      	beq.n	8000f84 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f90:	d106      	bne.n	8000fa0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f023 0206 	bic.w	r2, r3, #6
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f9e:	e002      	b.n	8000fa6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fae:	4b45      	ldr	r3, [pc, #276]	@ (80010c4 <HAL_ADC_Start_DMA+0x20c>)
 8000fb0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fb6:	4a44      	ldr	r2, [pc, #272]	@ (80010c8 <HAL_ADC_Start_DMA+0x210>)
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fbe:	4a43      	ldr	r2, [pc, #268]	@ (80010cc <HAL_ADC_Start_DMA+0x214>)
 8000fc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc6:	4a42      	ldr	r2, [pc, #264]	@ (80010d0 <HAL_ADC_Start_DMA+0x218>)
 8000fc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000fe2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ff2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	334c      	adds	r3, #76	@ 0x4c
 8000ffe:	4619      	mov	r1, r3
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f000 fcea 	bl	80019dc <HAL_DMA_Start_IT>
 8001008:	4603      	mov	r3, r0
 800100a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	2b00      	cmp	r3, #0
 8001016:	d12a      	bne.n	800106e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2d      	ldr	r2, [pc, #180]	@ (80010d4 <HAL_ADC_Start_DMA+0x21c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d015      	beq.n	800104e <HAL_ADC_Start_DMA+0x196>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a2c      	ldr	r2, [pc, #176]	@ (80010d8 <HAL_ADC_Start_DMA+0x220>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d105      	bne.n	8001038 <HAL_ADC_Start_DMA+0x180>
 800102c:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <HAL_ADC_Start_DMA+0x20c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00a      	beq.n	800104e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <HAL_ADC_Start_DMA+0x224>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d136      	bne.n	80010b0 <HAL_ADC_Start_DMA+0x1f8>
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_ADC_Start_DMA+0x20c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d130      	bne.n	80010b0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d129      	bne.n	80010b0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	e020      	b.n	80010b0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <HAL_ADC_Start_DMA+0x21c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d11b      	bne.n	80010b0 <HAL_ADC_Start_DMA+0x1f8>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d114      	bne.n	80010b0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	e00b      	b.n	80010b0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f043 0210 	orr.w	r2, r3, #16
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a8:	f043 0201 	orr.w	r2, r3, #1
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000004 	.word	0x20000004
 80010c0:	431bde83 	.word	0x431bde83
 80010c4:	40012300 	.word	0x40012300
 80010c8:	08001559 	.word	0x08001559
 80010cc:	08001613 	.word	0x08001613
 80010d0:	0800162f 	.word	0x0800162f
 80010d4:	40012000 	.word	0x40012000
 80010d8:	40012100 	.word	0x40012100
 80010dc:	40012200 	.word	0x40012200

080010e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x1c>
 8001134:	2302      	movs	r3, #2
 8001136:	e105      	b.n	8001344 <HAL_ADC_ConfigChannel+0x228>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b09      	cmp	r3, #9
 8001146:	d925      	bls.n	8001194 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68d9      	ldr	r1, [r3, #12]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	3b1e      	subs	r3, #30
 800115e:	2207      	movs	r2, #7
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43da      	mvns	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	400a      	ands	r2, r1
 800116c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68d9      	ldr	r1, [r3, #12]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	4603      	mov	r3, r0
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4403      	add	r3, r0
 8001186:	3b1e      	subs	r3, #30
 8001188:	409a      	lsls	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	e022      	b.n	80011da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6919      	ldr	r1, [r3, #16]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	2207      	movs	r2, #7
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	400a      	ands	r2, r1
 80011b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6919      	ldr	r1, [r3, #16]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4403      	add	r3, r0
 80011d0:	409a      	lsls	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d824      	bhi.n	800122c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	3b05      	subs	r3, #5
 80011f4:	221f      	movs	r2, #31
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	400a      	ands	r2, r1
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b05      	subs	r3, #5
 800121e:	fa00 f203 	lsl.w	r2, r0, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
 800122a:	e04c      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b0c      	cmp	r3, #12
 8001232:	d824      	bhi.n	800127e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b23      	subs	r3, #35	@ 0x23
 8001246:	221f      	movs	r2, #31
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43da      	mvns	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	400a      	ands	r2, r1
 8001254:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b23      	subs	r3, #35	@ 0x23
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	631a      	str	r2, [r3, #48]	@ 0x30
 800127c:	e023      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b41      	subs	r3, #65	@ 0x41
 8001290:	221f      	movs	r2, #31
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	400a      	ands	r2, r1
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b41      	subs	r3, #65	@ 0x41
 80012ba:	fa00 f203 	lsl.w	r2, r0, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <HAL_ADC_ConfigChannel+0x234>)
 80012c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <HAL_ADC_ConfigChannel+0x238>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d109      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1cc>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b12      	cmp	r3, #18
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <HAL_ADC_ConfigChannel+0x238>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d123      	bne.n	800133a <HAL_ADC_ConfigChannel+0x21e>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d003      	beq.n	8001302 <HAL_ADC_ConfigChannel+0x1e6>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b11      	cmp	r3, #17
 8001300:	d11b      	bne.n	800133a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d111      	bne.n	800133a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <HAL_ADC_ConfigChannel+0x23c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a10      	ldr	r2, [pc, #64]	@ (800135c <HAL_ADC_ConfigChannel+0x240>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9a      	lsrs	r2, r3, #18
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800132c:	e002      	b.n	8001334 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3b01      	subs	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f9      	bne.n	800132e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40012300 	.word	0x40012300
 8001354:	40012000 	.word	0x40012000
 8001358:	20000004 	.word	0x20000004
 800135c:	431bde83 	.word	0x431bde83

08001360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001368:	4b79      	ldr	r3, [pc, #484]	@ (8001550 <ADC_Init+0x1f0>)
 800136a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	431a      	orrs	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	021a      	lsls	r2, r3, #8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6899      	ldr	r1, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f2:	4a58      	ldr	r2, [pc, #352]	@ (8001554 <ADC_Init+0x1f4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d022      	beq.n	800143e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6899      	ldr	r1, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6899      	ldr	r1, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	e00f      	b.n	800145e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800144c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800145c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0202 	bic.w	r2, r2, #2
 800146c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7e1b      	ldrb	r3, [r3, #24]
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01b      	beq.n	80014c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800149a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6859      	ldr	r1, [r3, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	3b01      	subs	r3, #1
 80014b8:	035a      	lsls	r2, r3, #13
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	e007      	b.n	80014d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	051a      	lsls	r2, r3, #20
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6899      	ldr	r1, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001516:	025a      	lsls	r2, r3, #9
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800152e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	029a      	lsls	r2, r3, #10
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	609a      	str	r2, [r3, #8]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40012300 	.word	0x40012300
 8001554:	0f000001 	.word	0x0f000001

08001558 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001564:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800156e:	2b00      	cmp	r3, #0
 8001570:	d13c      	bne.n	80015ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d12b      	bne.n	80015e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001590:	2b00      	cmp	r3, #0
 8001592:	d127      	bne.n	80015e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d119      	bne.n	80015e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0220 	bic.w	r2, r2, #32
 80015be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d105      	bne.n	80015e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fd7b 	bl	80010e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015ea:	e00e      	b.n	800160a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fd85 	bl	8001108 <HAL_ADC_ErrorCallback>
}
 80015fe:	e004      	b.n	800160a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7ff fd67 	bl	80010f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800163a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f043 0204 	orr.w	r2, r3, #4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fd5a 	bl	8001108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	@ (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	@ (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	@ (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff29 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff3e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff8e 	bl	8001750 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff31 	bl	80016c0 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff fac4 	bl	8000e18 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e099      	b.n	80019d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018bc:	e00f      	b.n	80018de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018be:	f7ff faab 	bl	8000e18 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d908      	bls.n	80018de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e078      	b.n	80019d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e8      	bne.n	80018be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	4b38      	ldr	r3, [pc, #224]	@ (80019d8 <HAL_DMA_Init+0x158>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	2b04      	cmp	r3, #4
 8001936:	d107      	bne.n	8001948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4313      	orrs	r3, r2
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f023 0307 	bic.w	r3, r3, #7
 800195e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	2b04      	cmp	r3, #4
 8001970:	d117      	bne.n	80019a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00e      	beq.n	80019a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fa6f 	bl	8001e68 <DMA_CheckFifoParam>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2240      	movs	r2, #64	@ 0x40
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800199e:	2301      	movs	r3, #1
 80019a0:	e016      	b.n	80019d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fa26 	bl	8001dfc <DMA_CalcBaseAndBitshift>
 80019b0:	4603      	mov	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b8:	223f      	movs	r2, #63	@ 0x3f
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	f010803f 	.word	0xf010803f

080019dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Start_IT+0x26>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e040      	b.n	8001a84 <HAL_DMA_Start_IT+0xa8>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d12f      	bne.n	8001a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f9b8 	bl	8001da0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a34:	223f      	movs	r2, #63	@ 0x3f
 8001a36:	409a      	lsls	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0216 	orr.w	r2, r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0208 	orr.w	r2, r2, #8
 8001a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e005      	b.n	8001a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a98:	4b8e      	ldr	r3, [pc, #568]	@ (8001cd4 <HAL_DMA_IRQHandler+0x248>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a8e      	ldr	r2, [pc, #568]	@ (8001cd8 <HAL_DMA_IRQHandler+0x24c>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01a      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0204 	bic.w	r2, r2, #4
 8001ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	2201      	movs	r2, #1
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d012      	beq.n	8001b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b26:	f043 0202 	orr.w	r2, r3, #2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b32:	2204      	movs	r2, #4
 8001b34:	409a      	lsls	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d012      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b50:	2204      	movs	r2, #4
 8001b52:	409a      	lsls	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5c:	f043 0204 	orr.w	r2, r3, #4
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	2210      	movs	r2, #16
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d043      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03c      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b86:	2210      	movs	r2, #16
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d018      	beq.n	8001bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d024      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
 8001bba:	e01f      	b.n	8001bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
 8001bcc:	e016      	b.n	8001bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0208 	bic.w	r2, r2, #8
 8001bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c00:	2220      	movs	r2, #32
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 808f 	beq.w	8001d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8087 	beq.w	8001d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c22:	2220      	movs	r2, #32
 8001c24:	409a      	lsls	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d136      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0216 	bic.w	r2, r2, #22
 8001c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x1da>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0208 	bic.w	r2, r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7a:	223f      	movs	r2, #63	@ 0x3f
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d07e      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
        }
        return;
 8001ca2:	e079      	b.n	8001d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01d      	beq.n	8001cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10d      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d031      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e02c      	b.n	8001d2c <HAL_DMA_IRQHandler+0x2a0>
 8001cd2:	bf00      	nop
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	4798      	blx	r3
 8001cec:	e01e      	b.n	8001d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10f      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0210 	bic.w	r2, r2, #16
 8001d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d032      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d022      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2205      	movs	r2, #5
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d307      	bcc.n	8001d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f2      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x2cc>
 8001d72:	e000      	b.n	8001d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
 8001d96:	e000      	b.n	8001d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d98:	bf00      	nop
    }
  }
}
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b40      	cmp	r3, #64	@ 0x40
 8001dcc:	d108      	bne.n	8001de0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dde:	e007      	b.n	8001df0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3b10      	subs	r3, #16
 8001e0c:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <DMA_CalcBaseAndBitshift+0x64>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e16:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <DMA_CalcBaseAndBitshift+0x68>)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d909      	bls.n	8001e3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	1d1a      	adds	r2, r3, #4
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e3c:	e007      	b.n	8001e4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	aaaaaaab 	.word	0xaaaaaaab
 8001e64:	0800375c 	.word	0x0800375c

08001e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11f      	bne.n	8001ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d856      	bhi.n	8001f36 <DMA_CheckFifoParam+0xce>
 8001e88:	a201      	add	r2, pc, #4	@ (adr r2, 8001e90 <DMA_CheckFifoParam+0x28>)
 8001e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8e:	bf00      	nop
 8001e90:	08001ea1 	.word	0x08001ea1
 8001e94:	08001eb3 	.word	0x08001eb3
 8001e98:	08001ea1 	.word	0x08001ea1
 8001e9c:	08001f37 	.word	0x08001f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d046      	beq.n	8001f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb0:	e043      	b.n	8001f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eba:	d140      	bne.n	8001f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec0:	e03d      	b.n	8001f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eca:	d121      	bne.n	8001f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d837      	bhi.n	8001f42 <DMA_CheckFifoParam+0xda>
 8001ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed8 <DMA_CheckFifoParam+0x70>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001eef 	.word	0x08001eef
 8001ee0:	08001ee9 	.word	0x08001ee9
 8001ee4:	08001f01 	.word	0x08001f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      break;
 8001eec:	e030      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d025      	beq.n	8001f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efe:	e022      	b.n	8001f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f08:	d11f      	bne.n	8001f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f0e:	e01c      	b.n	8001f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d903      	bls.n	8001f1e <DMA_CheckFifoParam+0xb6>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f1c:	e018      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
      break;
 8001f22:	e015      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00e      	beq.n	8001f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
      break;
 8001f34:	e00b      	b.n	8001f4e <DMA_CheckFifoParam+0xe6>
      break;
 8001f36:	bf00      	nop
 8001f38:	e00a      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e008      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e006      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f42:	bf00      	nop
 8001f44:	e004      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
 8001f48:	e002      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f4a:	bf00      	nop
 8001f4c:	e000      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e16b      	b.n	8002254 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 815a 	bne.w	800224e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d005      	beq.n	8001fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d130      	bne.n	8002014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b03      	cmp	r3, #3
 800201e:	d017      	beq.n	8002050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80b4 	beq.w	800224e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b60      	ldr	r3, [pc, #384]	@ (800226c <HAL_GPIO_Init+0x30c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	4a5f      	ldr	r2, [pc, #380]	@ (800226c <HAL_GPIO_Init+0x30c>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f6:	4b5d      	ldr	r3, [pc, #372]	@ (800226c <HAL_GPIO_Init+0x30c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002102:	4a5b      	ldr	r2, [pc, #364]	@ (8002270 <HAL_GPIO_Init+0x310>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a52      	ldr	r2, [pc, #328]	@ (8002274 <HAL_GPIO_Init+0x314>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d02b      	beq.n	8002186 <HAL_GPIO_Init+0x226>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a51      	ldr	r2, [pc, #324]	@ (8002278 <HAL_GPIO_Init+0x318>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d025      	beq.n	8002182 <HAL_GPIO_Init+0x222>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a50      	ldr	r2, [pc, #320]	@ (800227c <HAL_GPIO_Init+0x31c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01f      	beq.n	800217e <HAL_GPIO_Init+0x21e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4f      	ldr	r2, [pc, #316]	@ (8002280 <HAL_GPIO_Init+0x320>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d019      	beq.n	800217a <HAL_GPIO_Init+0x21a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4e      	ldr	r2, [pc, #312]	@ (8002284 <HAL_GPIO_Init+0x324>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0x216>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4d      	ldr	r2, [pc, #308]	@ (8002288 <HAL_GPIO_Init+0x328>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00d      	beq.n	8002172 <HAL_GPIO_Init+0x212>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4c      	ldr	r2, [pc, #304]	@ (800228c <HAL_GPIO_Init+0x32c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x20e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4b      	ldr	r2, [pc, #300]	@ (8002290 <HAL_GPIO_Init+0x330>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_GPIO_Init+0x20a>
 8002166:	2307      	movs	r3, #7
 8002168:	e00e      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800216a:	2308      	movs	r3, #8
 800216c:	e00c      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800216e:	2306      	movs	r3, #6
 8002170:	e00a      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002172:	2305      	movs	r3, #5
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002176:	2304      	movs	r3, #4
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	@ (8002270 <HAL_GPIO_Init+0x310>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ca:	4a32      	ldr	r2, [pc, #200]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d0:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f4:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221e:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <HAL_GPIO_Init+0x334>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_GPIO_Init+0x334>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002248:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <HAL_GPIO_Init+0x334>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f ae90 	bls.w	8001f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40021400 	.word	0x40021400
 800228c:	40021800 	.word	0x40021800
 8002290:	40021c00 	.word	0x40021c00
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e267      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d075      	beq.n	80023a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022b6:	4b88      	ldr	r3, [pc, #544]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d112      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b82      	ldr	r3, [pc, #520]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b7e      	ldr	r3, [pc, #504]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e242      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x74>
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b70      	ldr	r3, [pc, #448]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6f      	ldr	r2, [pc, #444]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6d      	ldr	r3, [pc, #436]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6c      	ldr	r2, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 8002330:	4b69      	ldr	r3, [pc, #420]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a68      	ldr	r2, [pc, #416]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fd62 	bl	8000e18 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fd5e 	bl	8000e18 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	@ 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e207      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b5b      	ldr	r3, [pc, #364]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xc0>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fd4e 	bl	8000e18 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd4a 	bl	8000e18 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1f3      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b51      	ldr	r3, [pc, #324]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023ae:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ba:	4b47      	ldr	r3, [pc, #284]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b44      	ldr	r3, [pc, #272]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1c7      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b3b      	ldr	r3, [pc, #236]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4937      	ldr	r1, [pc, #220]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_RCC_OscConfig+0x244>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fd03 	bl	8000e18 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe fcff 	bl	8000e18 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1a8      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b28      	ldr	r3, [pc, #160]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4925      	ldr	r1, [pc, #148]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_OscConfig+0x244>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fce2 	bl	8000e18 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe fcde 	bl	8000e18 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e187      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d036      	beq.n	80024f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_RCC_OscConfig+0x248>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7fe fcc2 	bl	8000e18 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe fcbe 	bl	8000e18 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e167      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80024ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x200>
 80024b6:	e01b      	b.n	80024f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_RCC_OscConfig+0x248>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe fcab 	bl	8000e18 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	e00e      	b.n	80024e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fca7 	bl	8000e18 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d907      	bls.n	80024e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e150      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470000 	.word	0x42470000
 80024e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ea      	bne.n	80024c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8097 	beq.w	800262c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b81      	ldr	r3, [pc, #516]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b7d      	ldr	r3, [pc, #500]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a7c      	ldr	r2, [pc, #496]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b7a      	ldr	r3, [pc, #488]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b77      	ldr	r3, [pc, #476]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b74      	ldr	r3, [pc, #464]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a73      	ldr	r2, [pc, #460]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7fe fc67 	bl	8000e18 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7fe fc63 	bl	8000e18 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e10c      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x2ea>
 8002574:	4b64      	ldr	r3, [pc, #400]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	4a63      	ldr	r2, [pc, #396]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002580:	e01c      	b.n	80025bc <HAL_RCC_OscConfig+0x324>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x30c>
 800258a:	4b5f      	ldr	r3, [pc, #380]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	4a5e      	ldr	r2, [pc, #376]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	6713      	str	r3, [r2, #112]	@ 0x70
 8002596:	4b5c      	ldr	r3, [pc, #368]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259a:	4a5b      	ldr	r2, [pc, #364]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0x324>
 80025a4:	4b58      	ldr	r3, [pc, #352]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a57      	ldr	r2, [pc, #348]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	4b55      	ldr	r3, [pc, #340]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a54      	ldr	r2, [pc, #336]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f023 0304 	bic.w	r3, r3, #4
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe fc28 	bl	8000e18 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe fc24 	bl	8000e18 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0cb      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ee      	beq.n	80025cc <HAL_RCC_OscConfig+0x334>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7fe fc12 	bl	8000e18 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe fc0e 	bl	8000e18 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0b5      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260e:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ee      	bne.n	80025f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002620:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	4a38      	ldr	r2, [pc, #224]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800262a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a1 	beq.w	8002778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002636:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d05c      	beq.n	80026fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d141      	bne.n	80026ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fbe2 	bl	8000e18 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fbde 	bl	8000e18 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e087      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	491b      	ldr	r1, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fbb7 	bl	8000e18 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fbb3 	bl	8000e18 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e05c      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x416>
 80026cc:	e054      	b.n	8002778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fba0 	bl	8000e18 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fb9c 	bl	8000e18 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e045      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x444>
 80026fa:	e03d      	b.n	8002778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e038      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	40007000 	.word	0x40007000
 8002710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002714:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_RCC_OscConfig+0x4ec>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d028      	beq.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d121      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d11a      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800274a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800274c:	4293      	cmp	r3, r2
 800274e:	d111      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0cc      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b68      	ldr	r3, [pc, #416]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d90c      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d044      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d119      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d003      	beq.n	8002846 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	2b03      	cmp	r3, #3
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e067      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4934      	ldr	r1, [pc, #208]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7fe face 	bl	8000e18 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe faca 	bl	8000e18 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e04f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d20c      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f821 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fa2e 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	40023800 	.word	0x40023800
 8002948:	0800374c 	.word	0x0800374c
 800294c:	20000004 	.word	0x20000004
 8002950:	20000008 	.word	0x20000008

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b090      	sub	sp, #64	@ 0x40
 800295a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296c:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d00d      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x40>
 8002978:	2b08      	cmp	r3, #8
 800297a:	f200 80a1 	bhi.w	8002ac0 <HAL_RCC_GetSysClockFreq+0x16c>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 8002982:	2b04      	cmp	r3, #4
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x3a>
 8002986:	e09b      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 800298a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800298c:	e09b      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298e:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x188>)
 8002990:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002992:	e098      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800299e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	099b      	lsrs	r3, r3, #6
 80029b0:	2200      	movs	r2, #0
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029bc:	2100      	movs	r1, #0
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x188>)
 80029c0:	fb03 f201 	mul.w	r2, r3, r1
 80029c4:	2300      	movs	r3, #0
 80029c6:	fb00 f303 	mul.w	r3, r0, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	4a43      	ldr	r2, [pc, #268]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x188>)
 80029ce:	fba0 1202 	umull	r1, r2, r0, r2
 80029d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029d4:	460a      	mov	r2, r1
 80029d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029da:	4413      	add	r3, r2
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e0:	2200      	movs	r2, #0
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	61fa      	str	r2, [r7, #28]
 80029e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029ee:	f7fd fbeb 	bl	80001c8 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4613      	mov	r3, r2
 80029f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029fa:	e053      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	2200      	movs	r2, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	617a      	str	r2, [r7, #20]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a0e:	f04f 0b00 	mov.w	fp, #0
 8002a12:	4652      	mov	r2, sl
 8002a14:	465b      	mov	r3, fp
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	0159      	lsls	r1, r3, #5
 8002a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a24:	0150      	lsls	r0, r2, #5
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a46:	ebb2 0408 	subs.w	r4, r2, r8
 8002a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	00eb      	lsls	r3, r5, #3
 8002a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5c:	00e2      	lsls	r2, r4, #3
 8002a5e:	4614      	mov	r4, r2
 8002a60:	461d      	mov	r5, r3
 8002a62:	eb14 030a 	adds.w	r3, r4, sl
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	eb45 030b 	adc.w	r3, r5, fp
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	028b      	lsls	r3, r1, #10
 8002a7e:	4621      	mov	r1, r4
 8002a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a84:	4621      	mov	r1, r4
 8002a86:	028a      	lsls	r2, r1, #10
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	60fa      	str	r2, [r7, #12]
 8002a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a98:	f7fd fb96 	bl	80001c8 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002abe:	e002      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3740      	adds	r7, #64	@ 0x40
 8002acc:	46bd      	mov	sp, r7
 8002ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	00f42400 	.word	0x00f42400
 8002adc:	017d7840 	.word	0x017d7840

08002ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e041      	b.n	8002b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe f84e 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f000 fa70 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d001      	beq.n	8002b98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e046      	b.n	8002c26 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a23      	ldr	r2, [pc, #140]	@ (8002c34 <HAL_TIM_Base_Start+0xb4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d022      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x70>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb2:	d01d      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x70>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_TIM_Base_Start+0xb8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d018      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x70>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <HAL_TIM_Base_Start+0xbc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x70>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_TIM_Base_Start+0xc0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x70>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <HAL_TIM_Base_Start+0xc4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x70>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a19      	ldr	r2, [pc, #100]	@ (8002c48 <HAL_TIM_Base_Start+0xc8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x70>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_TIM_Base_Start+0xcc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d111      	bne.n	8002c14 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d010      	beq.n	8002c24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	e007      	b.n	8002c24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40010000 	.word	0x40010000
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40000800 	.word	0x40000800
 8002c40:	40000c00 	.word	0x40000c00
 8002c44:	40010400 	.word	0x40010400
 8002c48:	40014000 	.word	0x40014000
 8002c4c:	40001800 	.word	0x40001800

08002c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e041      	b.n	8002ce6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd ff74 	bl	8000b64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f000 f9b8 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e0ae      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0c      	cmp	r3, #12
 8002d1a:	f200 809f 	bhi.w	8002e5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d59 	.word	0x08002d59
 8002d28:	08002e5d 	.word	0x08002e5d
 8002d2c:	08002e5d 	.word	0x08002e5d
 8002d30:	08002e5d 	.word	0x08002e5d
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002e5d 	.word	0x08002e5d
 8002d3c:	08002e5d 	.word	0x08002e5d
 8002d40:	08002e5d 	.word	0x08002e5d
 8002d44:	08002ddb 	.word	0x08002ddb
 8002d48:	08002e5d 	.word	0x08002e5d
 8002d4c:	08002e5d 	.word	0x08002e5d
 8002d50:	08002e5d 	.word	0x08002e5d
 8002d54:	08002e1b 	.word	0x08002e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f9f6 	bl	8003150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0208 	orr.w	r2, r2, #8
 8002d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6999      	ldr	r1, [r3, #24]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	619a      	str	r2, [r3, #24]
      break;
 8002d96:	e064      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fa46 	bl	8003230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6999      	ldr	r1, [r3, #24]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      break;
 8002dd8:	e043      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fa9b 	bl	800331c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0208 	orr.w	r2, r2, #8
 8002df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0204 	bic.w	r2, r2, #4
 8002e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
      break;
 8002e18:	e023      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 faef 	bl	8003404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	61da      	str	r2, [r3, #28]
      break;
 8002e5a:	e002      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_ConfigClockSource+0x1c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0b4      	b.n	8002ffa <HAL_TIM_ConfigClockSource+0x186>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec8:	d03e      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0xd4>
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ece:	f200 8087 	bhi.w	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed6:	f000 8086 	beq.w	8002fe6 <HAL_TIM_ConfigClockSource+0x172>
 8002eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ede:	d87f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b70      	cmp	r3, #112	@ 0x70
 8002ee2:	d01a      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xa6>
 8002ee4:	2b70      	cmp	r3, #112	@ 0x70
 8002ee6:	d87b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b60      	cmp	r3, #96	@ 0x60
 8002eea:	d050      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x11a>
 8002eec:	2b60      	cmp	r3, #96	@ 0x60
 8002eee:	d877      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b50      	cmp	r3, #80	@ 0x50
 8002ef2:	d03c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xfa>
 8002ef4:	2b50      	cmp	r3, #80	@ 0x50
 8002ef6:	d873      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b40      	cmp	r3, #64	@ 0x40
 8002efa:	d058      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x13a>
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d86f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b30      	cmp	r3, #48	@ 0x30
 8002f02:	d064      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b30      	cmp	r3, #48	@ 0x30
 8002f06:	d86b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d060      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d867      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d05a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f18:	e062      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f2a:	f000 fb3b 	bl	80035a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	609a      	str	r2, [r3, #8]
      break;
 8002f46:	e04f      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f58:	f000 fb24 	bl	80035a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f6a:	609a      	str	r2, [r3, #8]
      break;
 8002f6c:	e03c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f000 fa98 	bl	80034b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2150      	movs	r1, #80	@ 0x50
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 faf1 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e02c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 fab7 	bl	800350e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2160      	movs	r1, #96	@ 0x60
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fae1 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002fac:	e01c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 fa78 	bl	80034b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2140      	movs	r1, #64	@ 0x40
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fad1 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e00c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 fac8 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002fde:	e003      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a43      	ldr	r2, [pc, #268]	@ (8003124 <TIM_Base_SetConfig+0x120>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d013      	beq.n	8003044 <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003022:	d00f      	beq.n	8003044 <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a40      	ldr	r2, [pc, #256]	@ (8003128 <TIM_Base_SetConfig+0x124>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00b      	beq.n	8003044 <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3f      	ldr	r2, [pc, #252]	@ (800312c <TIM_Base_SetConfig+0x128>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d007      	beq.n	8003044 <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3e      	ldr	r2, [pc, #248]	@ (8003130 <TIM_Base_SetConfig+0x12c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d003      	beq.n	8003044 <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3d      	ldr	r2, [pc, #244]	@ (8003134 <TIM_Base_SetConfig+0x130>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d108      	bne.n	8003056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800304a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <TIM_Base_SetConfig+0x120>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d02b      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003064:	d027      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2f      	ldr	r2, [pc, #188]	@ (8003128 <TIM_Base_SetConfig+0x124>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d023      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2e      	ldr	r2, [pc, #184]	@ (800312c <TIM_Base_SetConfig+0x128>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01f      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a2d      	ldr	r2, [pc, #180]	@ (8003130 <TIM_Base_SetConfig+0x12c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01b      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2c      	ldr	r2, [pc, #176]	@ (8003134 <TIM_Base_SetConfig+0x130>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d017      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <TIM_Base_SetConfig+0x134>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <TIM_Base_SetConfig+0x138>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00f      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a29      	ldr	r2, [pc, #164]	@ (8003140 <TIM_Base_SetConfig+0x13c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00b      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a28      	ldr	r2, [pc, #160]	@ (8003144 <TIM_Base_SetConfig+0x140>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <TIM_Base_SetConfig+0x144>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a26      	ldr	r2, [pc, #152]	@ (800314c <TIM_Base_SetConfig+0x148>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d108      	bne.n	80030c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003124 <TIM_Base_SetConfig+0x120>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_Base_SetConfig+0xf2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <TIM_Base_SetConfig+0x130>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d103      	bne.n	80030fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f043 0204 	orr.w	r2, r3, #4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40010000 	.word	0x40010000
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40010400 	.word	0x40010400
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800
 8003144:	40001800 	.word	0x40001800
 8003148:	40001c00 	.word	0x40001c00
 800314c:	40002000 	.word	0x40002000

08003150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f023 0201 	bic.w	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0303 	bic.w	r3, r3, #3
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f023 0302 	bic.w	r3, r3, #2
 8003198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a20      	ldr	r2, [pc, #128]	@ (8003228 <TIM_OC1_SetConfig+0xd8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_OC1_SetConfig+0x64>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1f      	ldr	r2, [pc, #124]	@ (800322c <TIM_OC1_SetConfig+0xdc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10c      	bne.n	80031ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f023 0308 	bic.w	r3, r3, #8
 80031ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a15      	ldr	r2, [pc, #84]	@ (8003228 <TIM_OC1_SetConfig+0xd8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <TIM_OC1_SetConfig+0x8e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a14      	ldr	r2, [pc, #80]	@ (800322c <TIM_OC1_SetConfig+0xdc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d111      	bne.n	8003202 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40010000 	.word	0x40010000
 800322c:	40010400 	.word	0x40010400

08003230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f023 0210 	bic.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f023 0320 	bic.w	r3, r3, #32
 800327a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a22      	ldr	r2, [pc, #136]	@ (8003314 <TIM_OC2_SetConfig+0xe4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_OC2_SetConfig+0x68>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a21      	ldr	r2, [pc, #132]	@ (8003318 <TIM_OC2_SetConfig+0xe8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d10d      	bne.n	80032b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800329e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <TIM_OC2_SetConfig+0xe4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_OC2_SetConfig+0x94>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <TIM_OC2_SetConfig+0xe8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d113      	bne.n	80032ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000
 8003318:	40010400 	.word	0x40010400

0800331c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a21      	ldr	r2, [pc, #132]	@ (80033fc <TIM_OC3_SetConfig+0xe0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_OC3_SetConfig+0x66>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a20      	ldr	r2, [pc, #128]	@ (8003400 <TIM_OC3_SetConfig+0xe4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10d      	bne.n	800339e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800339c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a16      	ldr	r2, [pc, #88]	@ (80033fc <TIM_OC3_SetConfig+0xe0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <TIM_OC3_SetConfig+0x92>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <TIM_OC3_SetConfig+0xe4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d113      	bne.n	80033d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40010000 	.word	0x40010000
 8003400:	40010400 	.word	0x40010400

08003404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800344e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	031b      	lsls	r3, r3, #12
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <TIM_OC4_SetConfig+0xa4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC4_SetConfig+0x68>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a11      	ldr	r2, [pc, #68]	@ (80034ac <TIM_OC4_SetConfig+0xa8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d109      	bne.n	8003480 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40010400 	.word	0x40010400

080034b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 030a 	bic.w	r3, r3, #10
 80034ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350e:	b480      	push	{r7}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 0210 	bic.w	r2, r3, #16
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	031b      	lsls	r3, r3, #12
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800354a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	f043 0307 	orr.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e05a      	b.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	@ (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003648:	d01d      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1b      	ldr	r2, [pc, #108]	@ (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1a      	ldr	r2, [pc, #104]	@ (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a15      	ldr	r2, [pc, #84]	@ (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10c      	bne.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800368c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40010400 	.word	0x40010400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40001800 	.word	0x40001800

080036dc <memset>:
 80036dc:	4402      	add	r2, r0
 80036de:	4603      	mov	r3, r0
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d100      	bne.n	80036e6 <memset+0xa>
 80036e4:	4770      	bx	lr
 80036e6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ea:	e7f9      	b.n	80036e0 <memset+0x4>

080036ec <__libc_init_array>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003724 <__libc_init_array+0x38>)
 80036f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003728 <__libc_init_array+0x3c>)
 80036f2:	1b64      	subs	r4, r4, r5
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	2600      	movs	r6, #0
 80036f8:	42a6      	cmp	r6, r4
 80036fa:	d109      	bne.n	8003710 <__libc_init_array+0x24>
 80036fc:	4d0b      	ldr	r5, [pc, #44]	@ (800372c <__libc_init_array+0x40>)
 80036fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003730 <__libc_init_array+0x44>)
 8003700:	f000 f818 	bl	8003734 <_init>
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	2600      	movs	r6, #0
 800370a:	42a6      	cmp	r6, r4
 800370c:	d105      	bne.n	800371a <__libc_init_array+0x2e>
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	f855 3b04 	ldr.w	r3, [r5], #4
 8003714:	4798      	blx	r3
 8003716:	3601      	adds	r6, #1
 8003718:	e7ee      	b.n	80036f8 <__libc_init_array+0xc>
 800371a:	f855 3b04 	ldr.w	r3, [r5], #4
 800371e:	4798      	blx	r3
 8003720:	3601      	adds	r6, #1
 8003722:	e7f2      	b.n	800370a <__libc_init_array+0x1e>
 8003724:	0800376c 	.word	0x0800376c
 8003728:	0800376c 	.word	0x0800376c
 800372c:	0800376c 	.word	0x0800376c
 8003730:	08003770 	.word	0x08003770

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
