
VCU_Son.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006a40  08006a40  00007a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006abc  08006abc  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ac4  08006ac4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac4  08006ac4  00007ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ac8  08006ac8  00007ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006acc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          0000038c  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003f4  200003f4  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f44  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b61  00000000  00000000  00019fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  0001cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c11  00000000  00000000  0001dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b37  00000000  00000000  0001e6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001381c  00000000  00000000  00042218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db3fa  00000000  00000000  00055a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130e2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004740  00000000  00000000  00130e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001355b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a28 	.word	0x08006a28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006a28 	.word	0x08006a28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <map_clamped>:

/**
 * @brief Maps a value from input range to 0-100% and clamps it.
 */
static float map_clamped(int32_t x, int32_t in_min, int32_t in_max)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
    if (x < in_min) x = in_min;
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	429a      	cmp	r2, r3
 80005be:	da01      	bge.n	80005c4 <map_clamped+0x18>
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	60fb      	str	r3, [r7, #12]
    if (x > in_max) x = in_max;
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dd01      	ble.n	80005d0 <map_clamped+0x24>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
    return ((float)(x - in_min) / (in_max - in_min)) * 100.0f;
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	ee07 3a90 	vmov	s15, r3
 80005da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005f0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000608 <map_clamped+0x5c>
 80005f4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	42c80000 	.word	0x42c80000

0800060c <APPS_Init>:

/**
 * @brief Initializes APPS system: ADC DMA, timing, and PWM.
 */
void APPS_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, adcdata, ADC_CHANNEL_COUNT);  // Start ADC in DMA mode
 8000610:	2202      	movs	r2, #2
 8000612:	4908      	ldr	r1, [pc, #32]	@ (8000634 <APPS_Init+0x28>)
 8000614:	4808      	ldr	r0, [pc, #32]	@ (8000638 <APPS_Init+0x2c>)
 8000616:	f001 fb25 	bl	8001c64 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);                             // Start timer (for diff timing)
 800061a:	4808      	ldr	r0, [pc, #32]	@ (800063c <APPS_Init+0x30>)
 800061c:	f004 f85a 	bl	80046d4 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);               // Start PWM output
 8000620:	2100      	movs	r1, #0
 8000622:	4807      	ldr	r0, [pc, #28]	@ (8000640 <APPS_Init+0x34>)
 8000624:	f004 f918 	bl	8004858 <HAL_TIM_PWM_Start>
    apps_enabled = true;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <APPS_Init+0x38>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000088 	.word	0x20000088
 8000638:	200000b0 	.word	0x200000b0
 800063c:	20000210 	.word	0x20000210
 8000640:	200001c8 	.word	0x200001c8
 8000644:	200002a1 	.word	0x200002a1

08000648 <APPS_Loop>:

/**
 * @brief Main APPS loop: Reads sensors, checks plausibility, and updates PWM output.
 */
void APPS_Loop(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
    HAL_TIM_MspPostInit(&htim3);  // Critical: ensure PWM pin is initialized properly
 800064e:	4887      	ldr	r0, [pc, #540]	@ (800086c <APPS_Loop+0x224>)
 8000650:	f000 ff66 	bl	8001520 <HAL_TIM_MspPostInit>

    // Disable throttle if APPS is disabled
    if (!apps_enabled) {
 8000654:	4b86      	ldr	r3, [pc, #536]	@ (8000870 <APPS_Loop+0x228>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <APPS_Loop+0x24>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Force PWM to 0
 8000662:	4b82      	ldr	r3, [pc, #520]	@ (800086c <APPS_Loop+0x224>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2200      	movs	r2, #0
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 800066a:	e0fb      	b.n	8000864 <APPS_Loop+0x21c>
    }

    // Normalize pedal sensor values (0-100%)
    norm1 = map_clamped(adcdata[0], sensor1_min, sensor1_max);
 800066c:	4b81      	ldr	r3, [pc, #516]	@ (8000874 <APPS_Loop+0x22c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	4b81      	ldr	r3, [pc, #516]	@ (8000878 <APPS_Loop+0x230>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	4b80      	ldr	r3, [pc, #512]	@ (800087c <APPS_Loop+0x234>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	f7ff ff95 	bl	80005ac <map_clamped>
 8000682:	eef0 7a40 	vmov.f32	s15, s0
 8000686:	4b7e      	ldr	r3, [pc, #504]	@ (8000880 <APPS_Loop+0x238>)
 8000688:	edc3 7a00 	vstr	s15, [r3]
    float norm2 = map_clamped(adcdata[1], sensor2_min, sensor2_max);
 800068c:	4b79      	ldr	r3, [pc, #484]	@ (8000874 <APPS_Loop+0x22c>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	4b7c      	ldr	r3, [pc, #496]	@ (8000884 <APPS_Loop+0x23c>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	4619      	mov	r1, r3
 8000698:	4b7b      	ldr	r3, [pc, #492]	@ (8000888 <APPS_Loop+0x240>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	f7ff ff85 	bl	80005ac <map_clamped>
 80006a2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Apply deadzone: ignore noise below 10%
    if (norm1 < 10.0f) norm1 = 0.0f;
 80006a6:	4b76      	ldr	r3, [pc, #472]	@ (8000880 <APPS_Loop+0x238>)
 80006a8:	edd3 7a00 	vldr	s15, [r3]
 80006ac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80006b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b8:	d503      	bpl.n	80006c2 <APPS_Loop+0x7a>
 80006ba:	4b71      	ldr	r3, [pc, #452]	@ (8000880 <APPS_Loop+0x238>)
 80006bc:	f04f 0200 	mov.w	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
    if (norm2 < 10.0f) norm2 = 0.0f;
 80006c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80006c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80006ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d2:	d502      	bpl.n	80006da <APPS_Loop+0x92>
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24

    // Clamp normalized values to [0%, 100%]
    norm1 = fminf(fmaxf(norm1, 0.0f), 100.0f);
 80006da:	4b69      	ldr	r3, [pc, #420]	@ (8000880 <APPS_Loop+0x238>)
 80006dc:	edd3 7a00 	vldr	s15, [r3]
 80006e0:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800088c <APPS_Loop+0x244>
 80006e4:	eeb0 0a67 	vmov.f32	s0, s15
 80006e8:	f005 fffe 	bl	80066e8 <fmaxf>
 80006ec:	eef0 7a40 	vmov.f32	s15, s0
 80006f0:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8000890 <APPS_Loop+0x248>
 80006f4:	eeb0 0a67 	vmov.f32	s0, s15
 80006f8:	f006 f813 	bl	8006722 <fminf>
 80006fc:	eef0 7a40 	vmov.f32	s15, s0
 8000700:	4b5f      	ldr	r3, [pc, #380]	@ (8000880 <APPS_Loop+0x238>)
 8000702:	edc3 7a00 	vstr	s15, [r3]
    norm2 = fminf(fmaxf(norm2, 0.0f), 100.0f);
 8000706:	eddf 0a61 	vldr	s1, [pc, #388]	@ 800088c <APPS_Loop+0x244>
 800070a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800070e:	f005 ffeb 	bl	80066e8 <fmaxf>
 8000712:	eef0 7a40 	vmov.f32	s15, s0
 8000716:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8000890 <APPS_Loop+0x248>
 800071a:	eeb0 0a67 	vmov.f32	s0, s15
 800071e:	f006 f800 	bl	8006722 <fminf>
 8000722:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Calculate absolute difference between sensors
    float diff = fabsf(norm1 - norm2);
 8000726:	4b56      	ldr	r3, [pc, #344]	@ (8000880 <APPS_Loop+0x238>)
 8000728:	ed93 7a00 	vldr	s14, [r3]
 800072c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000734:	eef0 7ae7 	vabs.f32	s15, s15
 8000738:	edc7 7a07 	vstr	s15, [r7, #28]
    uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);  // Current timer count
 800073c:	4b55      	ldr	r3, [pc, #340]	@ (8000894 <APPS_Loop+0x24c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000742:	61bb      	str	r3, [r7, #24]

    // Plausibility check: detect sustained sensor difference >10%
    if (diff > 10.0f) {
 8000744:	edd7 7a07 	vldr	s15, [r7, #28]
 8000748:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800074c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	dd1d      	ble.n	8000792 <APPS_Loop+0x14a>
        if (!diff_flag) {
 8000756:	4b50      	ldr	r3, [pc, #320]	@ (8000898 <APPS_Loop+0x250>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f083 0301 	eor.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d006      	beq.n	8000772 <APPS_Loop+0x12a>
            diff_flag = true;
 8000764:	4b4c      	ldr	r3, [pc, #304]	@ (8000898 <APPS_Loop+0x250>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
            diff_start_time = now;
 800076a:	4a4c      	ldr	r2, [pc, #304]	@ (800089c <APPS_Loop+0x254>)
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e012      	b.n	8000798 <APPS_Loop+0x150>
        } else {
            // Calculate elapsed time with overflow handling
            uint32_t elapsed = (now >= diff_start_time)
                             ? (now - diff_start_time)
                             : (0xFFFFFFFF - diff_start_time + now + 1);
 8000772:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <APPS_Loop+0x254>)
 8000774:	681b      	ldr	r3, [r3, #0]
            uint32_t elapsed = (now >= diff_start_time)
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]

            // If difference persists for >100 ms → permanent fault
            if (elapsed >= 100) {
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	2b63      	cmp	r3, #99	@ 0x63
 8000780:	d90a      	bls.n	8000798 <APPS_Loop+0x150>
                permanent_fault = true;
 8000782:	4b47      	ldr	r3, [pc, #284]	@ (80008a0 <APPS_Loop+0x258>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Force throttle to 0
 8000788:	4b38      	ldr	r3, [pc, #224]	@ (800086c <APPS_Loop+0x224>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34
                return;
 8000790:	e068      	b.n	8000864 <APPS_Loop+0x21c>
            }
        }
    } else {
        diff_flag = false;
 8000792:	4b41      	ldr	r3, [pc, #260]	@ (8000898 <APPS_Loop+0x250>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
    }

    // If no permanent fault, calculate PWM output
    if (!permanent_fault) {
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <APPS_Loop+0x258>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d05e      	beq.n	8000864 <APPS_Loop+0x21c>
        float norm1_scaled = norm1 / 100.0f;
 80007a6:	4b36      	ldr	r3, [pc, #216]	@ (8000880 <APPS_Loop+0x238>)
 80007a8:	ed93 7a00 	vldr	s14, [r3]
 80007ac:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000890 <APPS_Loop+0x248>
 80007b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007b4:	edc7 7a04 	vstr	s15, [r7, #16]

        // Apply logarithmic scaling for smoother control near low throttle
        float log_pwm = log10f(9.0f * norm1_scaled + 1.0f);
 80007b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80007bc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80007c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007cc:	eeb0 0a67 	vmov.f32	s0, s15
 80007d0:	f005 ff56 	bl	8006680 <log10f>
 80007d4:	ed87 0a03 	vstr	s0, [r7, #12]
        float pwm_raw = log_pwm * 49.0f;  // Scale to PWM steps (0-49)
 80007d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80007dc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80008a4 <APPS_Loop+0x25c>
 80007e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007e4:	edc7 7a02 	vstr	s15, [r7, #8]

        // Apply low-pass filter for smoothing (alpha = 0.1)
        const float alpha = 1.0f;
 80007e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80007ec:	607b      	str	r3, [r7, #4]
        filtered_pwm = (alpha * pwm_raw) + ((1.0f - alpha) * filtered_pwm);
 80007ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80007f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80007f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80007fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000802:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000806:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <APPS_Loop+0x260>)
 8000808:	edd3 7a00 	vldr	s15, [r3]
 800080c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000814:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <APPS_Loop+0x260>)
 8000816:	edc3 7a00 	vstr	s15, [r3]

        // Round and clamp PWM value
        uint32_t smooth_pwm = (uint32_t)(filtered_pwm + 0.5f);
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <APPS_Loop+0x260>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082c:	ee17 3a90 	vmov	r3, s15
 8000830:	623b      	str	r3, [r7, #32]
        if (smooth_pwm < 3) smooth_pwm = 0;
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b02      	cmp	r3, #2
 8000836:	d801      	bhi.n	800083c <APPS_Loop+0x1f4>
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
        if (smooth_pwm > 48) smooth_pwm = 49;
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	2b30      	cmp	r3, #48	@ 0x30
 8000840:	d901      	bls.n	8000846 <APPS_Loop+0x1fe>
 8000842:	2331      	movs	r3, #49	@ 0x31
 8000844:	623b      	str	r3, [r7, #32]

        // Update PWM output
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, smooth_pwm);
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <APPS_Loop+0x224>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6a3a      	ldr	r2, [r7, #32]
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
        pwm[0] = smooth_pwm * 100 / 49;  // Store as percentage (0-100%)
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	2264      	movs	r2, #100	@ 0x64
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	4a15      	ldr	r2, [pc, #84]	@ (80008ac <APPS_Loop+0x264>)
 8000858:	fba2 2303 	umull	r2, r3, r2, r3
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <APPS_Loop+0x268>)
 8000862:	801a      	strh	r2, [r3, #0]
    }
}
 8000864:	3728      	adds	r7, #40	@ 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001c8 	.word	0x200001c8
 8000870:	200002a1 	.word	0x200002a1
 8000874:	20000088 	.word	0x20000088
 8000878:	20000000 	.word	0x20000000
 800087c:	20000002 	.word	0x20000002
 8000880:	20000084 	.word	0x20000084
 8000884:	20000004 	.word	0x20000004
 8000888:	20000006 	.word	0x20000006
 800088c:	00000000 	.word	0x00000000
 8000890:	42c80000 	.word	0x42c80000
 8000894:	20000210 	.word	0x20000210
 8000898:	20000092 	.word	0x20000092
 800089c:	20000094 	.word	0x20000094
 80008a0:	20000093 	.word	0x20000093
 80008a4:	42440000 	.word	0x42440000
 80008a8:	20000098 	.word	0x20000098
 80008ac:	5397829d 	.word	0x5397829d
 80008b0:	20000090 	.word	0x20000090

080008b4 <APPS_Deinit>:

/**
 * @brief Deinitializes APPS: stops ADC, PWM, and resets output pin to 0V.
 */
void APPS_Deinit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc1);                     // Stop ADC DMA
 80008ba:	4817      	ldr	r0, [pc, #92]	@ (8000918 <APPS_Deinit+0x64>)
 80008bc:	f001 fae6 	bl	8001e8c <HAL_ADC_Stop_DMA>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);      // Stop PWM
 80008c0:	2100      	movs	r1, #0
 80008c2:	4816      	ldr	r0, [pc, #88]	@ (800091c <APPS_Deinit+0x68>)
 80008c4:	f004 f890 	bl	80049e8 <HAL_TIM_PWM_Stop>

    // Reconfigure PA6 as GPIO output (force 0V)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <APPS_Deinit+0x6c>)
 80008ec:	f003 f87c 	bl	80039e8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Ensure output is LOW
 80008f0:	2200      	movs	r2, #0
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	480a      	ldr	r0, [pc, #40]	@ (8000920 <APPS_Deinit+0x6c>)
 80008f6:	f003 fa2b 	bl	8003d50 <HAL_GPIO_WritePin>

    // Reset variables
    adcdata[0] = 0;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <APPS_Deinit+0x70>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
    adcdata[1] = 0;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <APPS_Deinit+0x70>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
    filtered_pwm = 0.0f;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <APPS_Deinit+0x74>)
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000b0 	.word	0x200000b0
 800091c:	200001c8 	.word	0x200001c8
 8000920:	40020000 	.word	0x40020000
 8000924:	20000088 	.word	0x20000088
 8000928:	20000098 	.word	0x20000098

0800092c <Brake_Update>:
 * If the conversion completes successfully within 100ms,
 * stores the result in `brake_adc_value`.
 * If not, sets it to a known invalid value (0xDDDD).
 */
void Brake_Update(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc2);
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <Brake_Update+0x3c>)
 8000932:	f001 f807 	bl	8001944 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 8000936:	2164      	movs	r1, #100	@ 0x64
 8000938:	480b      	ldr	r0, [pc, #44]	@ (8000968 <Brake_Update+0x3c>)
 800093a:	f001 f908 	bl	8001b4e <HAL_ADC_PollForConversion>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d107      	bne.n	8000954 <Brake_Update+0x28>
    {
        brake_adc_value = HAL_ADC_GetValue(&hadc2);
 8000944:	4808      	ldr	r0, [pc, #32]	@ (8000968 <Brake_Update+0x3c>)
 8000946:	f001 fafb 	bl	8001f40 <HAL_ADC_GetValue>
 800094a:	4603      	mov	r3, r0
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <Brake_Update+0x40>)
 8000950:	801a      	strh	r2, [r3, #0]
 8000952:	e003      	b.n	800095c <Brake_Update+0x30>
    }
    else
    {
        // ADC conversion timeout or error
        brake_adc_value = 0xDDDD;
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <Brake_Update+0x40>)
 8000956:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 800095a:	801a      	strh	r2, [r3, #0]
    }

    HAL_ADC_Stop(&hadc2);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <Brake_Update+0x3c>)
 800095e:	f001 f8c3 	bl	8001ae8 <HAL_ADC_Stop>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000f8 	.word	0x200000f8
 800096c:	2000009c 	.word	0x2000009c

08000970 <Brake_IsPressed>:
 *
 * @param threshold Minimum ADC value considered as "pressed".
 * @return true if brake is pressed, false otherwise.
 */
bool Brake_IsPressed(uint16_t threshold)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
    return (brake_adc_value > threshold);
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <Brake_IsPressed+0x28>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	b29b      	uxth	r3, r3
 8000980:	88fa      	ldrh	r2, [r7, #6]
 8000982:	429a      	cmp	r2, r3
 8000984:	bf34      	ite	cc
 8000986:	2301      	movcc	r3, #1
 8000988:	2300      	movcs	r3, #0
 800098a:	b2db      	uxtb	r3, r3
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	2000009c 	.word	0x2000009c

0800099c <Kelly_Init>:
 * - Enables RX FIFO0 interrupt callback.
 *
 * @param hcan Pointer to initialized CAN handle (e.g., &hcan1 or &hcan2)
 */
void Kelly_Init(CAN_HandleTypeDef *hcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	@ 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    kelly_hcan = hcan;
 80009a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a20 <Kelly_Init+0x84>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]

    // Configure CAN filter for only 0x0CF11E05
    CAN_FilterTypeDef filter = {0};
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2228      	movs	r2, #40	@ 0x28
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 f9e6 	bl	8005d84 <memset>
    filter.FilterBank = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80009c0:	2301      	movs	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
    filter.FilterActivation = ENABLE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    filter.SlaveStartFilterBank = 14; // For dual CAN
 80009cc:	230e      	movs	r3, #14
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Compute 32-bit ID and mask (shifted left by 3 for hardware register alignment)
    uint32_t id   = (KELLY_RPM_ID << 3);         // 0x0CF11E05 << 3 = 0x6788F028
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <Kelly_Init+0x88>)
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t mask = (0x1FFFFFFF << 3);           // Match all 29 bits
 80009d4:	f06f 0307 	mvn.w	r3, #7
 80009d8:	633b      	str	r3, [r7, #48]	@ 0x30

    filter.FilterIdHigh     = (id >> 16) & 0xFFFF;
 80009da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009dc:	0c1b      	lsrs	r3, r3, #16
 80009de:	60bb      	str	r3, [r7, #8]
    filter.FilterIdLow      = id & 0xFFFF;
 80009e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	60fb      	str	r3, [r7, #12]
    filter.FilterMaskIdHigh = (mask >> 16) & 0xFFFF;
 80009e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e8:	0c1b      	lsrs	r3, r3, #16
 80009ea:	613b      	str	r3, [r7, #16]
    filter.FilterMaskIdLow  = mask & 0xFFFF;
 80009ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	617b      	str	r3, [r7, #20]

    HAL_CAN_ConfigFilter(kelly_hcan, &filter);
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <Kelly_Init+0x84>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f107 0208 	add.w	r2, r7, #8
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fe67 	bl	80026d0 <HAL_CAN_ConfigFilter>

    // Start CAN and enable RX interrupt
    HAL_CAN_Start(kelly_hcan);
 8000a02:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <Kelly_Init+0x84>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 ff40 	bl	800288c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(kelly_hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <Kelly_Init+0x84>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2102      	movs	r1, #2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 f8a0 	bl	8002b58 <HAL_CAN_ActivateNotification>
}
 8000a18:	bf00      	nop
 8000a1a:	3738      	adds	r7, #56	@ 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000a0 	.word	0x200000a0
 8000a24:	6788f028 	.word	0x6788f028

08000a28 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * It checks for a match with the Kelly RPM ID and updates the RPM value.
 *
 * @param hcan Pointer to the CAN handle which triggered the interrupt
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;

    // Read the received CAN message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, (uint8_t*)kelly_data) == HAL_OK)
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f001 ff6b 	bl	8002914 <HAL_CAN_GetRxMessage>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d112      	bne.n	8000a6a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    {
        // Check if the message is from the Kelly controller (RPM message)
        if (rxHeader.ExtId == KELLY_RPM_ID)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d10e      	bne.n	8000a6a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
        {
            // Decode RPM from data[0] and data[1] (little-endian)
            rpm = ((uint16_t)kelly_data[1] << 8) | kelly_data[0];
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000a4e:	785b      	ldrb	r3, [r3, #1]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000a68:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000a8 	.word	0x200000a8
 8000a78:	0cf11e05 	.word	0x0cf11e05
 8000a7c:	200000a4 	.word	0x200000a4

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 fe84 	bl	8001790 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f83c 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000a8c:	f000 fa7a 	bl	8000f84 <MX_DMA_Init>
  MX_GPIO_Init();
 8000a90:	f000 fa98 	bl	8000fc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a94:	f000 f8a0 	bl	8000bd8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a98:	f000 f986 	bl	8000da8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a9c:	f000 f9fa 	bl	8000e94 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000aa0:	f000 f8fa 	bl	8000c98 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000aa4:	f000 f94a 	bl	8000d3c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000aa8:	f000 fa42 	bl	8000f30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f002 fb82 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ab6:	2014      	movs	r0, #20
 8000ab8:	f002 fb9b 	bl	80031f2 <HAL_NVIC_EnableIRQ>

  APPS_Deinit();
 8000abc:	f7ff fefa 	bl	80008b4 <APPS_Deinit>
  R2D_Init();
 8000ac0:	f000 fb4e 	bl	8001160 <R2D_Init>
  Kelly_Init(&hcan1);
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <main+0x78>)
 8000ac6:	f7ff ff69 	bl	800099c <Kelly_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Brake_Update();
 8000aca:	f7ff ff2f 	bl	800092c <Brake_Update>
	  R2D_Loop();
 8000ace:	f000 fb59 	bl	8001184 <R2D_Loop>
	  Nextion_UpdateR2D(rtd_active);
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <main+0x7c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fb22 	bl	8001120 <Nextion_UpdateR2D>
	  Nextion_UpdateRPM(rpm);
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <main+0x80>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	eeb0 0a67 	vmov.f32	s0, s15
 8000aee:	f000 fafb 	bl	80010e8 <Nextion_UpdateRPM>
	  Brake_Update();
 8000af2:	bf00      	nop
 8000af4:	e7e9      	b.n	8000aca <main+0x4a>
 8000af6:	bf00      	nop
 8000af8:	200001a0 	.word	0x200001a0
 8000afc:	200002a0 	.word	0x200002a0
 8000b00:	200000a4 	.word	0x200000a4

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	@ 0x50
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0320 	add.w	r3, r7, #32
 8000b0e:	2230      	movs	r2, #48	@ 0x30
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 f936 	bl	8005d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a27      	ldr	r2, [pc, #156]	@ (8000bd0 <SystemClock_Config+0xcc>)
 8000b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b38:	4b25      	ldr	r3, [pc, #148]	@ (8000bd0 <SystemClock_Config+0xcc>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <SystemClock_Config+0xd0>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <SystemClock_Config+0xd0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b74:	2308      	movs	r3, #8
 8000b76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b78:	23a8      	movs	r3, #168	@ 0xa8
 8000b7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 f8fb 	bl	8003d84 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b94:	f000 fa84 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000baa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 fb5c 	bl	8004274 <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bc2:	f000 fa6d 	bl	80010a0 <Error_Handler>
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3750      	adds	r7, #80	@ 0x50
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40007000 	.word	0x40007000

08000bd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bde:	463b      	mov	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bea:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000bec:	4a28      	ldr	r2, [pc, #160]	@ (8000c90 <MX_ADC1_Init+0xb8>)
 8000bee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000bf2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bf6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c04:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c94 <MX_ADC1_Init+0xbc>)
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c24:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c38:	4814      	ldr	r0, [pc, #80]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c3a:	f000 fe3f 	bl	80018bc <HAL_ADC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c44:	f000 fa2c 	bl	80010a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000c50:	2303      	movs	r3, #3
 8000c52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c5a:	f001 f99d 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c64:	f000 fa1c 	bl	80010a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_ADC1_Init+0xb4>)
 8000c76:	f001 f98f 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c80:	f000 fa0e 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000b0 	.word	0x200000b0
 8000c90:	40012000 	.word	0x40012000
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	@ (8000d34 <MX_ADC2_Init+0x9c>)
 8000cae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cda:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <MX_ADC2_Init+0xa0>)
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cf8:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000cfa:	f000 fddf 	bl	80018bc <HAL_ADC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000d04:	f000 f9cc 	bl	80010a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d10:	2307      	movs	r3, #7
 8000d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_ADC2_Init+0x98>)
 8000d1a:	f001 f93d 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000d24:	f000 f9bc 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200000f8 	.word	0x200000f8
 8000d34:	40012100 	.word	0x40012100
 8000d38:	0f000001 	.word	0x0f000001

08000d3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d40:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d42:	4a18      	ldr	r2, [pc, #96]	@ (8000da4 <MX_CAN1_Init+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000d46:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d48:	220c      	movs	r2, #12
 8000d4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d52:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d5a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000d5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <MX_CAN1_Init+0x64>)
 8000d8e:	f001 fba3 	bl	80024d8 <HAL_CAN_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d98:	f000 f982 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001a0 	.word	0x200001a0
 8000da4:	40006400 	.word	0x40006400

08000da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	@ 0x38
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000dda:	4a2d      	ldr	r2, [pc, #180]	@ (8000e90 <MX_TIM3_Init+0xe8>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000dde:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000de0:	2253      	movs	r2, #83	@ 0x53
 8000de2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000dea:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000dec:	2231      	movs	r2, #49	@ 0x31
 8000dee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dfc:	4823      	ldr	r0, [pc, #140]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000dfe:	f003 fc19 	bl	8004634 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e08:	f000 f94a 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e16:	4619      	mov	r1, r3
 8000e18:	481c      	ldr	r0, [pc, #112]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000e1a:	f003 ff17 	bl	8004c4c <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e24:	f000 f93c 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e28:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000e2a:	f003 fcbb 	bl	80047a4 <HAL_TIM_PWM_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e34:	f000 f934 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4619      	mov	r1, r3
 8000e46:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000e48:	f004 fade 	bl	8005408 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e52:	f000 f925 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e56:	2360      	movs	r3, #96	@ 0x60
 8000e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000e6e:	f003 fe2b 	bl	8004ac8 <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e78:	f000 f912 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e7c:	4803      	ldr	r0, [pc, #12]	@ (8000e8c <MX_TIM3_Init+0xe4>)
 8000e7e:	f000 fb4f 	bl	8001520 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	@ 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001c8 	.word	0x200001c8
 8000e90:	40000400 	.word	0x40000400

08000e94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <MX_TIM4_Init+0x98>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16799;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000eb8:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000eda:	f003 fbab 	bl	8004634 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000ee4:	f000 f8dc 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ef6:	f003 fea9 	bl	8004c4c <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 f8ce 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000f12:	f004 fa79 	bl	8005408 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f8c0 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000210 	.word	0x20000210
 8000f2c:	40000800 	.word	0x40000800

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_USART2_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f68:	f004 faca 	bl	8005500 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 f895 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000258 	.word	0x20000258
 8000f80:	40004400 	.word	0x40004400

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <MX_DMA_Init+0x3c>)
 8000f94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	203c      	movs	r0, #60	@ 0x3c
 8000fac:	f002 f905 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fb0:	203c      	movs	r0, #60	@ 0x3c
 8000fb2:	f002 f91e 	bl	80031f2 <HAL_NVIC_EnableIRQ>

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b2e      	ldr	r3, [pc, #184]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a1f      	ldr	r2, [pc, #124]	@ (8001098 <MX_GPIO_Init+0xd4>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_GPIO_Init+0xd4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001050:	4812      	ldr	r0, [pc, #72]	@ (800109c <MX_GPIO_Init+0xd8>)
 8001052:	f002 fe7d 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	480b      	ldr	r0, [pc, #44]	@ (800109c <MX_GPIO_Init+0xd8>)
 8001070:	f002 fcba 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <MX_GPIO_Init+0xd8>)
 800108a:	f002 fcad 	bl	80039e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	@ 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <Error_Handler+0x8>

080010ac <Nextion_SendCommand>:
 * Appends 0xFF 0xFF 0xFF after the command to indicate end of command.
 *
 * @param cmd Null-terminated command string (e.g., "t0.txt=\"Hello\"")
 */
void Nextion_SendCommand(const char *cmd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)cmd, strlen(cmd), HAL_MAX_DELAY);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff f88b 	bl	80001d0 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <Nextion_SendCommand+0x34>)
 80010c6:	f004 fa6b 	bl	80055a0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, NEXTION_END_CMD, sizeof(NEXTION_END_CMD), HAL_MAX_DELAY);
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	2203      	movs	r2, #3
 80010d0:	4904      	ldr	r1, [pc, #16]	@ (80010e4 <Nextion_SendCommand+0x38>)
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <Nextion_SendCommand+0x34>)
 80010d4:	f004 fa64 	bl	80055a0 <HAL_UART_Transmit>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000258 	.word	0x20000258
 80010e4:	08006a64 	.word	0x08006a64

080010e8 <Nextion_UpdateRPM>:
 * You may customize the label name based on your GUI layout.
 *
 * @param rpm The numeric value to display (interpreted as % or RPM).
 */
void Nextion_UpdateRPM(float rpm)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b092      	sub	sp, #72	@ 0x48
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[64];
    snprintf(buffer, sizeof(buffer), "t9.txt=\"%d\"", (int)rpm);
 80010f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	4a06      	ldr	r2, [pc, #24]	@ (800111c <Nextion_UpdateRPM+0x34>)
 8001104:	2140      	movs	r1, #64	@ 0x40
 8001106:	f004 fe07 	bl	8005d18 <sniprintf>
    Nextion_SendCommand(buffer);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffcc 	bl	80010ac <Nextion_SendCommand>
}
 8001114:	bf00      	nop
 8001116:	3748      	adds	r7, #72	@ 0x48
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	08006a40 	.word	0x08006a40

08001120 <Nextion_UpdateR2D>:
 * Updates field `t10.txt` with either "ON" or "OFF" based on system state.
 *
 * @param rtd_state True = RTD ON, False = RTD OFF
 */
void Nextion_UpdateR2D(bool rtd_state)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "t10.txt=\"%s\"", rtd_state ? "ON" : "OFF");
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <Nextion_UpdateR2D+0x14>
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <Nextion_UpdateR2D+0x34>)
 8001132:	e000      	b.n	8001136 <Nextion_UpdateR2D+0x16>
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <Nextion_UpdateR2D+0x38>)
 8001136:	f107 0008 	add.w	r0, r7, #8
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <Nextion_UpdateR2D+0x3c>)
 800113c:	2120      	movs	r1, #32
 800113e:	f004 fdeb 	bl	8005d18 <sniprintf>
    Nextion_SendCommand(buffer);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ffb0 	bl	80010ac <Nextion_SendCommand>
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	@ 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08006a4c 	.word	0x08006a4c
 8001158:	08006a50 	.word	0x08006a50
 800115c:	08006a54 	.word	0x08006a54

08001160 <R2D_Init>:
 * @brief Initializes the Ready-to-Drive (RTD) system.
 *
 * Reads the initial state of the RTD button.
 */
void R2D_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    prev_rtd_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001164:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <R2D_Init+0x1c>)
 800116a:	f002 fdd9 	bl	8003d20 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <R2D_Init+0x20>)
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020000 	.word	0x40020000
 8001180:	20000008 	.word	0x20000008

08001184 <R2D_Loop>:
 * - Handles falling edge detection on RTD button.
 * - Enables/disables throttle control through APPS.
 * - Controls buzzer based on RTD status.
 */
void R2D_Loop(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
    // Read RTD button state
    GPIO_PinState rtd_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800118a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800118e:	4833      	ldr	r0, [pc, #204]	@ (800125c <R2D_Loop+0xd8>)
 8001190:	f002 fdc6 	bl	8003d20 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]

    // Update brake ADC value and check if brake is pressed
    Brake_Update();
 8001198:	f7ff fbc8 	bl	800092c <Brake_Update>
    bool brake_pressed = Brake_IsPressed(BRAKE_PRESS_THRESHOLD);
 800119c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011a0:	f7ff fbe6 	bl	8000970 <Brake_IsPressed>
 80011a4:	4603      	mov	r3, r0
 80011a6:	71bb      	strb	r3, [r7, #6]

    // Detect falling edge on RTD button
    if (prev_rtd_button == GPIO_PIN_SET && rtd_button == GPIO_PIN_RESET)
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <R2D_Loop+0xdc>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d137      	bne.n	8001220 <R2D_Loop+0x9c>
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d134      	bne.n	8001220 <R2D_Loop+0x9c>
    {
        if (!rtd_active && brake_pressed)
 80011b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <R2D_Loop+0xe0>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f083 0301 	eor.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d01b      	beq.n	80011fc <R2D_Loop+0x78>
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d018      	beq.n	80011fc <R2D_Loop+0x78>
        {
            // Activate RTD if brake is pressed and RTD was inactive
            rtd_active = true;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <R2D_Loop+0xe0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
            apps_enabled = true;
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <R2D_Loop+0xe4>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
            APPS_Init();
 80011d6:	f7ff fa19 	bl	800060c <APPS_Init>

            // Turn on buzzer for 2 seconds
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e0:	481e      	ldr	r0, [pc, #120]	@ (800125c <R2D_Loop+0xd8>)
 80011e2:	f002 fdb5 	bl	8003d50 <HAL_GPIO_WritePin>
            HAL_Delay(2000);
 80011e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011ea:	f000 fb43 	bl	8001874 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f4:	4819      	ldr	r0, [pc, #100]	@ (800125c <R2D_Loop+0xd8>)
 80011f6:	f002 fdab 	bl	8003d50 <HAL_GPIO_WritePin>
 80011fa:	e011      	b.n	8001220 <R2D_Loop+0x9c>
        }
        else if (rtd_active)
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <R2D_Loop+0xe0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00d      	beq.n	8001220 <R2D_Loop+0x9c>
        {
            // Deactivate RTD if already active
            rtd_active = false;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <R2D_Loop+0xe0>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
            apps_enabled = false;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <R2D_Loop+0xe4>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
            APPS_Deinit();
 8001210:	f7ff fb50 	bl	80008b4 <APPS_Deinit>

            // Ensure buzzer is OFF
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121a:	4810      	ldr	r0, [pc, #64]	@ (800125c <R2D_Loop+0xd8>)
 800121c:	f002 fd98 	bl	8003d50 <HAL_GPIO_WritePin>
        }
    }

    // Update previous button state for next loop
    prev_rtd_button = rtd_button;
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <R2D_Loop+0xdc>)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	7013      	strb	r3, [r2, #0]

    // Optional buzzer control via external flag
    if (buzzer_on)
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <R2D_Loop+0xe8>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00c      	beq.n	8001248 <R2D_Loop+0xc4>
    {
        HAL_Delay(3000);
 800122e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001232:	f000 fb1f 	bl	8001874 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <R2D_Loop+0xd8>)
 800123e:	f002 fd87 	bl	8003d50 <HAL_GPIO_WritePin>
        buzzer_on = false;
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <R2D_Loop+0xe8>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    }

    // Run APPS logic only if system is enabled
    if (apps_enabled)
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <R2D_Loop+0xe4>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <R2D_Loop+0xd0>
    {
        APPS_Loop();
 8001250:	f7ff f9fa 	bl	8000648 <APPS_Loop>
    }
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020000 	.word	0x40020000
 8001260:	20000008 	.word	0x20000008
 8001264:	200002a0 	.word	0x200002a0
 8001268:	200002a1 	.word	0x200002a1
 800126c:	200002a2 	.word	0x200002a2

08001270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a0f      	ldr	r2, [pc, #60]	@ (80012bc <HAL_MspInit+0x4c>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_MspInit+0x4c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a46      	ldr	r2, [pc, #280]	@ (80013f8 <HAL_ADC_MspInit+0x138>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d159      	bne.n	8001396 <HAL_ADC_MspInit+0xd6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	4b45      	ldr	r3, [pc, #276]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	4a44      	ldr	r2, [pc, #272]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f2:	4b42      	ldr	r3, [pc, #264]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a3d      	ldr	r2, [pc, #244]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800131a:	2303      	movs	r3, #3
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4834      	ldr	r0, [pc, #208]	@ (8001400 <HAL_ADC_MspInit+0x140>)
 800132e:	f002 fb5b 	bl	80039e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001332:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 8001334:	4a34      	ldr	r2, [pc, #208]	@ (8001408 <HAL_ADC_MspInit+0x148>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001344:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800134a:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 800134c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001350:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001352:	4b2c      	ldr	r3, [pc, #176]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 8001354:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001358:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800135a:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 800135c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001360:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001362:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 8001364:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001368:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 800136c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001370:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001378:	4822      	ldr	r0, [pc, #136]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 800137a:	f001 ff55 	bl	8003228 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001384:	f7ff fe8c 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 800138c:	639a      	str	r2, [r3, #56]	@ 0x38
 800138e:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <HAL_ADC_MspInit+0x144>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001394:	e02c      	b.n	80013f0 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <HAL_ADC_MspInit+0x14c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d127      	bne.n	80013f0 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a8:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_ADC_MspInit+0x13c>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d8:	2304      	movs	r3, #4
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013dc:	2303      	movs	r3, #3
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <HAL_ADC_MspInit+0x140>)
 80013ec:	f002 fafc 	bl	80039e8 <HAL_GPIO_Init>
}
 80013f0:	bf00      	nop
 80013f2:	3730      	adds	r7, #48	@ 0x30
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40012000 	.word	0x40012000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000
 8001404:	20000140 	.word	0x20000140
 8001408:	40026470 	.word	0x40026470
 800140c:	40012100 	.word	0x40012100

08001410 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_CAN_MspInit+0x94>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d134      	bne.n	800149c <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <HAL_CAN_MspInit+0x98>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <HAL_CAN_MspInit+0x98>)
 800143c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_CAN_MspInit+0x98>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_CAN_MspInit+0x98>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <HAL_CAN_MspInit+0x98>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_CAN_MspInit+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800147c:	2309      	movs	r3, #9
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4809      	ldr	r0, [pc, #36]	@ (80014ac <HAL_CAN_MspInit+0x9c>)
 8001488:	f002 faae 	bl	80039e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2014      	movs	r0, #20
 8001492:	f001 fe92 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001496:	2014      	movs	r0, #20
 8001498:	f001 feab 	bl	80031f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40006400 	.word	0x40006400
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020400 	.word	0x40020400

080014b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a15      	ldr	r2, [pc, #84]	@ (8001514 <HAL_TIM_Base_MspInit+0x64>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10e      	bne.n	80014e0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <HAL_TIM_Base_MspInit+0x68>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <HAL_TIM_Base_MspInit+0x68>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_TIM_Base_MspInit+0x68>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014de:	e012      	b.n	8001506 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <HAL_TIM_Base_MspInit+0x6c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10d      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_TIM_Base_MspInit+0x68>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a09      	ldr	r2, [pc, #36]	@ (8001518 <HAL_TIM_Base_MspInit+0x68>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <HAL_TIM_Base_MspInit+0x68>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40000400 	.word	0x40000400
 8001518:	40023800 	.word	0x40023800
 800151c:	40000800 	.word	0x40000800

08001520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <HAL_TIM_MspPostInit+0x68>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11d      	bne.n	800157e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_TIM_MspPostInit+0x6c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a10      	ldr	r2, [pc, #64]	@ (800158c <HAL_TIM_MspPostInit+0x6c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_TIM_MspPostInit+0x6c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800155e:	2340      	movs	r3, #64	@ 0x40
 8001560:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800156e:	2302      	movs	r3, #2
 8001570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <HAL_TIM_MspPostInit+0x70>)
 800157a:	f002 fa35 	bl	80039e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40000400 	.word	0x40000400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000

08001594 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_UART_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12b      	bne.n	800160e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a17      	ldr	r2, [pc, #92]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015ee:	2360      	movs	r3, #96	@ 0x60
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fe:	2307      	movs	r3, #7
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_UART_MspInit+0x8c>)
 800160a:	f002 f9ed 	bl	80039e8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	@ 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004400 	.word	0x40004400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020c00 	.word	0x40020c00

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 f8db 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <CAN1_RX0_IRQHandler+0x10>)
 800168a:	f001 fa8b 	bl	8002ba4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200001a0 	.word	0x200001a0

08001698 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <DMA2_Stream4_IRQHandler+0x10>)
 800169e:	f001 ff39 	bl	8003514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000140 	.word	0x20000140

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	@ (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f004 fb5a 	bl	8005d94 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20020000 	.word	0x20020000
 800170c:	00000400 	.word	0x00000400
 8001710:	200002a4 	.word	0x200002a4
 8001714:	200003f8 	.word	0x200003f8

08001718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001774 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001740:	f7ff ffea 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	@ (800177c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	@ (8001788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f004 fb19 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176e:	f7ff f987 	bl	8000a80 <main>
  bx  lr    
 8001772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001780:	08006acc 	.word	0x08006acc
  ldr r2, =_sbss
 8001784:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001788:	200003f4 	.word	0x200003f4

0800178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <HAL_Init+0x40>)
 800179a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800179e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <HAL_Init+0x40>)
 80017a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_Init+0x40>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f001 fcf3 	bl	80031a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	200f      	movs	r0, #15
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff fd54 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fd0b 	bl	800320e <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f001 fcd3 	bl	80031ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000000c 	.word	0x2000000c
 800182c:	20000014 	.word	0x20000014
 8001830:	20000010 	.word	0x20000010

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000014 	.word	0x20000014
 8001858:	200002a8 	.word	0x200002a8

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200002a8 	.word	0x200002a8

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_Delay+0x44>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffde 	bl	800185c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000014 	.word	0x20000014

080018bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e033      	b.n	800193a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fcf0 	bl	80012c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d118      	bne.n	800192c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001902:	f023 0302 	bic.w	r3, r3, #2
 8001906:	f043 0202 	orr.w	r2, r3, #2
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fc64 	bl	80021dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
 800192a:	e001      	b.n	8001930 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADC_Start+0x1a>
 800195a:	2302      	movs	r3, #2
 800195c:	e0b2      	b.n	8001ac4 <HAL_ADC_Start+0x180>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d018      	beq.n	80019a6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001984:	4b52      	ldr	r3, [pc, #328]	@ (8001ad0 <HAL_ADC_Start+0x18c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_ADC_Start+0x190>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9a      	lsrs	r2, r3, #18
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3b01      	subs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d17a      	bne.n	8001aaa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019f2:	d106      	bne.n	8001a02 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	f023 0206 	bic.w	r2, r3, #6
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a10:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <HAL_ADC_Start+0x194>)
 8001a12:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d12a      	bne.n	8001a80 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001adc <HAL_ADC_Start+0x198>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d015      	beq.n	8001a60 <HAL_ADC_Start+0x11c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a29      	ldr	r2, [pc, #164]	@ (8001ae0 <HAL_ADC_Start+0x19c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_Start+0x106>
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_ADC_Start+0x194>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a25      	ldr	r2, [pc, #148]	@ (8001ae4 <HAL_ADC_Start+0x1a0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d136      	bne.n	8001ac2 <HAL_ADC_Start+0x17e>
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_ADC_Start+0x194>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d130      	bne.n	8001ac2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d129      	bne.n	8001ac2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	e020      	b.n	8001ac2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a15      	ldr	r2, [pc, #84]	@ (8001adc <HAL_ADC_Start+0x198>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d11b      	bne.n	8001ac2 <HAL_ADC_Start+0x17e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d114      	bne.n	8001ac2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	e00b      	b.n	8001ac2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f043 0210 	orr.w	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	40012300 	.word	0x40012300
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	40012100 	.word	0x40012100
 8001ae4:	40012200 	.word	0x40012200

08001ae8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Stop+0x16>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e021      	b.n	8001b42 <HAL_ADC_Stop+0x5a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6a:	d113      	bne.n	8001b94 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b7a:	d10b      	bne.n	8001b94 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e063      	b.n	8001c5c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b94:	f7ff fe62 	bl	800185c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b9a:	e021      	b.n	8001be0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d01d      	beq.n	8001be0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_ADC_PollForConversion+0x6c>
 8001baa:	f7ff fe57 	bl	800185c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d212      	bcs.n	8001be0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d00b      	beq.n	8001be0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f043 0204 	orr.w	r2, r3, #4
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e03d      	b.n	8001c5c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d1d6      	bne.n	8001b9c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f06f 0212 	mvn.w	r2, #18
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d123      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11f      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d111      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Start_DMA+0x22>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e0eb      	b.n	8001e5e <HAL_ADC_Start_DMA+0x1fa>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d018      	beq.n	8001cce <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cac:	4b6e      	ldr	r3, [pc, #440]	@ (8001e68 <HAL_ADC_Start_DMA+0x204>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e6c <HAL_ADC_Start_DMA+0x208>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9a      	lsrs	r2, r3, #18
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cdc:	d107      	bne.n	8001cee <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	f040 80a3 	bne.w	8001e44 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d3c:	d106      	bne.n	8001d4c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f023 0206 	bic.w	r2, r3, #6
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d4a:	e002      	b.n	8001d52 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d5a:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_ADC_Start_DMA+0x20c>)
 8001d5c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d62:	4a44      	ldr	r2, [pc, #272]	@ (8001e74 <HAL_ADC_Start_DMA+0x210>)
 8001d64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6a:	4a43      	ldr	r2, [pc, #268]	@ (8001e78 <HAL_ADC_Start_DMA+0x214>)
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d72:	4a42      	ldr	r2, [pc, #264]	@ (8001e7c <HAL_ADC_Start_DMA+0x218>)
 8001d74:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d8e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d9e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	334c      	adds	r3, #76	@ 0x4c
 8001daa:	4619      	mov	r1, r3
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f001 fae8 	bl	8003384 <HAL_DMA_Start_IT>
 8001db4:	4603      	mov	r3, r0
 8001db6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12a      	bne.n	8001e1a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e80 <HAL_ADC_Start_DMA+0x21c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d015      	beq.n	8001dfa <HAL_ADC_Start_DMA+0x196>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <HAL_ADC_Start_DMA+0x220>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_Start_DMA+0x180>
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <HAL_ADC_Start_DMA+0x20c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00a      	beq.n	8001dfa <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a27      	ldr	r2, [pc, #156]	@ (8001e88 <HAL_ADC_Start_DMA+0x224>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d136      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x1f8>
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_ADC_Start_DMA+0x20c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d130      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d129      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e020      	b.n	8001e5c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a18      	ldr	r2, [pc, #96]	@ (8001e80 <HAL_ADC_Start_DMA+0x21c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d11b      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x1f8>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d114      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	e00b      	b.n	8001e5c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f043 0210 	orr.w	r2, r3, #16
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000000c 	.word	0x2000000c
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	40012300 	.word	0x40012300
 8001e74:	080023d5 	.word	0x080023d5
 8001e78:	0800248f 	.word	0x0800248f
 8001e7c:	080024ab 	.word	0x080024ab
 8001e80:	40012000 	.word	0x40012000
 8001e84:	40012100 	.word	0x40012100
 8001e88:	40012200 	.word	0x40012200

08001e8c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Stop_DMA+0x1a>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e048      	b.n	8001f38 <HAL_ADC_Stop_DMA+0xac>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d130      	bne.n	8001f2e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eda:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d10f      	bne.n	8001f0a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 faa0 	bl	8003434 <HAL_DMA_Abort>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001f18:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1c>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e105      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x228>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b09      	cmp	r3, #9
 8001fc2:	d925      	bls.n	8002010 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68d9      	ldr	r1, [r3, #12]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b1e      	subs	r3, #30
 8001fda:	2207      	movs	r2, #7
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68d9      	ldr	r1, [r3, #12]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4403      	add	r3, r0
 8002002:	3b1e      	subs	r3, #30
 8002004:	409a      	lsls	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	e022      	b.n	8002056 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6919      	ldr	r1, [r3, #16]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	2207      	movs	r2, #7
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6919      	ldr	r1, [r3, #16]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	4603      	mov	r3, r0
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4403      	add	r3, r0
 800204c:	409a      	lsls	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b06      	cmp	r3, #6
 800205c:	d824      	bhi.n	80020a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	3b05      	subs	r3, #5
 8002070:	221f      	movs	r2, #31
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	400a      	ands	r2, r1
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b05      	subs	r3, #5
 800209a:	fa00 f203 	lsl.w	r2, r0, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a6:	e04c      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	d824      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b23      	subs	r3, #35	@ 0x23
 80020c2:	221f      	movs	r2, #31
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b23      	subs	r3, #35	@ 0x23
 80020ec:	fa00 f203 	lsl.w	r2, r0, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f8:	e023      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b41      	subs	r3, #65	@ 0x41
 800210c:	221f      	movs	r2, #31
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b41      	subs	r3, #65	@ 0x41
 8002136:	fa00 f203 	lsl.w	r2, r0, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002142:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <HAL_ADC_ConfigChannel+0x234>)
 8002144:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <HAL_ADC_ConfigChannel+0x238>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d109      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1cc>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b12      	cmp	r3, #18
 8002156:	d105      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <HAL_ADC_ConfigChannel+0x238>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d123      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x21e>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b10      	cmp	r3, #16
 8002174:	d003      	beq.n	800217e <HAL_ADC_ConfigChannel+0x1e6>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b11      	cmp	r3, #17
 800217c:	d11b      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d111      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a10      	ldr	r2, [pc, #64]	@ (80021d8 <HAL_ADC_ConfigChannel+0x240>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0c9a      	lsrs	r2, r3, #18
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40012300 	.word	0x40012300
 80021d0:	40012000 	.word	0x40012000
 80021d4:	2000000c 	.word	0x2000000c
 80021d8:	431bde83 	.word	0x431bde83

080021dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e4:	4b79      	ldr	r3, [pc, #484]	@ (80023cc <ADC_Init+0x1f0>)
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	021a      	lsls	r2, r3, #8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226e:	4a58      	ldr	r2, [pc, #352]	@ (80023d0 <ADC_Init+0x1f4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d022      	beq.n	80022ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6899      	ldr	r1, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	e00f      	b.n	80022da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0202 	bic.w	r2, r2, #2
 80022e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7e1b      	ldrb	r3, [r3, #24]
 80022f4:	005a      	lsls	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002316:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	3b01      	subs	r3, #1
 8002334:	035a      	lsls	r2, r3, #13
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	e007      	b.n	8002350 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800234e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	3b01      	subs	r3, #1
 800236c:	051a      	lsls	r2, r3, #20
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002392:	025a      	lsls	r2, r3, #9
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	029a      	lsls	r2, r3, #10
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40012300 	.word	0x40012300
 80023d0:	0f000001 	.word	0x0f000001

080023d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d13c      	bne.n	8002468 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d12b      	bne.n	8002460 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800240c:	2b00      	cmp	r3, #0
 800240e:	d127      	bne.n	8002460 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002428:	2b00      	cmp	r3, #0
 800242a:	d119      	bne.n	8002460 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0220 	bic.w	r2, r2, #32
 800243a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff fd7a 	bl	8001f5a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002466:	e00e      	b.n	8002486 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff fd84 	bl	8001f82 <HAL_ADC_ErrorCallback>
}
 800247a:	e004      	b.n	8002486 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fd66 	bl	8001f6e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2240      	movs	r2, #64	@ 0x40
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	f043 0204 	orr.w	r2, r3, #4
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff fd59 	bl	8001f82 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0ed      	b.n	80026c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe ff8a 	bl	8001410 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800250c:	f7ff f9a6 	bl	800185c <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002512:	e012      	b.n	800253a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002514:	f7ff f9a2 	bl	800185c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d90b      	bls.n	800253a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2205      	movs	r2, #5
 8002532:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0c5      	b.n	80026c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0e5      	beq.n	8002514 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0202 	bic.w	r2, r2, #2
 8002556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002558:	f7ff f980 	bl	800185c <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800255e:	e012      	b.n	8002586 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002560:	f7ff f97c 	bl	800185c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d90b      	bls.n	8002586 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2205      	movs	r2, #5
 800257e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e09f      	b.n	80026c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7e1b      	ldrb	r3, [r3, #24]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7e5b      	ldrb	r3, [r3, #25]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e007      	b.n	80025e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e9b      	ldrb	r3, [r3, #26]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0220 	bic.w	r2, r2, #32
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7edb      	ldrb	r3, [r3, #27]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0210 	bic.w	r2, r2, #16
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e007      	b.n	800263c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0210 	orr.w	r2, r2, #16
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7f1b      	ldrb	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0208 	orr.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e007      	b.n	8002666 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0208 	bic.w	r2, r2, #8
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7f5b      	ldrb	r3, [r3, #29]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0204 	orr.w	r2, r2, #4
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e007      	b.n	8002690 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0204 	bic.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	ea42 0103 	orr.w	r1, r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d003      	beq.n	80026f0 <HAL_CAN_ConfigFilter+0x20>
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	f040 80be 	bne.w	800286c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026f0:	4b65      	ldr	r3, [pc, #404]	@ (8002888 <HAL_CAN_ConfigFilter+0x1b8>)
 80026f2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800270a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	431a      	orrs	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2201      	movs	r2, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d123      	bne.n	800279a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	401a      	ands	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002774:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	3248      	adds	r2, #72	@ 0x48
 800277a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800278e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	3348      	adds	r3, #72	@ 0x48
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d122      	bne.n	80027e8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3248      	adds	r2, #72	@ 0x48
 80027c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027de:	6939      	ldr	r1, [r7, #16]
 80027e0:	3348      	adds	r3, #72	@ 0x48
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002802:	e007      	b.n	8002814 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	431a      	orrs	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	401a      	ands	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800282e:	e007      	b.n	8002840 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	431a      	orrs	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d107      	bne.n	8002858 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	431a      	orrs	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e006      	b.n	800287a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40006400 	.word	0x40006400

0800288c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d12e      	bne.n	80028fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028b8:	f7fe ffd0 	bl	800185c <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028be:	e012      	b.n	80028e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028c0:	f7fe ffcc 	bl	800185c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b0a      	cmp	r3, #10
 80028cc:	d90b      	bls.n	80028e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2205      	movs	r2, #5
 80028de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e012      	b.n	800290c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e5      	bne.n	80028c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e006      	b.n	800290c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002928:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d003      	beq.n	8002938 <HAL_CAN_GetRxMessage+0x24>
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b02      	cmp	r3, #2
 8002934:	f040 8103 	bne.w	8002b3e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10e      	bne.n	800295c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d116      	bne.n	800297a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0f7      	b.n	8002b4c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d107      	bne.n	800297a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0e8      	b.n	8002b4c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	331b      	adds	r3, #27
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0204 	and.w	r2, r3, #4
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10c      	bne.n	80029b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	331b      	adds	r3, #27
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4413      	add	r3, r2
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0d5b      	lsrs	r3, r3, #21
 80029a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e00b      	b.n	80029ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	331b      	adds	r3, #27
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	331b      	adds	r3, #27
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	4413      	add	r3, r2
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0202 	and.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	331b      	adds	r3, #27
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2208      	movs	r2, #8
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	e00b      	b.n	8002a18 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	331b      	adds	r3, #27
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	331b      	adds	r3, #27
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	4413      	add	r3, r2
 8002a24:	3304      	adds	r3, #4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	331b      	adds	r3, #27
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0a1a      	lsrs	r2, r3, #8
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0c1a      	lsrs	r2, r3, #16
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0e1a      	lsrs	r2, r3, #24
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	3303      	adds	r3, #3
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0a1a      	lsrs	r2, r3, #8
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	3305      	adds	r3, #5
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0c1a      	lsrs	r2, r3, #16
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3306      	adds	r3, #6
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e1a      	lsrs	r2, r3, #24
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	3307      	adds	r3, #7
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d108      	bne.n	8002b2a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0220 	orr.w	r2, r2, #32
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	e007      	b.n	8002b3a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e006      	b.n	8002b4c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b68:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d002      	beq.n	8002b76 <HAL_CAN_ActivateNotification+0x1e>
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d109      	bne.n	8002b8a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6959      	ldr	r1, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e006      	b.n	8002b98 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
  }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	@ 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07c      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f983 	bl	8002f12 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c0c:	e016      	b.n	8002c3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	e00c      	b.n	8002c3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	e002      	b.n	8002c3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f989 	bl	8002f4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f963 	bl	8002f26 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c60:	e016      	b.n	8002c90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e00c      	b.n	8002c90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c88:	e002      	b.n	8002c90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f969 	bl	8002f62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d024      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ca2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f943 	bl	8002f3a <HAL_CAN_TxMailbox2CompleteCallback>
 8002cb4:	e016      	b.n	8002ce4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc8:	e00c      	b.n	8002ce4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cdc:	e002      	b.n	8002ce4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f949 	bl	8002f76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2210      	movs	r2, #16
 8002d06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2208      	movs	r2, #8
 8002d22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f930 	bl	8002f8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fd fe70 	bl	8000a28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00c      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f912 	bl	8002fb2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8f9 	bl	8002f9e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8fc 	bl	8002fc6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2208      	movs	r2, #8
 8002de8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f8f5 	bl	8002fda <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d07b      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d072      	beq.n	8002eea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	f043 0302 	orr.w	r3, r3, #2
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d043      	beq.n	8002eea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03e      	beq.n	8002eea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e72:	2b60      	cmp	r3, #96	@ 0x60
 8002e74:	d02b      	beq.n	8002ece <HAL_CAN_IRQHandler+0x32a>
 8002e76:	2b60      	cmp	r3, #96	@ 0x60
 8002e78:	d82e      	bhi.n	8002ed8 <HAL_CAN_IRQHandler+0x334>
 8002e7a:	2b50      	cmp	r3, #80	@ 0x50
 8002e7c:	d022      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x320>
 8002e7e:	2b50      	cmp	r3, #80	@ 0x50
 8002e80:	d82a      	bhi.n	8002ed8 <HAL_CAN_IRQHandler+0x334>
 8002e82:	2b40      	cmp	r3, #64	@ 0x40
 8002e84:	d019      	beq.n	8002eba <HAL_CAN_IRQHandler+0x316>
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d826      	bhi.n	8002ed8 <HAL_CAN_IRQHandler+0x334>
 8002e8a:	2b30      	cmp	r3, #48	@ 0x30
 8002e8c:	d010      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x30c>
 8002e8e:	2b30      	cmp	r3, #48	@ 0x30
 8002e90:	d822      	bhi.n	8002ed8 <HAL_CAN_IRQHandler+0x334>
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d002      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x2f8>
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d005      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e9a:	e01d      	b.n	8002ed8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	f043 0308 	orr.w	r3, r3, #8
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ea4:	e019      	b.n	8002eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	f043 0310 	orr.w	r3, r3, #16
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eae:	e014      	b.n	8002eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	f043 0320 	orr.w	r3, r3, #32
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eb8:	e00f      	b.n	8002eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec2:	e00a      	b.n	8002eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ecc:	e005      	b.n	8002eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed6:	e000      	b.n	8002eda <HAL_CAN_IRQHandler+0x336>
            break;
 8002ed8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ee8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f872 	bl	8002fee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	@ 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800302c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003036:	4a04      	ldr	r2, [pc, #16]	@ (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	@ (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	@ (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	@ (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	@ 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	@ 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003170:	d301      	bcc.n	8003176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003172:	2301      	movs	r3, #1
 8003174:	e00f      	b.n	8003196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003176:	4a0a      	ldr	r2, [pc, #40]	@ (80031a0 <SysTick_Config+0x40>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317e:	210f      	movs	r1, #15
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f7ff ff8e 	bl	80030a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003188:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <SysTick_Config+0x40>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318e:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <SysTick_Config+0x40>)
 8003190:	2207      	movs	r2, #7
 8003192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	e000e010 	.word	0xe000e010

080031a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff29 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031cc:	f7ff ff3e 	bl	800304c <__NVIC_GetPriorityGrouping>
 80031d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff ff8e 	bl	80030f8 <NVIC_EncodePriority>
 80031dc:	4602      	mov	r2, r0
 80031de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff5d 	bl	80030a4 <__NVIC_SetPriority>
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff31 	bl	8003068 <__NVIC_EnableIRQ>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ffa2 	bl	8003160 <SysTick_Config>
 800321c:	4603      	mov	r3, r0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7fe fb12 	bl	800185c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e099      	b.n	8003378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003264:	e00f      	b.n	8003286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003266:	f7fe faf9 	bl	800185c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b05      	cmp	r3, #5
 8003272:	d908      	bls.n	8003286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e078      	b.n	8003378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e8      	bne.n	8003266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4b38      	ldr	r3, [pc, #224]	@ (8003380 <HAL_DMA_Init+0x158>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d107      	bne.n	80032f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	4313      	orrs	r3, r2
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	2b04      	cmp	r3, #4
 8003318:	d117      	bne.n	800334a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fadf 	bl	80038f0 <DMA_CheckFifoParam>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2240      	movs	r2, #64	@ 0x40
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003346:	2301      	movs	r3, #1
 8003348:	e016      	b.n	8003378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa96 	bl	8003884 <DMA_CalcBaseAndBitshift>
 8003358:	4603      	mov	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	223f      	movs	r2, #63	@ 0x3f
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	f010803f 	.word	0xf010803f

08003384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_DMA_Start_IT+0x26>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e040      	b.n	800342c <HAL_DMA_Start_IT+0xa8>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d12f      	bne.n	800341e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fa28 	bl	8003828 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	223f      	movs	r2, #63	@ 0x3f
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0216 	orr.w	r2, r2, #22
 80033f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e005      	b.n	800342a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003442:	f7fe fa0b 	bl	800185c <HAL_GetTick>
 8003446:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2280      	movs	r2, #128	@ 0x80
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e052      	b.n	800350c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0216 	bic.w	r2, r2, #22
 8003474:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003484:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_DMA_Abort+0x62>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0208 	bic.w	r2, r2, #8
 80034a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b6:	e013      	b.n	80034e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b8:	f7fe f9d0 	bl	800185c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d90c      	bls.n	80034e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e015      	b.n	800350c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e4      	bne.n	80034b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	223f      	movs	r2, #63	@ 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003520:	4b8e      	ldr	r3, [pc, #568]	@ (800375c <HAL_DMA_IRQHandler+0x248>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a8e      	ldr	r2, [pc, #568]	@ (8003760 <HAL_DMA_IRQHandler+0x24c>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353e:	2208      	movs	r2, #8
 8003540:	409a      	lsls	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01a      	beq.n	8003580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0204 	bic.w	r2, r2, #4
 8003566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	2208      	movs	r2, #8
 800356e:	409a      	lsls	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	2201      	movs	r2, #1
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	2201      	movs	r2, #1
 80035a4:	409a      	lsls	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ae:	f043 0202 	orr.w	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	2204      	movs	r2, #4
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d012      	beq.n	80035ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	2204      	movs	r2, #4
 80035da:	409a      	lsls	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e4:	f043 0204 	orr.w	r2, r3, #4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	2210      	movs	r2, #16
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d043      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d03c      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	2210      	movs	r2, #16
 8003610:	409a      	lsls	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d018      	beq.n	8003656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d024      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
 8003642:	e01f      	b.n	8003684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01b      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
 8003654:	e016      	b.n	8003684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0208 	bic.w	r2, r2, #8
 8003672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003688:	2220      	movs	r2, #32
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 808f 	beq.w	80037b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8087 	beq.w	80037b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	2220      	movs	r2, #32
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d136      	bne.n	800372c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0216 	bic.w	r2, r2, #22
 80036cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_DMA_IRQHandler+0x1da>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0208 	bic.w	r2, r2, #8
 80036fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003702:	223f      	movs	r2, #63	@ 0x3f
 8003704:	409a      	lsls	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371e:	2b00      	cmp	r3, #0
 8003720:	d07e      	beq.n	8003820 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
        }
        return;
 800372a:	e079      	b.n	8003820 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01d      	beq.n	8003776 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374c:	2b00      	cmp	r3, #0
 800374e:	d031      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e02c      	b.n	80037b4 <HAL_DMA_IRQHandler+0x2a0>
 800375a:	bf00      	nop
 800375c:	2000000c 	.word	0x2000000c
 8003760:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
 8003774:	e01e      	b.n	80037b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10f      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0210 	bic.w	r2, r2, #16
 8003792:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d032      	beq.n	8003822 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d022      	beq.n	800380e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2205      	movs	r2, #5
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	3301      	adds	r3, #1
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d307      	bcc.n	80037fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f2      	bne.n	80037e0 <HAL_DMA_IRQHandler+0x2cc>
 80037fa:	e000      	b.n	80037fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
 800381e:	e000      	b.n	8003822 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003820:	bf00      	nop
    }
  }
}
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003844:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b40      	cmp	r3, #64	@ 0x40
 8003854:	d108      	bne.n	8003868 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003866:	e007      	b.n	8003878 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3b10      	subs	r3, #16
 8003894:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800389e:	4a13      	ldr	r2, [pc, #76]	@ (80038ec <DMA_CalcBaseAndBitshift+0x68>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d909      	bls.n	80038c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	1d1a      	adds	r2, r3, #4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80038c4:	e007      	b.n	80038d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	aaaaaaab 	.word	0xaaaaaaab
 80038ec:	08006a80 	.word	0x08006a80

080038f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11f      	bne.n	800394a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d856      	bhi.n	80039be <DMA_CheckFifoParam+0xce>
 8003910:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <DMA_CheckFifoParam+0x28>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	08003929 	.word	0x08003929
 800391c:	0800393b 	.word	0x0800393b
 8003920:	08003929 	.word	0x08003929
 8003924:	080039bf 	.word	0x080039bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d046      	beq.n	80039c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003938:	e043      	b.n	80039c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003942:	d140      	bne.n	80039c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e03d      	b.n	80039c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003952:	d121      	bne.n	8003998 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d837      	bhi.n	80039ca <DMA_CheckFifoParam+0xda>
 800395a:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <DMA_CheckFifoParam+0x70>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003971 	.word	0x08003971
 8003964:	08003977 	.word	0x08003977
 8003968:	08003971 	.word	0x08003971
 800396c:	08003989 	.word	0x08003989
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e030      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d025      	beq.n	80039ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003986:	e022      	b.n	80039ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003990:	d11f      	bne.n	80039d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003996:	e01c      	b.n	80039d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d903      	bls.n	80039a6 <DMA_CheckFifoParam+0xb6>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d003      	beq.n	80039ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039a4:	e018      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      break;
 80039aa:	e015      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e00b      	b.n	80039d6 <DMA_CheckFifoParam+0xe6>
      break;
 80039be:	bf00      	nop
 80039c0:	e00a      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c2:	bf00      	nop
 80039c4:	e008      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
 80039c8:	e006      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
    }
  } 
  
  return status; 
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e16b      	b.n	8003cdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 815a 	bne.w	8003cd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d005      	beq.n	8003a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d130      	bne.n	8003a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0201 	and.w	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d017      	beq.n	8003ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d123      	bne.n	8003b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80b4 	beq.w	8003cd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b60      	ldr	r3, [pc, #384]	@ (8003cf4 <HAL_GPIO_Init+0x30c>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	4a5f      	ldr	r2, [pc, #380]	@ (8003cf4 <HAL_GPIO_Init+0x30c>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003cf4 <HAL_GPIO_Init+0x30c>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf8 <HAL_GPIO_Init+0x310>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a52      	ldr	r2, [pc, #328]	@ (8003cfc <HAL_GPIO_Init+0x314>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02b      	beq.n	8003c0e <HAL_GPIO_Init+0x226>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a51      	ldr	r2, [pc, #324]	@ (8003d00 <HAL_GPIO_Init+0x318>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d025      	beq.n	8003c0a <HAL_GPIO_Init+0x222>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a50      	ldr	r2, [pc, #320]	@ (8003d04 <HAL_GPIO_Init+0x31c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01f      	beq.n	8003c06 <HAL_GPIO_Init+0x21e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8003d08 <HAL_GPIO_Init+0x320>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d019      	beq.n	8003c02 <HAL_GPIO_Init+0x21a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4e      	ldr	r2, [pc, #312]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_GPIO_Init+0x216>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4d      	ldr	r2, [pc, #308]	@ (8003d10 <HAL_GPIO_Init+0x328>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00d      	beq.n	8003bfa <HAL_GPIO_Init+0x212>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4c      	ldr	r2, [pc, #304]	@ (8003d14 <HAL_GPIO_Init+0x32c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <HAL_GPIO_Init+0x20e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4b      	ldr	r2, [pc, #300]	@ (8003d18 <HAL_GPIO_Init+0x330>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_GPIO_Init+0x20a>
 8003bee:	2307      	movs	r3, #7
 8003bf0:	e00e      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	e00c      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003bf6:	2306      	movs	r3, #6
 8003bf8:	e00a      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003bfa:	2305      	movs	r3, #5
 8003bfc:	e008      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003bfe:	2304      	movs	r3, #4
 8003c00:	e006      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003c02:	2303      	movs	r3, #3
 8003c04:	e004      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e002      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_GPIO_Init+0x228>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	f002 0203 	and.w	r2, r2, #3
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	4093      	lsls	r3, r2
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c20:	4935      	ldr	r1, [pc, #212]	@ (8003cf8 <HAL_GPIO_Init+0x310>)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	3302      	adds	r3, #2
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c52:	4a32      	ldr	r2, [pc, #200]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c58:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c7c:	4a27      	ldr	r2, [pc, #156]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c82:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cd0:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	f67f ae90 	bls.w	8003a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020c00 	.word	0x40020c00
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40021400 	.word	0x40021400
 8003d14:	40021800 	.word	0x40021800
 8003d18:	40021c00 	.word	0x40021c00
 8003d1c:	40013c00 	.word	0x40013c00

08003d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e001      	b.n	8003d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d60:	787b      	ldrb	r3, [r7, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d6c:	e003      	b.n	8003d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	041a      	lsls	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	619a      	str	r2, [r3, #24]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e267      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d075      	beq.n	8003e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003da2:	4b88      	ldr	r3, [pc, #544]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d00c      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dae:	4b85      	ldr	r3, [pc, #532]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d112      	bne.n	8003de0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dba:	4b82      	ldr	r3, [pc, #520]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc6:	d10b      	bne.n	8003de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05b      	beq.n	8003e8c <HAL_RCC_OscConfig+0x108>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d157      	bne.n	8003e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e242      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de8:	d106      	bne.n	8003df8 <HAL_RCC_OscConfig+0x74>
 8003dea:	4b76      	ldr	r3, [pc, #472]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a75      	ldr	r2, [pc, #468]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e01d      	b.n	8003e34 <HAL_RCC_OscConfig+0xb0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x98>
 8003e02:	4b70      	ldr	r3, [pc, #448]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6f      	ldr	r2, [pc, #444]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a6c      	ldr	r2, [pc, #432]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0xb0>
 8003e1c:	4b69      	ldr	r3, [pc, #420]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a68      	ldr	r2, [pc, #416]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4b66      	ldr	r3, [pc, #408]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a65      	ldr	r2, [pc, #404]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fd0e 	bl	800185c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fd fd0a 	bl	800185c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	@ 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e207      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0xc0>
 8003e62:	e014      	b.n	8003e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fd fcfa 	bl	800185c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fcf6 	bl	800185c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	@ 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1f3      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7e:	4b51      	ldr	r3, [pc, #324]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0xe8>
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d063      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea6:	4b47      	ldr	r3, [pc, #284]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d11c      	bne.n	8003eec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb2:	4b44      	ldr	r3, [pc, #272]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d116      	bne.n	8003eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ebe:	4b41      	ldr	r3, [pc, #260]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x152>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e1c7      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4937      	ldr	r1, [pc, #220]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	e03a      	b.n	8003f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d020      	beq.n	8003f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef4:	4b34      	ldr	r3, [pc, #208]	@ (8003fc8 <HAL_RCC_OscConfig+0x244>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efa:	f7fd fcaf 	bl	800185c <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f02:	f7fd fcab 	bl	800185c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e1a8      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f14:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b28      	ldr	r3, [pc, #160]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4925      	ldr	r1, [pc, #148]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]
 8003f34:	e015      	b.n	8003f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f36:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <HAL_RCC_OscConfig+0x244>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fc8e 	bl	800185c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f44:	f7fd fc8a 	bl	800185c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e187      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f56:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d036      	beq.n	8003fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d016      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f76:	4b15      	ldr	r3, [pc, #84]	@ (8003fcc <HAL_RCC_OscConfig+0x248>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fd fc6e 	bl	800185c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fd fc6a 	bl	800185c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e167      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f96:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <HAL_RCC_OscConfig+0x240>)
 8003f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x200>
 8003fa2:	e01b      	b.n	8003fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa4:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_OscConfig+0x248>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003faa:	f7fd fc57 	bl	800185c <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	e00e      	b.n	8003fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fc53 	bl	800185c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d907      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e150      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	42470000 	.word	0x42470000
 8003fcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	4b88      	ldr	r3, [pc, #544]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ea      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8097 	beq.w	8004118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fee:	4b81      	ldr	r3, [pc, #516]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	4a7c      	ldr	r2, [pc, #496]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	@ 0x40
 800400a:	4b7a      	ldr	r3, [pc, #488]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401a:	4b77      	ldr	r3, [pc, #476]	@ (80041f8 <HAL_RCC_OscConfig+0x474>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d118      	bne.n	8004058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004026:	4b74      	ldr	r3, [pc, #464]	@ (80041f8 <HAL_RCC_OscConfig+0x474>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a73      	ldr	r2, [pc, #460]	@ (80041f8 <HAL_RCC_OscConfig+0x474>)
 800402c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004032:	f7fd fc13 	bl	800185c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403a:	f7fd fc0f 	bl	800185c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e10c      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	4b6a      	ldr	r3, [pc, #424]	@ (80041f8 <HAL_RCC_OscConfig+0x474>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x2ea>
 8004060:	4b64      	ldr	r3, [pc, #400]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004064:	4a63      	ldr	r2, [pc, #396]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6713      	str	r3, [r2, #112]	@ 0x70
 800406c:	e01c      	b.n	80040a8 <HAL_RCC_OscConfig+0x324>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b05      	cmp	r3, #5
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x30c>
 8004076:	4b5f      	ldr	r3, [pc, #380]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	4a5e      	ldr	r2, [pc, #376]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6713      	str	r3, [r2, #112]	@ 0x70
 8004082:	4b5c      	ldr	r3, [pc, #368]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	4a5b      	ldr	r2, [pc, #364]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6713      	str	r3, [r2, #112]	@ 0x70
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0x324>
 8004090:	4b58      	ldr	r3, [pc, #352]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	4a57      	ldr	r2, [pc, #348]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	@ 0x70
 800409c:	4b55      	ldr	r3, [pc, #340]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	4a54      	ldr	r2, [pc, #336]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 80040a2:	f023 0304 	bic.w	r3, r3, #4
 80040a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd fbd4 	bl	800185c <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7fd fbd0 	bl	800185c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e0cb      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	4b49      	ldr	r3, [pc, #292]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0ee      	beq.n	80040b8 <HAL_RCC_OscConfig+0x334>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040dc:	f7fd fbbe 	bl	800185c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fd fbba 	bl	800185c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e0b5      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fa:	4b3e      	ldr	r3, [pc, #248]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1ee      	bne.n	80040e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4b39      	ldr	r3, [pc, #228]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	4a38      	ldr	r2, [pc, #224]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004116:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80a1 	beq.w	8004264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004122:	4b34      	ldr	r3, [pc, #208]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b08      	cmp	r3, #8
 800412c:	d05c      	beq.n	80041e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d141      	bne.n	80041ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004136:	4b31      	ldr	r3, [pc, #196]	@ (80041fc <HAL_RCC_OscConfig+0x478>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fd fb8e 	bl	800185c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fd fb8a 	bl	800185c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e087      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	019b      	lsls	r3, r3, #6
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	3b01      	subs	r3, #1
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	491b      	ldr	r1, [pc, #108]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_RCC_OscConfig+0x478>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fd fb63 	bl	800185c <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419a:	f7fd fb5f 	bl	800185c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e05c      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x416>
 80041b8:	e054      	b.n	8004264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b10      	ldr	r3, [pc, #64]	@ (80041fc <HAL_RCC_OscConfig+0x478>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fd fb4c 	bl	800185c <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fd fb48 	bl	800185c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e045      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_RCC_OscConfig+0x470>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x444>
 80041e6:	e03d      	b.n	8004264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e038      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40007000 	.word	0x40007000
 80041fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004200:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <HAL_RCC_OscConfig+0x4ec>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d028      	beq.n	8004260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d121      	bne.n	8004260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d11a      	bne.n	8004260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004238:	4293      	cmp	r3, r2
 800423a:	d111      	bne.n	8004260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	3b01      	subs	r3, #1
 800424a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800

08004274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0cc      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004288:	4b68      	ldr	r3, [pc, #416]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d90c      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b65      	ldr	r3, [pc, #404]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b63      	ldr	r3, [pc, #396]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0b8      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c8:	4b59      	ldr	r3, [pc, #356]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a58      	ldr	r2, [pc, #352]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e0:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a52      	ldr	r2, [pc, #328]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ec:	4b50      	ldr	r3, [pc, #320]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	494d      	ldr	r1, [pc, #308]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d044      	beq.n	8004394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d119      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e07f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d003      	beq.n	8004332 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432e:	2b03      	cmp	r3, #3
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004332:	4b3f      	ldr	r3, [pc, #252]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e06f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e067      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004352:	4b37      	ldr	r3, [pc, #220]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f023 0203 	bic.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4934      	ldr	r1, [pc, #208]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004364:	f7fd fa7a 	bl	800185c <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	e00a      	b.n	8004382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fd fa76 	bl	800185c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e04f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 020c 	and.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	429a      	cmp	r2, r3
 8004392:	d1eb      	bne.n	800436c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d20c      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b22      	ldr	r3, [pc, #136]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e032      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4916      	ldr	r1, [pc, #88]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	490e      	ldr	r1, [pc, #56]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043fa:	f000 f821 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	490a      	ldr	r1, [pc, #40]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 800440c:	5ccb      	ldrb	r3, [r1, r3]
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	4a09      	ldr	r2, [pc, #36]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004416:	4b09      	ldr	r3, [pc, #36]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd f9da 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023c00 	.word	0x40023c00
 8004430:	40023800 	.word	0x40023800
 8004434:	08006a68 	.word	0x08006a68
 8004438:	2000000c 	.word	0x2000000c
 800443c:	20000010 	.word	0x20000010

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004444:	b090      	sub	sp, #64	@ 0x40
 8004446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004458:	4b59      	ldr	r3, [pc, #356]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b08      	cmp	r3, #8
 8004462:	d00d      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x40>
 8004464:	2b08      	cmp	r3, #8
 8004466:	f200 80a1 	bhi.w	80045ac <HAL_RCC_GetSysClockFreq+0x16c>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x34>
 800446e:	2b04      	cmp	r3, #4
 8004470:	d003      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0x3a>
 8004472:	e09b      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004474:	4b53      	ldr	r3, [pc, #332]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004478:	e09b      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800447a:	4b53      	ldr	r3, [pc, #332]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800447c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800447e:	e098      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004480:	4b4f      	ldr	r3, [pc, #316]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800448a:	4b4d      	ldr	r3, [pc, #308]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d028      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004496:	4b4a      	ldr	r3, [pc, #296]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	2200      	movs	r2, #0
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044a8:	2100      	movs	r1, #0
 80044aa:	4b47      	ldr	r3, [pc, #284]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80044ac:	fb03 f201 	mul.w	r2, r3, r1
 80044b0:	2300      	movs	r3, #0
 80044b2:	fb00 f303 	mul.w	r3, r0, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	4a43      	ldr	r2, [pc, #268]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80044ba:	fba0 1202 	umull	r1, r2, r0, r2
 80044be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c0:	460a      	mov	r2, r1
 80044c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c6:	4413      	add	r3, r2
 80044c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044cc:	2200      	movs	r2, #0
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	61fa      	str	r2, [r7, #28]
 80044d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80044da:	f7fb fed1 	bl	8000280 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4613      	mov	r3, r2
 80044e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e6:	e053      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e8:	4b35      	ldr	r3, [pc, #212]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	2200      	movs	r2, #0
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	617a      	str	r2, [r7, #20]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044fa:	f04f 0b00 	mov.w	fp, #0
 80044fe:	4652      	mov	r2, sl
 8004500:	465b      	mov	r3, fp
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	0159      	lsls	r1, r3, #5
 800450c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004510:	0150      	lsls	r0, r2, #5
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	ebb2 080a 	subs.w	r8, r2, sl
 800451a:	eb63 090b 	sbc.w	r9, r3, fp
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800452a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800452e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004532:	ebb2 0408 	subs.w	r4, r2, r8
 8004536:	eb63 0509 	sbc.w	r5, r3, r9
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	00eb      	lsls	r3, r5, #3
 8004544:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004548:	00e2      	lsls	r2, r4, #3
 800454a:	4614      	mov	r4, r2
 800454c:	461d      	mov	r5, r3
 800454e:	eb14 030a 	adds.w	r3, r4, sl
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	eb45 030b 	adc.w	r3, r5, fp
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004566:	4629      	mov	r1, r5
 8004568:	028b      	lsls	r3, r1, #10
 800456a:	4621      	mov	r1, r4
 800456c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004570:	4621      	mov	r1, r4
 8004572:	028a      	lsls	r2, r1, #10
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457a:	2200      	movs	r2, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	60fa      	str	r2, [r7, #12]
 8004580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004584:	f7fb fe7c 	bl	8000280 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4613      	mov	r3, r2
 800458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	3301      	adds	r3, #1
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3740      	adds	r7, #64	@ 0x40
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	017d7840 	.word	0x017d7840

080045cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d0:	4b03      	ldr	r3, [pc, #12]	@ (80045e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045e8:	f7ff fff0 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0a9b      	lsrs	r3, r3, #10
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	08006a78 	.word	0x08006a78

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004610:	f7ff ffdc 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b05      	ldr	r3, [pc, #20]	@ (800462c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0b5b      	lsrs	r3, r3, #13
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4903      	ldr	r1, [pc, #12]	@ (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	08006a78 	.word	0x08006a78

08004634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e041      	b.n	80046ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc ff28 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fbb2 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e046      	b.n	800477a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a23      	ldr	r2, [pc, #140]	@ (8004788 <HAL_TIM_Base_Start+0xb4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d022      	beq.n	8004744 <HAL_TIM_Base_Start+0x70>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004706:	d01d      	beq.n	8004744 <HAL_TIM_Base_Start+0x70>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_TIM_Base_Start+0xb8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d018      	beq.n	8004744 <HAL_TIM_Base_Start+0x70>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <HAL_TIM_Base_Start+0xbc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <HAL_TIM_Base_Start+0x70>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_TIM_Base_Start+0xc0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00e      	beq.n	8004744 <HAL_TIM_Base_Start+0x70>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1b      	ldr	r2, [pc, #108]	@ (8004798 <HAL_TIM_Base_Start+0xc4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d009      	beq.n	8004744 <HAL_TIM_Base_Start+0x70>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_TIM_Base_Start+0xc8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_TIM_Base_Start+0x70>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a18      	ldr	r2, [pc, #96]	@ (80047a0 <HAL_TIM_Base_Start+0xcc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d111      	bne.n	8004768 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b06      	cmp	r3, #6
 8004754:	d010      	beq.n	8004778 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004766:	e007      	b.n	8004778 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40001800 	.word	0x40001800

080047a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e041      	b.n	800483a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f839 	bl	8004842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f000 fafa 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_TIM_PWM_Start+0x24>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	bf14      	ite	ne
 8004874:	2301      	movne	r3, #1
 8004876:	2300      	moveq	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e022      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b04      	cmp	r3, #4
 8004880:	d109      	bne.n	8004896 <HAL_TIM_PWM_Start+0x3e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	bf14      	ite	ne
 800488e:	2301      	movne	r3, #1
 8004890:	2300      	moveq	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e015      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d109      	bne.n	80048b0 <HAL_TIM_PWM_Start+0x58>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e008      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07c      	b.n	80049c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0x82>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d8:	e013      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0x92>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xa2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	e003      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fd56 	bl	80053bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2d      	ldr	r2, [pc, #180]	@ (80049cc <HAL_TIM_PWM_Start+0x174>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_PWM_Start+0xcc>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <HAL_TIM_PWM_Start+0x178>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d101      	bne.n	8004928 <HAL_TIM_PWM_Start+0xd0>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_TIM_PWM_Start+0xd2>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <HAL_TIM_PWM_Start+0x174>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d01d      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1f      	ldr	r2, [pc, #124]	@ (80049d4 <HAL_TIM_PWM_Start+0x17c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1d      	ldr	r2, [pc, #116]	@ (80049d8 <HAL_TIM_PWM_Start+0x180>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_TIM_PWM_Start+0x184>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_TIM_PWM_Start+0x178>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <HAL_TIM_PWM_Start+0x188>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIM_PWM_Start+0x136>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <HAL_TIM_PWM_Start+0x18c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d111      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b06      	cmp	r3, #6
 800499e:	d010      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	e007      	b.n	80049c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010400 	.word	0x40010400
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40001800 	.word	0x40001800

080049e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fcde 	bl	80053bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac0 <HAL_TIM_PWM_Stop+0xd8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_PWM_Stop+0x2c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac4 <HAL_TIM_PWM_Stop+0xdc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_PWM_Stop+0x30>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_TIM_PWM_Stop+0x32>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a1a      	ldr	r2, [r3, #32]
 8004a24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <HAL_TIM_PWM_Stop+0x66>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_PWM_Stop+0x66>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <HAL_TIM_PWM_Stop+0x96>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_PWM_Stop+0x96>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Stop+0xa6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	e013      	b.n	8004ab6 <HAL_TIM_PWM_Stop+0xce>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Stop+0xb6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a9c:	e00b      	b.n	8004ab6 <HAL_TIM_PWM_Stop+0xce>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Stop+0xc6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aac:	e003      	b.n	8004ab6 <HAL_TIM_PWM_Stop+0xce>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40010400 	.word	0x40010400

08004ac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e0ae      	b.n	8004c44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	f200 809f 	bhi.w	8004c34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004af6:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004c35 	.word	0x08004c35
 8004b04:	08004c35 	.word	0x08004c35
 8004b08:	08004c35 	.word	0x08004c35
 8004b0c:	08004b71 	.word	0x08004b71
 8004b10:	08004c35 	.word	0x08004c35
 8004b14:	08004c35 	.word	0x08004c35
 8004b18:	08004c35 	.word	0x08004c35
 8004b1c:	08004bb3 	.word	0x08004bb3
 8004b20:	08004c35 	.word	0x08004c35
 8004b24:	08004c35 	.word	0x08004c35
 8004b28:	08004c35 	.word	0x08004c35
 8004b2c:	08004bf3 	.word	0x08004bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f9f6 	bl	8004f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6999      	ldr	r1, [r3, #24]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	619a      	str	r2, [r3, #24]
      break;
 8004b6e:	e064      	b.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa46 	bl	8005008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	619a      	str	r2, [r3, #24]
      break;
 8004bb0:	e043      	b.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fa9b 	bl	80050f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0208 	orr.w	r2, r2, #8
 8004bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0204 	bic.w	r2, r2, #4
 8004bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69d9      	ldr	r1, [r3, #28]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	61da      	str	r2, [r3, #28]
      break;
 8004bf0:	e023      	b.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 faef 	bl	80051dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	021a      	lsls	r2, r3, #8
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	61da      	str	r2, [r3, #28]
      break;
 8004c32:	e002      	b.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	75fb      	strb	r3, [r7, #23]
      break;
 8004c38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_TIM_ConfigClockSource+0x1c>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e0b4      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x186>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca0:	d03e      	beq.n	8004d20 <HAL_TIM_ConfigClockSource+0xd4>
 8004ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca6:	f200 8087 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cae:	f000 8086 	beq.w	8004dbe <HAL_TIM_ConfigClockSource+0x172>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	d87f      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b70      	cmp	r3, #112	@ 0x70
 8004cba:	d01a      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8004cbc:	2b70      	cmp	r3, #112	@ 0x70
 8004cbe:	d87b      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b60      	cmp	r3, #96	@ 0x60
 8004cc2:	d050      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x11a>
 8004cc4:	2b60      	cmp	r3, #96	@ 0x60
 8004cc6:	d877      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b50      	cmp	r3, #80	@ 0x50
 8004cca:	d03c      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0xfa>
 8004ccc:	2b50      	cmp	r3, #80	@ 0x50
 8004cce:	d873      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b40      	cmp	r3, #64	@ 0x40
 8004cd2:	d058      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x13a>
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d86f      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b30      	cmp	r3, #48	@ 0x30
 8004cda:	d064      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	2b30      	cmp	r3, #48	@ 0x30
 8004cde:	d86b      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d060      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d867      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05c      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d05a      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cf0:	e062      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d02:	f000 fb3b 	bl	800537c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	609a      	str	r2, [r3, #8]
      break;
 8004d1e:	e04f      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d30:	f000 fb24 	bl	800537c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d42:	609a      	str	r2, [r3, #8]
      break;
 8004d44:	e03c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 fa98 	bl	8005288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2150      	movs	r1, #80	@ 0x50
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 faf1 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e02c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 fab7 	bl	80052e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2160      	movs	r1, #96	@ 0x60
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fae1 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e01c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 fa78 	bl	8005288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2140      	movs	r1, #64	@ 0x40
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fad1 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 8004da4:	e00c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f000 fac8 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 8004db6:	e003      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a43      	ldr	r2, [pc, #268]	@ (8004efc <TIM_Base_SetConfig+0x120>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfa:	d00f      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a40      	ldr	r2, [pc, #256]	@ (8004f00 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3f      	ldr	r2, [pc, #252]	@ (8004f04 <TIM_Base_SetConfig+0x128>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3d      	ldr	r2, [pc, #244]	@ (8004f0c <TIM_Base_SetConfig+0x130>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a32      	ldr	r2, [pc, #200]	@ (8004efc <TIM_Base_SetConfig+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d02b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3c:	d027      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2f      	ldr	r2, [pc, #188]	@ (8004f00 <TIM_Base_SetConfig+0x124>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d023      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2e      	ldr	r2, [pc, #184]	@ (8004f04 <TIM_Base_SetConfig+0x128>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01f      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2d      	ldr	r2, [pc, #180]	@ (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	@ (8004f0c <TIM_Base_SetConfig+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d017      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <TIM_Base_SetConfig+0x134>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	@ (8004f14 <TIM_Base_SetConfig+0x138>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00f      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a29      	ldr	r2, [pc, #164]	@ (8004f18 <TIM_Base_SetConfig+0x13c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a28      	ldr	r2, [pc, #160]	@ (8004f1c <TIM_Base_SetConfig+0x140>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a27      	ldr	r2, [pc, #156]	@ (8004f20 <TIM_Base_SetConfig+0x144>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a26      	ldr	r2, [pc, #152]	@ (8004f24 <TIM_Base_SetConfig+0x148>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d108      	bne.n	8004ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8004efc <TIM_Base_SetConfig+0x120>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0xf2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a10      	ldr	r2, [pc, #64]	@ (8004f0c <TIM_Base_SetConfig+0x130>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d103      	bne.n	8004ed6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f043 0204 	orr.w	r2, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	601a      	str	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	40001c00 	.word	0x40001c00
 8004f24:	40002000 	.word	0x40002000

08004f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f023 0201 	bic.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 0302 	bic.w	r3, r3, #2
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a20      	ldr	r2, [pc, #128]	@ (8005000 <TIM_OC1_SetConfig+0xd8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC1_SetConfig+0x64>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1f      	ldr	r2, [pc, #124]	@ (8005004 <TIM_OC1_SetConfig+0xdc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <TIM_OC1_SetConfig+0xd8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC1_SetConfig+0x8e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a14      	ldr	r2, [pc, #80]	@ (8005004 <TIM_OC1_SetConfig+0xdc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d111      	bne.n	8004fda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	621a      	str	r2, [r3, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40010000 	.word	0x40010000
 8005004:	40010400 	.word	0x40010400

08005008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f023 0210 	bic.w	r2, r3, #16
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0320 	bic.w	r3, r3, #32
 8005052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a22      	ldr	r2, [pc, #136]	@ (80050ec <TIM_OC2_SetConfig+0xe4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC2_SetConfig+0x68>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a21      	ldr	r2, [pc, #132]	@ (80050f0 <TIM_OC2_SetConfig+0xe8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10d      	bne.n	800508c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <TIM_OC2_SetConfig+0xe4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC2_SetConfig+0x94>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a16      	ldr	r2, [pc, #88]	@ (80050f0 <TIM_OC2_SetConfig+0xe8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d113      	bne.n	80050c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40010400 	.word	0x40010400

080050f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800513c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a21      	ldr	r2, [pc, #132]	@ (80051d4 <TIM_OC3_SetConfig+0xe0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_OC3_SetConfig+0x66>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a20      	ldr	r2, [pc, #128]	@ (80051d8 <TIM_OC3_SetConfig+0xe4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10d      	bne.n	8005176 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a16      	ldr	r2, [pc, #88]	@ (80051d4 <TIM_OC3_SetConfig+0xe0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC3_SetConfig+0x92>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a15      	ldr	r2, [pc, #84]	@ (80051d8 <TIM_OC3_SetConfig+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d113      	bne.n	80051ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800518c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a12      	ldr	r2, [pc, #72]	@ (8005280 <TIM_OC4_SetConfig+0xa4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC4_SetConfig+0x68>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a11      	ldr	r2, [pc, #68]	@ (8005284 <TIM_OC4_SetConfig+0xa8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d109      	bne.n	8005258 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800524a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40010400 	.word	0x40010400

08005288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f023 0201 	bic.w	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f023 030a 	bic.w	r3, r3, #10
 80052c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	f023 0210 	bic.w	r2, r3, #16
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005322:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	f043 0307 	orr.w	r3, r3, #7
 8005368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	431a      	orrs	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	2201      	movs	r2, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	43db      	mvns	r3, r3
 80053de:	401a      	ands	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1a      	ldr	r2, [r3, #32]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800541c:	2302      	movs	r3, #2
 800541e:	e05a      	b.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a21      	ldr	r2, [pc, #132]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546c:	d01d      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1a      	ldr	r2, [pc, #104]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a18      	ldr	r2, [pc, #96]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a17      	ldr	r2, [pc, #92]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d10c      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40001800 	.word	0x40001800

08005500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc f834 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	@ 0x24
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f973 	bl	8005830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	@ 0x28
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d175      	bne.n	80056ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_UART_Transmit+0x2c>
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e06e      	b.n	80056ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2221      	movs	r2, #33	@ 0x21
 80055da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055de:	f7fc f93d 	bl	800185c <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f8:	d108      	bne.n	800560c <HAL_UART_Transmit+0x6c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e003      	b.n	8005614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005614:	e02e      	b.n	8005674 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	2180      	movs	r1, #128	@ 0x80
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f848 	bl	80056b6 <UART_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e03a      	b.n	80056ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800564c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	3302      	adds	r3, #2
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e007      	b.n	8005666 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3301      	adds	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1cb      	bne.n	8005616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	2140      	movs	r1, #64	@ 0x40
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f814 	bl	80056b6 <UART_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e006      	b.n	80056ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c6:	e03b      	b.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d037      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d0:	f7fc f8c4 	bl	800185c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e03a      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d023      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b80      	cmp	r3, #128	@ 0x80
 80056fc:	d020      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	d01d      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d116      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f81d 	bl	8005768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2208      	movs	r2, #8
 8005732:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e00f      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	429a      	cmp	r2, r3
 800575c:	d0b4      	beq.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b095      	sub	sp, #84	@ 0x54
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005790:	643a      	str	r2, [r7, #64]	@ 0x40
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3314      	adds	r3, #20
 80057aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d119      	bne.n	8005814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0310 	bic.w	r3, r3, #16
 80057f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005800:	61ba      	str	r2, [r7, #24]
 8005802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6979      	ldr	r1, [r7, #20]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	613b      	str	r3, [r7, #16]
   return(result);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005822:	bf00      	nop
 8005824:	3754      	adds	r7, #84	@ 0x54
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005834:	b0c0      	sub	sp, #256	@ 0x100
 8005836:	af00      	add	r7, sp, #0
 8005838:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	68d9      	ldr	r1, [r3, #12]
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	ea40 0301 	orr.w	r3, r0, r1
 8005858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	431a      	orrs	r2, r3
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	431a      	orrs	r2, r3
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005888:	f021 010c 	bic.w	r1, r1, #12
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005896:	430b      	orrs	r3, r1
 8005898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	6999      	ldr	r1, [r3, #24]
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	ea40 0301 	orr.w	r3, r0, r1
 80058b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b8f      	ldr	r3, [pc, #572]	@ (8005afc <UART_SetConfig+0x2cc>)
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d005      	beq.n	80058d0 <UART_SetConfig+0xa0>
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005b00 <UART_SetConfig+0x2d0>)
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d104      	bne.n	80058da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058d0:	f7fe fe9c 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 80058d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058d8:	e003      	b.n	80058e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058da:	f7fe fe83 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 80058de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ec:	f040 810c 	bne.w	8005b08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005902:	4622      	mov	r2, r4
 8005904:	462b      	mov	r3, r5
 8005906:	1891      	adds	r1, r2, r2
 8005908:	65b9      	str	r1, [r7, #88]	@ 0x58
 800590a:	415b      	adcs	r3, r3
 800590c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800590e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005912:	4621      	mov	r1, r4
 8005914:	eb12 0801 	adds.w	r8, r2, r1
 8005918:	4629      	mov	r1, r5
 800591a:	eb43 0901 	adc.w	r9, r3, r1
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800592a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800592e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005932:	4690      	mov	r8, r2
 8005934:	4699      	mov	r9, r3
 8005936:	4623      	mov	r3, r4
 8005938:	eb18 0303 	adds.w	r3, r8, r3
 800593c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005940:	462b      	mov	r3, r5
 8005942:	eb49 0303 	adc.w	r3, r9, r3
 8005946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005956:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800595a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800595e:	460b      	mov	r3, r1
 8005960:	18db      	adds	r3, r3, r3
 8005962:	653b      	str	r3, [r7, #80]	@ 0x50
 8005964:	4613      	mov	r3, r2
 8005966:	eb42 0303 	adc.w	r3, r2, r3
 800596a:	657b      	str	r3, [r7, #84]	@ 0x54
 800596c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005974:	f7fa fc84 	bl	8000280 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b61      	ldr	r3, [pc, #388]	@ (8005b04 <UART_SetConfig+0x2d4>)
 800597e:	fba3 2302 	umull	r2, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	011c      	lsls	r4, r3, #4
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005990:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005994:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	1891      	adds	r1, r2, r2
 800599e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059a0:	415b      	adcs	r3, r3
 80059a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059a8:	4641      	mov	r1, r8
 80059aa:	eb12 0a01 	adds.w	sl, r2, r1
 80059ae:	4649      	mov	r1, r9
 80059b0:	eb43 0b01 	adc.w	fp, r3, r1
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c8:	4692      	mov	sl, r2
 80059ca:	469b      	mov	fp, r3
 80059cc:	4643      	mov	r3, r8
 80059ce:	eb1a 0303 	adds.w	r3, sl, r3
 80059d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059d6:	464b      	mov	r3, r9
 80059d8:	eb4b 0303 	adc.w	r3, fp, r3
 80059dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059f4:	460b      	mov	r3, r1
 80059f6:	18db      	adds	r3, r3, r3
 80059f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059fa:	4613      	mov	r3, r2
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a0a:	f7fa fc39 	bl	8000280 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	4b3b      	ldr	r3, [pc, #236]	@ (8005b04 <UART_SetConfig+0x2d4>)
 8005a16:	fba3 2301 	umull	r2, r3, r3, r1
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2264      	movs	r2, #100	@ 0x64
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	1acb      	subs	r3, r1, r3
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a2a:	4b36      	ldr	r3, [pc, #216]	@ (8005b04 <UART_SetConfig+0x2d4>)
 8005a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a38:	441c      	add	r4, r3
 8005a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	1891      	adds	r1, r2, r2
 8005a52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a54:	415b      	adcs	r3, r3
 8005a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	1851      	adds	r1, r2, r1
 8005a60:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a62:	4649      	mov	r1, r9
 8005a64:	414b      	adcs	r3, r1
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a74:	4659      	mov	r1, fp
 8005a76:	00cb      	lsls	r3, r1, #3
 8005a78:	4651      	mov	r1, sl
 8005a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7e:	4651      	mov	r1, sl
 8005a80:	00ca      	lsls	r2, r1, #3
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	4642      	mov	r2, r8
 8005a8a:	189b      	adds	r3, r3, r2
 8005a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a90:	464b      	mov	r3, r9
 8005a92:	460a      	mov	r2, r1
 8005a94:	eb42 0303 	adc.w	r3, r2, r3
 8005a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005aac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	18db      	adds	r3, r3, r3
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ac2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ac6:	f7fa fbdb 	bl	8000280 <__aeabi_uldivmod>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <UART_SetConfig+0x2d4>)
 8005ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	2164      	movs	r1, #100	@ 0x64
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	3332      	adds	r3, #50	@ 0x32
 8005ae2:	4a08      	ldr	r2, [pc, #32]	@ (8005b04 <UART_SetConfig+0x2d4>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	f003 0207 	and.w	r2, r3, #7
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4422      	add	r2, r4
 8005af6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005af8:	e106      	b.n	8005d08 <UART_SetConfig+0x4d8>
 8005afa:	bf00      	nop
 8005afc:	40011000 	.word	0x40011000
 8005b00:	40011400 	.word	0x40011400
 8005b04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	1891      	adds	r1, r2, r2
 8005b20:	6239      	str	r1, [r7, #32]
 8005b22:	415b      	adcs	r3, r3
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	1854      	adds	r4, r2, r1
 8005b2e:	4649      	mov	r1, r9
 8005b30:	eb43 0501 	adc.w	r5, r3, r1
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	00eb      	lsls	r3, r5, #3
 8005b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b42:	00e2      	lsls	r2, r4, #3
 8005b44:	4614      	mov	r4, r2
 8005b46:	461d      	mov	r5, r3
 8005b48:	4643      	mov	r3, r8
 8005b4a:	18e3      	adds	r3, r4, r3
 8005b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b50:	464b      	mov	r3, r9
 8005b52:	eb45 0303 	adc.w	r3, r5, r3
 8005b56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b76:	4629      	mov	r1, r5
 8005b78:	008b      	lsls	r3, r1, #2
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b80:	4621      	mov	r1, r4
 8005b82:	008a      	lsls	r2, r1, #2
 8005b84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b88:	f7fa fb7a 	bl	8000280 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4b60      	ldr	r3, [pc, #384]	@ (8005d14 <UART_SetConfig+0x4e4>)
 8005b92:	fba3 2302 	umull	r2, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	011c      	lsls	r4, r3, #4
 8005b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ba4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ba8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bac:	4642      	mov	r2, r8
 8005bae:	464b      	mov	r3, r9
 8005bb0:	1891      	adds	r1, r2, r2
 8005bb2:	61b9      	str	r1, [r7, #24]
 8005bb4:	415b      	adcs	r3, r3
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	1851      	adds	r1, r2, r1
 8005bc0:	6139      	str	r1, [r7, #16]
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	414b      	adcs	r3, r1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	00cb      	lsls	r3, r1, #3
 8005bd8:	4651      	mov	r1, sl
 8005bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bde:	4651      	mov	r1, sl
 8005be0:	00ca      	lsls	r2, r1, #3
 8005be2:	4610      	mov	r0, r2
 8005be4:	4619      	mov	r1, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	4642      	mov	r2, r8
 8005bea:	189b      	adds	r3, r3, r2
 8005bec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	460a      	mov	r2, r1
 8005bf4:	eb42 0303 	adc.w	r3, r2, r3
 8005bf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c14:	4649      	mov	r1, r9
 8005c16:	008b      	lsls	r3, r1, #2
 8005c18:	4641      	mov	r1, r8
 8005c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1e:	4641      	mov	r1, r8
 8005c20:	008a      	lsls	r2, r1, #2
 8005c22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c26:	f7fa fb2b 	bl	8000280 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4b38      	ldr	r3, [pc, #224]	@ (8005d14 <UART_SetConfig+0x4e4>)
 8005c32:	fba3 2301 	umull	r2, r3, r3, r1
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2264      	movs	r2, #100	@ 0x64
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	1acb      	subs	r3, r1, r3
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	3332      	adds	r3, #50	@ 0x32
 8005c44:	4a33      	ldr	r2, [pc, #204]	@ (8005d14 <UART_SetConfig+0x4e4>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c50:	441c      	add	r4, r3
 8005c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c56:	2200      	movs	r2, #0
 8005c58:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	1891      	adds	r1, r2, r2
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	415b      	adcs	r3, r3
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c70:	4641      	mov	r1, r8
 8005c72:	1851      	adds	r1, r2, r1
 8005c74:	6039      	str	r1, [r7, #0]
 8005c76:	4649      	mov	r1, r9
 8005c78:	414b      	adcs	r3, r1
 8005c7a:	607b      	str	r3, [r7, #4]
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c88:	4659      	mov	r1, fp
 8005c8a:	00cb      	lsls	r3, r1, #3
 8005c8c:	4651      	mov	r1, sl
 8005c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c92:	4651      	mov	r1, sl
 8005c94:	00ca      	lsls	r2, r1, #3
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	189b      	adds	r3, r3, r2
 8005ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	eb42 0303 	adc.w	r3, r2, r3
 8005caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	008b      	lsls	r3, r1, #2
 8005cc8:	4641      	mov	r1, r8
 8005cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cce:	4641      	mov	r1, r8
 8005cd0:	008a      	lsls	r2, r1, #2
 8005cd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cd6:	f7fa fad3 	bl	8000280 <__aeabi_uldivmod>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <UART_SetConfig+0x4e4>)
 8005ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	2164      	movs	r1, #100	@ 0x64
 8005ce8:	fb01 f303 	mul.w	r3, r1, r3
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	3332      	adds	r3, #50	@ 0x32
 8005cf2:	4a08      	ldr	r2, [pc, #32]	@ (8005d14 <UART_SetConfig+0x4e4>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	f003 020f 	and.w	r2, r3, #15
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4422      	add	r2, r4
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d14:	51eb851f 	.word	0x51eb851f

08005d18 <sniprintf>:
 8005d18:	b40c      	push	{r2, r3}
 8005d1a:	b530      	push	{r4, r5, lr}
 8005d1c:	4b18      	ldr	r3, [pc, #96]	@ (8005d80 <sniprintf+0x68>)
 8005d1e:	1e0c      	subs	r4, r1, #0
 8005d20:	681d      	ldr	r5, [r3, #0]
 8005d22:	b09d      	sub	sp, #116	@ 0x74
 8005d24:	da08      	bge.n	8005d38 <sniprintf+0x20>
 8005d26:	238b      	movs	r3, #139	@ 0x8b
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2e:	b01d      	add	sp, #116	@ 0x74
 8005d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d34:	b002      	add	sp, #8
 8005d36:	4770      	bx	lr
 8005d38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d46:	bf14      	ite	ne
 8005d48:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d4c:	4623      	moveq	r3, r4
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	9307      	str	r3, [sp, #28]
 8005d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d56:	9002      	str	r0, [sp, #8]
 8005d58:	9006      	str	r0, [sp, #24]
 8005d5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d60:	ab21      	add	r3, sp, #132	@ 0x84
 8005d62:	a902      	add	r1, sp, #8
 8005d64:	4628      	mov	r0, r5
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f000 f994 	bl	8006094 <_svfiprintf_r>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	bfbc      	itt	lt
 8005d70:	238b      	movlt	r3, #139	@ 0x8b
 8005d72:	602b      	strlt	r3, [r5, #0]
 8005d74:	2c00      	cmp	r4, #0
 8005d76:	d0da      	beq.n	8005d2e <sniprintf+0x16>
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e7d6      	b.n	8005d2e <sniprintf+0x16>
 8005d80:	20000018 	.word	0x20000018

08005d84 <memset>:
 8005d84:	4402      	add	r2, r0
 8005d86:	4603      	mov	r3, r0
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d100      	bne.n	8005d8e <memset+0xa>
 8005d8c:	4770      	bx	lr
 8005d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d92:	e7f9      	b.n	8005d88 <memset+0x4>

08005d94 <__errno>:
 8005d94:	4b01      	ldr	r3, [pc, #4]	@ (8005d9c <__errno+0x8>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000018 	.word	0x20000018

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4d0d      	ldr	r5, [pc, #52]	@ (8005dd8 <__libc_init_array+0x38>)
 8005da4:	4c0d      	ldr	r4, [pc, #52]	@ (8005ddc <__libc_init_array+0x3c>)
 8005da6:	1b64      	subs	r4, r4, r5
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	2600      	movs	r6, #0
 8005dac:	42a6      	cmp	r6, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	4d0b      	ldr	r5, [pc, #44]	@ (8005de0 <__libc_init_array+0x40>)
 8005db2:	4c0c      	ldr	r4, [pc, #48]	@ (8005de4 <__libc_init_array+0x44>)
 8005db4:	f000 fe38 	bl	8006a28 <_init>
 8005db8:	1b64      	subs	r4, r4, r5
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	42a6      	cmp	r6, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc8:	4798      	blx	r3
 8005dca:	3601      	adds	r6, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd2:	4798      	blx	r3
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	08006ac4 	.word	0x08006ac4
 8005ddc:	08006ac4 	.word	0x08006ac4
 8005de0:	08006ac4 	.word	0x08006ac4
 8005de4:	08006ac8 	.word	0x08006ac8

08005de8 <__retarget_lock_acquire_recursive>:
 8005de8:	4770      	bx	lr

08005dea <__retarget_lock_release_recursive>:
 8005dea:	4770      	bx	lr

08005dec <_free_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4605      	mov	r5, r0
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d041      	beq.n	8005e78 <_free_r+0x8c>
 8005df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df8:	1f0c      	subs	r4, r1, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bfb8      	it	lt
 8005dfe:	18e4      	addlt	r4, r4, r3
 8005e00:	f000 f8e0 	bl	8005fc4 <__malloc_lock>
 8005e04:	4a1d      	ldr	r2, [pc, #116]	@ (8005e7c <_free_r+0x90>)
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	b933      	cbnz	r3, 8005e18 <_free_r+0x2c>
 8005e0a:	6063      	str	r3, [r4, #4]
 8005e0c:	6014      	str	r4, [r2, #0]
 8005e0e:	4628      	mov	r0, r5
 8005e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e14:	f000 b8dc 	b.w	8005fd0 <__malloc_unlock>
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	d908      	bls.n	8005e2e <_free_r+0x42>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	1821      	adds	r1, r4, r0
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf01      	itttt	eq
 8005e24:	6819      	ldreq	r1, [r3, #0]
 8005e26:	685b      	ldreq	r3, [r3, #4]
 8005e28:	1809      	addeq	r1, r1, r0
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	e7ed      	b.n	8005e0a <_free_r+0x1e>
 8005e2e:	461a      	mov	r2, r3
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	b10b      	cbz	r3, 8005e38 <_free_r+0x4c>
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d9fa      	bls.n	8005e2e <_free_r+0x42>
 8005e38:	6811      	ldr	r1, [r2, #0]
 8005e3a:	1850      	adds	r0, r2, r1
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d10b      	bne.n	8005e58 <_free_r+0x6c>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	4401      	add	r1, r0
 8005e44:	1850      	adds	r0, r2, r1
 8005e46:	4283      	cmp	r3, r0
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	d1e0      	bne.n	8005e0e <_free_r+0x22>
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	6053      	str	r3, [r2, #4]
 8005e52:	4408      	add	r0, r1
 8005e54:	6010      	str	r0, [r2, #0]
 8005e56:	e7da      	b.n	8005e0e <_free_r+0x22>
 8005e58:	d902      	bls.n	8005e60 <_free_r+0x74>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	e7d6      	b.n	8005e0e <_free_r+0x22>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	1821      	adds	r1, r4, r0
 8005e64:	428b      	cmp	r3, r1
 8005e66:	bf04      	itt	eq
 8005e68:	6819      	ldreq	r1, [r3, #0]
 8005e6a:	685b      	ldreq	r3, [r3, #4]
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	bf04      	itt	eq
 8005e70:	1809      	addeq	r1, r1, r0
 8005e72:	6021      	streq	r1, [r4, #0]
 8005e74:	6054      	str	r4, [r2, #4]
 8005e76:	e7ca      	b.n	8005e0e <_free_r+0x22>
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
 8005e7a:	bf00      	nop
 8005e7c:	200003f0 	.word	0x200003f0

08005e80 <sbrk_aligned>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	4e0f      	ldr	r6, [pc, #60]	@ (8005ec0 <sbrk_aligned+0x40>)
 8005e84:	460c      	mov	r4, r1
 8005e86:	6831      	ldr	r1, [r6, #0]
 8005e88:	4605      	mov	r5, r0
 8005e8a:	b911      	cbnz	r1, 8005e92 <sbrk_aligned+0x12>
 8005e8c:	f000 fba4 	bl	80065d8 <_sbrk_r>
 8005e90:	6030      	str	r0, [r6, #0]
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 fb9f 	bl	80065d8 <_sbrk_r>
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	d103      	bne.n	8005ea6 <sbrk_aligned+0x26>
 8005e9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	1cc4      	adds	r4, r0, #3
 8005ea8:	f024 0403 	bic.w	r4, r4, #3
 8005eac:	42a0      	cmp	r0, r4
 8005eae:	d0f8      	beq.n	8005ea2 <sbrk_aligned+0x22>
 8005eb0:	1a21      	subs	r1, r4, r0
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f000 fb90 	bl	80065d8 <_sbrk_r>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d1f2      	bne.n	8005ea2 <sbrk_aligned+0x22>
 8005ebc:	e7ef      	b.n	8005e9e <sbrk_aligned+0x1e>
 8005ebe:	bf00      	nop
 8005ec0:	200003ec 	.word	0x200003ec

08005ec4 <_malloc_r>:
 8005ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	1ccd      	adds	r5, r1, #3
 8005eca:	f025 0503 	bic.w	r5, r5, #3
 8005ece:	3508      	adds	r5, #8
 8005ed0:	2d0c      	cmp	r5, #12
 8005ed2:	bf38      	it	cc
 8005ed4:	250c      	movcc	r5, #12
 8005ed6:	2d00      	cmp	r5, #0
 8005ed8:	4606      	mov	r6, r0
 8005eda:	db01      	blt.n	8005ee0 <_malloc_r+0x1c>
 8005edc:	42a9      	cmp	r1, r5
 8005ede:	d904      	bls.n	8005eea <_malloc_r+0x26>
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	6033      	str	r3, [r6, #0]
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fc0 <_malloc_r+0xfc>
 8005eee:	f000 f869 	bl	8005fc4 <__malloc_lock>
 8005ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef6:	461c      	mov	r4, r3
 8005ef8:	bb44      	cbnz	r4, 8005f4c <_malloc_r+0x88>
 8005efa:	4629      	mov	r1, r5
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff ffbf 	bl	8005e80 <sbrk_aligned>
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	4604      	mov	r4, r0
 8005f06:	d158      	bne.n	8005fba <_malloc_r+0xf6>
 8005f08:	f8d8 4000 	ldr.w	r4, [r8]
 8005f0c:	4627      	mov	r7, r4
 8005f0e:	2f00      	cmp	r7, #0
 8005f10:	d143      	bne.n	8005f9a <_malloc_r+0xd6>
 8005f12:	2c00      	cmp	r4, #0
 8005f14:	d04b      	beq.n	8005fae <_malloc_r+0xea>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	4639      	mov	r1, r7
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	eb04 0903 	add.w	r9, r4, r3
 8005f20:	f000 fb5a 	bl	80065d8 <_sbrk_r>
 8005f24:	4581      	cmp	r9, r0
 8005f26:	d142      	bne.n	8005fae <_malloc_r+0xea>
 8005f28:	6821      	ldr	r1, [r4, #0]
 8005f2a:	1a6d      	subs	r5, r5, r1
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7ff ffa6 	bl	8005e80 <sbrk_aligned>
 8005f34:	3001      	adds	r0, #1
 8005f36:	d03a      	beq.n	8005fae <_malloc_r+0xea>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	442b      	add	r3, r5
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	bb62      	cbnz	r2, 8005fa0 <_malloc_r+0xdc>
 8005f46:	f8c8 7000 	str.w	r7, [r8]
 8005f4a:	e00f      	b.n	8005f6c <_malloc_r+0xa8>
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	1b52      	subs	r2, r2, r5
 8005f50:	d420      	bmi.n	8005f94 <_malloc_r+0xd0>
 8005f52:	2a0b      	cmp	r2, #11
 8005f54:	d917      	bls.n	8005f86 <_malloc_r+0xc2>
 8005f56:	1961      	adds	r1, r4, r5
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	6025      	str	r5, [r4, #0]
 8005f5c:	bf18      	it	ne
 8005f5e:	6059      	strne	r1, [r3, #4]
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	bf08      	it	eq
 8005f64:	f8c8 1000 	streq.w	r1, [r8]
 8005f68:	5162      	str	r2, [r4, r5]
 8005f6a:	604b      	str	r3, [r1, #4]
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f000 f82f 	bl	8005fd0 <__malloc_unlock>
 8005f72:	f104 000b 	add.w	r0, r4, #11
 8005f76:	1d23      	adds	r3, r4, #4
 8005f78:	f020 0007 	bic.w	r0, r0, #7
 8005f7c:	1ac2      	subs	r2, r0, r3
 8005f7e:	bf1c      	itt	ne
 8005f80:	1a1b      	subne	r3, r3, r0
 8005f82:	50a3      	strne	r3, [r4, r2]
 8005f84:	e7af      	b.n	8005ee6 <_malloc_r+0x22>
 8005f86:	6862      	ldr	r2, [r4, #4]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	bf0c      	ite	eq
 8005f8c:	f8c8 2000 	streq.w	r2, [r8]
 8005f90:	605a      	strne	r2, [r3, #4]
 8005f92:	e7eb      	b.n	8005f6c <_malloc_r+0xa8>
 8005f94:	4623      	mov	r3, r4
 8005f96:	6864      	ldr	r4, [r4, #4]
 8005f98:	e7ae      	b.n	8005ef8 <_malloc_r+0x34>
 8005f9a:	463c      	mov	r4, r7
 8005f9c:	687f      	ldr	r7, [r7, #4]
 8005f9e:	e7b6      	b.n	8005f0e <_malloc_r+0x4a>
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	d1fb      	bne.n	8005fa0 <_malloc_r+0xdc>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6053      	str	r3, [r2, #4]
 8005fac:	e7de      	b.n	8005f6c <_malloc_r+0xa8>
 8005fae:	230c      	movs	r3, #12
 8005fb0:	6033      	str	r3, [r6, #0]
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 f80c 	bl	8005fd0 <__malloc_unlock>
 8005fb8:	e794      	b.n	8005ee4 <_malloc_r+0x20>
 8005fba:	6005      	str	r5, [r0, #0]
 8005fbc:	e7d6      	b.n	8005f6c <_malloc_r+0xa8>
 8005fbe:	bf00      	nop
 8005fc0:	200003f0 	.word	0x200003f0

08005fc4 <__malloc_lock>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	@ (8005fcc <__malloc_lock+0x8>)
 8005fc6:	f7ff bf0f 	b.w	8005de8 <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	200003e8 	.word	0x200003e8

08005fd0 <__malloc_unlock>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	@ (8005fd8 <__malloc_unlock+0x8>)
 8005fd2:	f7ff bf0a 	b.w	8005dea <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	200003e8 	.word	0x200003e8

08005fdc <__ssputs_r>:
 8005fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	688e      	ldr	r6, [r1, #8]
 8005fe2:	461f      	mov	r7, r3
 8005fe4:	42be      	cmp	r6, r7
 8005fe6:	680b      	ldr	r3, [r1, #0]
 8005fe8:	4682      	mov	sl, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	4690      	mov	r8, r2
 8005fee:	d82d      	bhi.n	800604c <__ssputs_r+0x70>
 8005ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ff4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ff8:	d026      	beq.n	8006048 <__ssputs_r+0x6c>
 8005ffa:	6965      	ldr	r5, [r4, #20]
 8005ffc:	6909      	ldr	r1, [r1, #16]
 8005ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006002:	eba3 0901 	sub.w	r9, r3, r1
 8006006:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800600a:	1c7b      	adds	r3, r7, #1
 800600c:	444b      	add	r3, r9
 800600e:	106d      	asrs	r5, r5, #1
 8006010:	429d      	cmp	r5, r3
 8006012:	bf38      	it	cc
 8006014:	461d      	movcc	r5, r3
 8006016:	0553      	lsls	r3, r2, #21
 8006018:	d527      	bpl.n	800606a <__ssputs_r+0x8e>
 800601a:	4629      	mov	r1, r5
 800601c:	f7ff ff52 	bl	8005ec4 <_malloc_r>
 8006020:	4606      	mov	r6, r0
 8006022:	b360      	cbz	r0, 800607e <__ssputs_r+0xa2>
 8006024:	6921      	ldr	r1, [r4, #16]
 8006026:	464a      	mov	r2, r9
 8006028:	f000 fae6 	bl	80065f8 <memcpy>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	6126      	str	r6, [r4, #16]
 800603a:	6165      	str	r5, [r4, #20]
 800603c:	444e      	add	r6, r9
 800603e:	eba5 0509 	sub.w	r5, r5, r9
 8006042:	6026      	str	r6, [r4, #0]
 8006044:	60a5      	str	r5, [r4, #8]
 8006046:	463e      	mov	r6, r7
 8006048:	42be      	cmp	r6, r7
 800604a:	d900      	bls.n	800604e <__ssputs_r+0x72>
 800604c:	463e      	mov	r6, r7
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	4632      	mov	r2, r6
 8006052:	4641      	mov	r1, r8
 8006054:	f000 faa6 	bl	80065a4 <memmove>
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	1b9b      	subs	r3, r3, r6
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4433      	add	r3, r6
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	2000      	movs	r0, #0
 8006066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606a:	462a      	mov	r2, r5
 800606c:	f000 fad2 	bl	8006614 <_realloc_r>
 8006070:	4606      	mov	r6, r0
 8006072:	2800      	cmp	r0, #0
 8006074:	d1e0      	bne.n	8006038 <__ssputs_r+0x5c>
 8006076:	6921      	ldr	r1, [r4, #16]
 8006078:	4650      	mov	r0, sl
 800607a:	f7ff feb7 	bl	8005dec <_free_r>
 800607e:	230c      	movs	r3, #12
 8006080:	f8ca 3000 	str.w	r3, [sl]
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	e7e9      	b.n	8006066 <__ssputs_r+0x8a>
	...

08006094 <_svfiprintf_r>:
 8006094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006098:	4698      	mov	r8, r3
 800609a:	898b      	ldrh	r3, [r1, #12]
 800609c:	061b      	lsls	r3, r3, #24
 800609e:	b09d      	sub	sp, #116	@ 0x74
 80060a0:	4607      	mov	r7, r0
 80060a2:	460d      	mov	r5, r1
 80060a4:	4614      	mov	r4, r2
 80060a6:	d510      	bpl.n	80060ca <_svfiprintf_r+0x36>
 80060a8:	690b      	ldr	r3, [r1, #16]
 80060aa:	b973      	cbnz	r3, 80060ca <_svfiprintf_r+0x36>
 80060ac:	2140      	movs	r1, #64	@ 0x40
 80060ae:	f7ff ff09 	bl	8005ec4 <_malloc_r>
 80060b2:	6028      	str	r0, [r5, #0]
 80060b4:	6128      	str	r0, [r5, #16]
 80060b6:	b930      	cbnz	r0, 80060c6 <_svfiprintf_r+0x32>
 80060b8:	230c      	movs	r3, #12
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	b01d      	add	sp, #116	@ 0x74
 80060c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c6:	2340      	movs	r3, #64	@ 0x40
 80060c8:	616b      	str	r3, [r5, #20]
 80060ca:	2300      	movs	r3, #0
 80060cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ce:	2320      	movs	r3, #32
 80060d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060d8:	2330      	movs	r3, #48	@ 0x30
 80060da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006278 <_svfiprintf_r+0x1e4>
 80060de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060e2:	f04f 0901 	mov.w	r9, #1
 80060e6:	4623      	mov	r3, r4
 80060e8:	469a      	mov	sl, r3
 80060ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ee:	b10a      	cbz	r2, 80060f4 <_svfiprintf_r+0x60>
 80060f0:	2a25      	cmp	r2, #37	@ 0x25
 80060f2:	d1f9      	bne.n	80060e8 <_svfiprintf_r+0x54>
 80060f4:	ebba 0b04 	subs.w	fp, sl, r4
 80060f8:	d00b      	beq.n	8006112 <_svfiprintf_r+0x7e>
 80060fa:	465b      	mov	r3, fp
 80060fc:	4622      	mov	r2, r4
 80060fe:	4629      	mov	r1, r5
 8006100:	4638      	mov	r0, r7
 8006102:	f7ff ff6b 	bl	8005fdc <__ssputs_r>
 8006106:	3001      	adds	r0, #1
 8006108:	f000 80a7 	beq.w	800625a <_svfiprintf_r+0x1c6>
 800610c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800610e:	445a      	add	r2, fp
 8006110:	9209      	str	r2, [sp, #36]	@ 0x24
 8006112:	f89a 3000 	ldrb.w	r3, [sl]
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 809f 	beq.w	800625a <_svfiprintf_r+0x1c6>
 800611c:	2300      	movs	r3, #0
 800611e:	f04f 32ff 	mov.w	r2, #4294967295
 8006122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006126:	f10a 0a01 	add.w	sl, sl, #1
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	9307      	str	r3, [sp, #28]
 800612e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006132:	931a      	str	r3, [sp, #104]	@ 0x68
 8006134:	4654      	mov	r4, sl
 8006136:	2205      	movs	r2, #5
 8006138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800613c:	484e      	ldr	r0, [pc, #312]	@ (8006278 <_svfiprintf_r+0x1e4>)
 800613e:	f7fa f84f 	bl	80001e0 <memchr>
 8006142:	9a04      	ldr	r2, [sp, #16]
 8006144:	b9d8      	cbnz	r0, 800617e <_svfiprintf_r+0xea>
 8006146:	06d0      	lsls	r0, r2, #27
 8006148:	bf44      	itt	mi
 800614a:	2320      	movmi	r3, #32
 800614c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006150:	0711      	lsls	r1, r2, #28
 8006152:	bf44      	itt	mi
 8006154:	232b      	movmi	r3, #43	@ 0x2b
 8006156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800615a:	f89a 3000 	ldrb.w	r3, [sl]
 800615e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006160:	d015      	beq.n	800618e <_svfiprintf_r+0xfa>
 8006162:	9a07      	ldr	r2, [sp, #28]
 8006164:	4654      	mov	r4, sl
 8006166:	2000      	movs	r0, #0
 8006168:	f04f 0c0a 	mov.w	ip, #10
 800616c:	4621      	mov	r1, r4
 800616e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006172:	3b30      	subs	r3, #48	@ 0x30
 8006174:	2b09      	cmp	r3, #9
 8006176:	d94b      	bls.n	8006210 <_svfiprintf_r+0x17c>
 8006178:	b1b0      	cbz	r0, 80061a8 <_svfiprintf_r+0x114>
 800617a:	9207      	str	r2, [sp, #28]
 800617c:	e014      	b.n	80061a8 <_svfiprintf_r+0x114>
 800617e:	eba0 0308 	sub.w	r3, r0, r8
 8006182:	fa09 f303 	lsl.w	r3, r9, r3
 8006186:	4313      	orrs	r3, r2
 8006188:	9304      	str	r3, [sp, #16]
 800618a:	46a2      	mov	sl, r4
 800618c:	e7d2      	b.n	8006134 <_svfiprintf_r+0xa0>
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	1d19      	adds	r1, r3, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	9103      	str	r1, [sp, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	bfbb      	ittet	lt
 800619a:	425b      	neglt	r3, r3
 800619c:	f042 0202 	orrlt.w	r2, r2, #2
 80061a0:	9307      	strge	r3, [sp, #28]
 80061a2:	9307      	strlt	r3, [sp, #28]
 80061a4:	bfb8      	it	lt
 80061a6:	9204      	strlt	r2, [sp, #16]
 80061a8:	7823      	ldrb	r3, [r4, #0]
 80061aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ac:	d10a      	bne.n	80061c4 <_svfiprintf_r+0x130>
 80061ae:	7863      	ldrb	r3, [r4, #1]
 80061b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061b2:	d132      	bne.n	800621a <_svfiprintf_r+0x186>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	1d1a      	adds	r2, r3, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	9203      	str	r2, [sp, #12]
 80061bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061c0:	3402      	adds	r4, #2
 80061c2:	9305      	str	r3, [sp, #20]
 80061c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006288 <_svfiprintf_r+0x1f4>
 80061c8:	7821      	ldrb	r1, [r4, #0]
 80061ca:	2203      	movs	r2, #3
 80061cc:	4650      	mov	r0, sl
 80061ce:	f7fa f807 	bl	80001e0 <memchr>
 80061d2:	b138      	cbz	r0, 80061e4 <_svfiprintf_r+0x150>
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	eba0 000a 	sub.w	r0, r0, sl
 80061da:	2240      	movs	r2, #64	@ 0x40
 80061dc:	4082      	lsls	r2, r0
 80061de:	4313      	orrs	r3, r2
 80061e0:	3401      	adds	r4, #1
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e8:	4824      	ldr	r0, [pc, #144]	@ (800627c <_svfiprintf_r+0x1e8>)
 80061ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061ee:	2206      	movs	r2, #6
 80061f0:	f7f9 fff6 	bl	80001e0 <memchr>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d036      	beq.n	8006266 <_svfiprintf_r+0x1d2>
 80061f8:	4b21      	ldr	r3, [pc, #132]	@ (8006280 <_svfiprintf_r+0x1ec>)
 80061fa:	bb1b      	cbnz	r3, 8006244 <_svfiprintf_r+0x1b0>
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	3307      	adds	r3, #7
 8006200:	f023 0307 	bic.w	r3, r3, #7
 8006204:	3308      	adds	r3, #8
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800620a:	4433      	add	r3, r6
 800620c:	9309      	str	r3, [sp, #36]	@ 0x24
 800620e:	e76a      	b.n	80060e6 <_svfiprintf_r+0x52>
 8006210:	fb0c 3202 	mla	r2, ip, r2, r3
 8006214:	460c      	mov	r4, r1
 8006216:	2001      	movs	r0, #1
 8006218:	e7a8      	b.n	800616c <_svfiprintf_r+0xd8>
 800621a:	2300      	movs	r3, #0
 800621c:	3401      	adds	r4, #1
 800621e:	9305      	str	r3, [sp, #20]
 8006220:	4619      	mov	r1, r3
 8006222:	f04f 0c0a 	mov.w	ip, #10
 8006226:	4620      	mov	r0, r4
 8006228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800622c:	3a30      	subs	r2, #48	@ 0x30
 800622e:	2a09      	cmp	r2, #9
 8006230:	d903      	bls.n	800623a <_svfiprintf_r+0x1a6>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0c6      	beq.n	80061c4 <_svfiprintf_r+0x130>
 8006236:	9105      	str	r1, [sp, #20]
 8006238:	e7c4      	b.n	80061c4 <_svfiprintf_r+0x130>
 800623a:	fb0c 2101 	mla	r1, ip, r1, r2
 800623e:	4604      	mov	r4, r0
 8006240:	2301      	movs	r3, #1
 8006242:	e7f0      	b.n	8006226 <_svfiprintf_r+0x192>
 8006244:	ab03      	add	r3, sp, #12
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	462a      	mov	r2, r5
 800624a:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <_svfiprintf_r+0x1f0>)
 800624c:	a904      	add	r1, sp, #16
 800624e:	4638      	mov	r0, r7
 8006250:	f3af 8000 	nop.w
 8006254:	1c42      	adds	r2, r0, #1
 8006256:	4606      	mov	r6, r0
 8006258:	d1d6      	bne.n	8006208 <_svfiprintf_r+0x174>
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	065b      	lsls	r3, r3, #25
 800625e:	f53f af2d 	bmi.w	80060bc <_svfiprintf_r+0x28>
 8006262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006264:	e72c      	b.n	80060c0 <_svfiprintf_r+0x2c>
 8006266:	ab03      	add	r3, sp, #12
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	462a      	mov	r2, r5
 800626c:	4b05      	ldr	r3, [pc, #20]	@ (8006284 <_svfiprintf_r+0x1f0>)
 800626e:	a904      	add	r1, sp, #16
 8006270:	4638      	mov	r0, r7
 8006272:	f000 f879 	bl	8006368 <_printf_i>
 8006276:	e7ed      	b.n	8006254 <_svfiprintf_r+0x1c0>
 8006278:	08006a88 	.word	0x08006a88
 800627c:	08006a92 	.word	0x08006a92
 8006280:	00000000 	.word	0x00000000
 8006284:	08005fdd 	.word	0x08005fdd
 8006288:	08006a8e 	.word	0x08006a8e

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4698      	mov	r8, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800629c:	4293      	cmp	r3, r2
 800629e:	bfb8      	it	lt
 80062a0:	4613      	movlt	r3, r2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062a8:	4607      	mov	r7, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc26      	bgt.n	8006322 <_printf_common+0x96>
 80062d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	3b00      	subs	r3, #0
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d42b      	bmi.n	800633c <_printf_common+0xb0>
 80062e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062e8:	4641      	mov	r1, r8
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c8      	blx	r9
 80062ee:	3001      	adds	r0, #1
 80062f0:	d01e      	beq.n	8006330 <_printf_common+0xa4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf02      	ittt	eq
 80062fe:	68e5      	ldreq	r5, [r4, #12]
 8006300:	6833      	ldreq	r3, [r6, #0]
 8006302:	1aed      	subeq	r5, r5, r3
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	bf0c      	ite	eq
 8006308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800630c:	2500      	movne	r5, #0
 800630e:	4293      	cmp	r3, r2
 8006310:	bfc4      	itt	gt
 8006312:	1a9b      	subgt	r3, r3, r2
 8006314:	18ed      	addgt	r5, r5, r3
 8006316:	2600      	movs	r6, #0
 8006318:	341a      	adds	r4, #26
 800631a:	42b5      	cmp	r5, r6
 800631c:	d11a      	bne.n	8006354 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e008      	b.n	8006334 <_printf_common+0xa8>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4641      	mov	r1, r8
 8006328:	4638      	mov	r0, r7
 800632a:	47c8      	blx	r9
 800632c:	3001      	adds	r0, #1
 800632e:	d103      	bne.n	8006338 <_printf_common+0xac>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	3501      	adds	r5, #1
 800633a:	e7c6      	b.n	80062ca <_printf_common+0x3e>
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	2030      	movs	r0, #48	@ 0x30
 8006342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006346:	4422      	add	r2, r4
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006350:	3302      	adds	r3, #2
 8006352:	e7c7      	b.n	80062e4 <_printf_common+0x58>
 8006354:	2301      	movs	r3, #1
 8006356:	4622      	mov	r2, r4
 8006358:	4641      	mov	r1, r8
 800635a:	4638      	mov	r0, r7
 800635c:	47c8      	blx	r9
 800635e:	3001      	adds	r0, #1
 8006360:	d0e6      	beq.n	8006330 <_printf_common+0xa4>
 8006362:	3601      	adds	r6, #1
 8006364:	e7d9      	b.n	800631a <_printf_common+0x8e>
	...

08006368 <_printf_i>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	7e0f      	ldrb	r7, [r1, #24]
 800636e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006370:	2f78      	cmp	r7, #120	@ 0x78
 8006372:	4691      	mov	r9, r2
 8006374:	4680      	mov	r8, r0
 8006376:	460c      	mov	r4, r1
 8006378:	469a      	mov	sl, r3
 800637a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800637e:	d807      	bhi.n	8006390 <_printf_i+0x28>
 8006380:	2f62      	cmp	r7, #98	@ 0x62
 8006382:	d80a      	bhi.n	800639a <_printf_i+0x32>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f000 80d1 	beq.w	800652c <_printf_i+0x1c4>
 800638a:	2f58      	cmp	r7, #88	@ 0x58
 800638c:	f000 80b8 	beq.w	8006500 <_printf_i+0x198>
 8006390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006398:	e03a      	b.n	8006410 <_printf_i+0xa8>
 800639a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800639e:	2b15      	cmp	r3, #21
 80063a0:	d8f6      	bhi.n	8006390 <_printf_i+0x28>
 80063a2:	a101      	add	r1, pc, #4	@ (adr r1, 80063a8 <_printf_i+0x40>)
 80063a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006391 	.word	0x08006391
 80063b4:	08006391 	.word	0x08006391
 80063b8:	08006391 	.word	0x08006391
 80063bc:	08006391 	.word	0x08006391
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006391 	.word	0x08006391
 80063c8:	08006391 	.word	0x08006391
 80063cc:	08006391 	.word	0x08006391
 80063d0:	08006391 	.word	0x08006391
 80063d4:	08006513 	.word	0x08006513
 80063d8:	0800643f 	.word	0x0800643f
 80063dc:	080064cd 	.word	0x080064cd
 80063e0:	08006391 	.word	0x08006391
 80063e4:	08006391 	.word	0x08006391
 80063e8:	08006535 	.word	0x08006535
 80063ec:	08006391 	.word	0x08006391
 80063f0:	0800643f 	.word	0x0800643f
 80063f4:	08006391 	.word	0x08006391
 80063f8:	08006391 	.word	0x08006391
 80063fc:	080064d5 	.word	0x080064d5
 8006400:	6833      	ldr	r3, [r6, #0]
 8006402:	1d1a      	adds	r2, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6032      	str	r2, [r6, #0]
 8006408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e09c      	b.n	800654e <_printf_i+0x1e6>
 8006414:	6833      	ldr	r3, [r6, #0]
 8006416:	6820      	ldr	r0, [r4, #0]
 8006418:	1d19      	adds	r1, r3, #4
 800641a:	6031      	str	r1, [r6, #0]
 800641c:	0606      	lsls	r6, r0, #24
 800641e:	d501      	bpl.n	8006424 <_printf_i+0xbc>
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	e003      	b.n	800642c <_printf_i+0xc4>
 8006424:	0645      	lsls	r5, r0, #25
 8006426:	d5fb      	bpl.n	8006420 <_printf_i+0xb8>
 8006428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800642c:	2d00      	cmp	r5, #0
 800642e:	da03      	bge.n	8006438 <_printf_i+0xd0>
 8006430:	232d      	movs	r3, #45	@ 0x2d
 8006432:	426d      	negs	r5, r5
 8006434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006438:	4858      	ldr	r0, [pc, #352]	@ (800659c <_printf_i+0x234>)
 800643a:	230a      	movs	r3, #10
 800643c:	e011      	b.n	8006462 <_printf_i+0xfa>
 800643e:	6821      	ldr	r1, [r4, #0]
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	0608      	lsls	r0, r1, #24
 8006444:	f853 5b04 	ldr.w	r5, [r3], #4
 8006448:	d402      	bmi.n	8006450 <_printf_i+0xe8>
 800644a:	0649      	lsls	r1, r1, #25
 800644c:	bf48      	it	mi
 800644e:	b2ad      	uxthmi	r5, r5
 8006450:	2f6f      	cmp	r7, #111	@ 0x6f
 8006452:	4852      	ldr	r0, [pc, #328]	@ (800659c <_printf_i+0x234>)
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	bf14      	ite	ne
 8006458:	230a      	movne	r3, #10
 800645a:	2308      	moveq	r3, #8
 800645c:	2100      	movs	r1, #0
 800645e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006462:	6866      	ldr	r6, [r4, #4]
 8006464:	60a6      	str	r6, [r4, #8]
 8006466:	2e00      	cmp	r6, #0
 8006468:	db05      	blt.n	8006476 <_printf_i+0x10e>
 800646a:	6821      	ldr	r1, [r4, #0]
 800646c:	432e      	orrs	r6, r5
 800646e:	f021 0104 	bic.w	r1, r1, #4
 8006472:	6021      	str	r1, [r4, #0]
 8006474:	d04b      	beq.n	800650e <_printf_i+0x1a6>
 8006476:	4616      	mov	r6, r2
 8006478:	fbb5 f1f3 	udiv	r1, r5, r3
 800647c:	fb03 5711 	mls	r7, r3, r1, r5
 8006480:	5dc7      	ldrb	r7, [r0, r7]
 8006482:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006486:	462f      	mov	r7, r5
 8006488:	42bb      	cmp	r3, r7
 800648a:	460d      	mov	r5, r1
 800648c:	d9f4      	bls.n	8006478 <_printf_i+0x110>
 800648e:	2b08      	cmp	r3, #8
 8006490:	d10b      	bne.n	80064aa <_printf_i+0x142>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	07df      	lsls	r7, r3, #31
 8006496:	d508      	bpl.n	80064aa <_printf_i+0x142>
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	6861      	ldr	r1, [r4, #4]
 800649c:	4299      	cmp	r1, r3
 800649e:	bfde      	ittt	le
 80064a0:	2330      	movle	r3, #48	@ 0x30
 80064a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064aa:	1b92      	subs	r2, r2, r6
 80064ac:	6122      	str	r2, [r4, #16]
 80064ae:	f8cd a000 	str.w	sl, [sp]
 80064b2:	464b      	mov	r3, r9
 80064b4:	aa03      	add	r2, sp, #12
 80064b6:	4621      	mov	r1, r4
 80064b8:	4640      	mov	r0, r8
 80064ba:	f7ff fee7 	bl	800628c <_printf_common>
 80064be:	3001      	adds	r0, #1
 80064c0:	d14a      	bne.n	8006558 <_printf_i+0x1f0>
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	b004      	add	sp, #16
 80064c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	f043 0320 	orr.w	r3, r3, #32
 80064d2:	6023      	str	r3, [r4, #0]
 80064d4:	4832      	ldr	r0, [pc, #200]	@ (80065a0 <_printf_i+0x238>)
 80064d6:	2778      	movs	r7, #120	@ 0x78
 80064d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	6831      	ldr	r1, [r6, #0]
 80064e0:	061f      	lsls	r7, r3, #24
 80064e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80064e6:	d402      	bmi.n	80064ee <_printf_i+0x186>
 80064e8:	065f      	lsls	r7, r3, #25
 80064ea:	bf48      	it	mi
 80064ec:	b2ad      	uxthmi	r5, r5
 80064ee:	6031      	str	r1, [r6, #0]
 80064f0:	07d9      	lsls	r1, r3, #31
 80064f2:	bf44      	itt	mi
 80064f4:	f043 0320 	orrmi.w	r3, r3, #32
 80064f8:	6023      	strmi	r3, [r4, #0]
 80064fa:	b11d      	cbz	r5, 8006504 <_printf_i+0x19c>
 80064fc:	2310      	movs	r3, #16
 80064fe:	e7ad      	b.n	800645c <_printf_i+0xf4>
 8006500:	4826      	ldr	r0, [pc, #152]	@ (800659c <_printf_i+0x234>)
 8006502:	e7e9      	b.n	80064d8 <_printf_i+0x170>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f023 0320 	bic.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	e7f6      	b.n	80064fc <_printf_i+0x194>
 800650e:	4616      	mov	r6, r2
 8006510:	e7bd      	b.n	800648e <_printf_i+0x126>
 8006512:	6833      	ldr	r3, [r6, #0]
 8006514:	6825      	ldr	r5, [r4, #0]
 8006516:	6961      	ldr	r1, [r4, #20]
 8006518:	1d18      	adds	r0, r3, #4
 800651a:	6030      	str	r0, [r6, #0]
 800651c:	062e      	lsls	r6, r5, #24
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	d501      	bpl.n	8006526 <_printf_i+0x1be>
 8006522:	6019      	str	r1, [r3, #0]
 8006524:	e002      	b.n	800652c <_printf_i+0x1c4>
 8006526:	0668      	lsls	r0, r5, #25
 8006528:	d5fb      	bpl.n	8006522 <_printf_i+0x1ba>
 800652a:	8019      	strh	r1, [r3, #0]
 800652c:	2300      	movs	r3, #0
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	4616      	mov	r6, r2
 8006532:	e7bc      	b.n	80064ae <_printf_i+0x146>
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	6032      	str	r2, [r6, #0]
 800653a:	681e      	ldr	r6, [r3, #0]
 800653c:	6862      	ldr	r2, [r4, #4]
 800653e:	2100      	movs	r1, #0
 8006540:	4630      	mov	r0, r6
 8006542:	f7f9 fe4d 	bl	80001e0 <memchr>
 8006546:	b108      	cbz	r0, 800654c <_printf_i+0x1e4>
 8006548:	1b80      	subs	r0, r0, r6
 800654a:	6060      	str	r0, [r4, #4]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	2300      	movs	r3, #0
 8006552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006556:	e7aa      	b.n	80064ae <_printf_i+0x146>
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	4632      	mov	r2, r6
 800655c:	4649      	mov	r1, r9
 800655e:	4640      	mov	r0, r8
 8006560:	47d0      	blx	sl
 8006562:	3001      	adds	r0, #1
 8006564:	d0ad      	beq.n	80064c2 <_printf_i+0x15a>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	079b      	lsls	r3, r3, #30
 800656a:	d413      	bmi.n	8006594 <_printf_i+0x22c>
 800656c:	68e0      	ldr	r0, [r4, #12]
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	4298      	cmp	r0, r3
 8006572:	bfb8      	it	lt
 8006574:	4618      	movlt	r0, r3
 8006576:	e7a6      	b.n	80064c6 <_printf_i+0x15e>
 8006578:	2301      	movs	r3, #1
 800657a:	4632      	mov	r2, r6
 800657c:	4649      	mov	r1, r9
 800657e:	4640      	mov	r0, r8
 8006580:	47d0      	blx	sl
 8006582:	3001      	adds	r0, #1
 8006584:	d09d      	beq.n	80064c2 <_printf_i+0x15a>
 8006586:	3501      	adds	r5, #1
 8006588:	68e3      	ldr	r3, [r4, #12]
 800658a:	9903      	ldr	r1, [sp, #12]
 800658c:	1a5b      	subs	r3, r3, r1
 800658e:	42ab      	cmp	r3, r5
 8006590:	dcf2      	bgt.n	8006578 <_printf_i+0x210>
 8006592:	e7eb      	b.n	800656c <_printf_i+0x204>
 8006594:	2500      	movs	r5, #0
 8006596:	f104 0619 	add.w	r6, r4, #25
 800659a:	e7f5      	b.n	8006588 <_printf_i+0x220>
 800659c:	08006a99 	.word	0x08006a99
 80065a0:	08006aaa 	.word	0x08006aaa

080065a4 <memmove>:
 80065a4:	4288      	cmp	r0, r1
 80065a6:	b510      	push	{r4, lr}
 80065a8:	eb01 0402 	add.w	r4, r1, r2
 80065ac:	d902      	bls.n	80065b4 <memmove+0x10>
 80065ae:	4284      	cmp	r4, r0
 80065b0:	4623      	mov	r3, r4
 80065b2:	d807      	bhi.n	80065c4 <memmove+0x20>
 80065b4:	1e43      	subs	r3, r0, #1
 80065b6:	42a1      	cmp	r1, r4
 80065b8:	d008      	beq.n	80065cc <memmove+0x28>
 80065ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065c2:	e7f8      	b.n	80065b6 <memmove+0x12>
 80065c4:	4402      	add	r2, r0
 80065c6:	4601      	mov	r1, r0
 80065c8:	428a      	cmp	r2, r1
 80065ca:	d100      	bne.n	80065ce <memmove+0x2a>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065d6:	e7f7      	b.n	80065c8 <memmove+0x24>

080065d8 <_sbrk_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d06      	ldr	r5, [pc, #24]	@ (80065f4 <_sbrk_r+0x1c>)
 80065dc:	2300      	movs	r3, #0
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	f7fb f862 	bl	80016ac <_sbrk>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_sbrk_r+0x1a>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_sbrk_r+0x1a>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	200003e4 	.word	0x200003e4

080065f8 <memcpy>:
 80065f8:	440a      	add	r2, r1
 80065fa:	4291      	cmp	r1, r2
 80065fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006600:	d100      	bne.n	8006604 <memcpy+0xc>
 8006602:	4770      	bx	lr
 8006604:	b510      	push	{r4, lr}
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800660e:	4291      	cmp	r1, r2
 8006610:	d1f9      	bne.n	8006606 <memcpy+0xe>
 8006612:	bd10      	pop	{r4, pc}

08006614 <_realloc_r>:
 8006614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006618:	4607      	mov	r7, r0
 800661a:	4614      	mov	r4, r2
 800661c:	460d      	mov	r5, r1
 800661e:	b921      	cbnz	r1, 800662a <_realloc_r+0x16>
 8006620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006624:	4611      	mov	r1, r2
 8006626:	f7ff bc4d 	b.w	8005ec4 <_malloc_r>
 800662a:	b92a      	cbnz	r2, 8006638 <_realloc_r+0x24>
 800662c:	f7ff fbde 	bl	8005dec <_free_r>
 8006630:	4625      	mov	r5, r4
 8006632:	4628      	mov	r0, r5
 8006634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006638:	f000 f81a 	bl	8006670 <_malloc_usable_size_r>
 800663c:	4284      	cmp	r4, r0
 800663e:	4606      	mov	r6, r0
 8006640:	d802      	bhi.n	8006648 <_realloc_r+0x34>
 8006642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006646:	d8f4      	bhi.n	8006632 <_realloc_r+0x1e>
 8006648:	4621      	mov	r1, r4
 800664a:	4638      	mov	r0, r7
 800664c:	f7ff fc3a 	bl	8005ec4 <_malloc_r>
 8006650:	4680      	mov	r8, r0
 8006652:	b908      	cbnz	r0, 8006658 <_realloc_r+0x44>
 8006654:	4645      	mov	r5, r8
 8006656:	e7ec      	b.n	8006632 <_realloc_r+0x1e>
 8006658:	42b4      	cmp	r4, r6
 800665a:	4622      	mov	r2, r4
 800665c:	4629      	mov	r1, r5
 800665e:	bf28      	it	cs
 8006660:	4632      	movcs	r2, r6
 8006662:	f7ff ffc9 	bl	80065f8 <memcpy>
 8006666:	4629      	mov	r1, r5
 8006668:	4638      	mov	r0, r7
 800666a:	f7ff fbbf 	bl	8005dec <_free_r>
 800666e:	e7f1      	b.n	8006654 <_realloc_r+0x40>

08006670 <_malloc_usable_size_r>:
 8006670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006674:	1f18      	subs	r0, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	bfbc      	itt	lt
 800667a:	580b      	ldrlt	r3, [r1, r0]
 800667c:	18c0      	addlt	r0, r0, r3
 800667e:	4770      	bx	lr

08006680 <log10f>:
 8006680:	b508      	push	{r3, lr}
 8006682:	ed2d 8b02 	vpush	{d8}
 8006686:	eeb0 8a40 	vmov.f32	s16, s0
 800668a:	f000 f883 	bl	8006794 <__ieee754_log10f>
 800668e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006696:	d60f      	bvs.n	80066b8 <log10f+0x38>
 8006698:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a0:	d80a      	bhi.n	80066b8 <log10f+0x38>
 80066a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80066a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066aa:	d108      	bne.n	80066be <log10f+0x3e>
 80066ac:	f7ff fb72 	bl	8005d94 <__errno>
 80066b0:	2322      	movs	r3, #34	@ 0x22
 80066b2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80066d4 <log10f+0x54>
 80066b6:	6003      	str	r3, [r0, #0]
 80066b8:	ecbd 8b02 	vpop	{d8}
 80066bc:	bd08      	pop	{r3, pc}
 80066be:	f7ff fb69 	bl	8005d94 <__errno>
 80066c2:	ecbd 8b02 	vpop	{d8}
 80066c6:	2321      	movs	r3, #33	@ 0x21
 80066c8:	6003      	str	r3, [r0, #0]
 80066ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066ce:	4802      	ldr	r0, [pc, #8]	@ (80066d8 <log10f+0x58>)
 80066d0:	f000 b804 	b.w	80066dc <nanf>
 80066d4:	ff800000 	.word	0xff800000
 80066d8:	08006a8d 	.word	0x08006a8d

080066dc <nanf>:
 80066dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80066e4 <nanf+0x8>
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	7fc00000 	.word	0x7fc00000

080066e8 <fmaxf>:
 80066e8:	b508      	push	{r3, lr}
 80066ea:	ed2d 8b02 	vpush	{d8}
 80066ee:	eeb0 8a40 	vmov.f32	s16, s0
 80066f2:	eef0 8a60 	vmov.f32	s17, s1
 80066f6:	f000 f831 	bl	800675c <__fpclassifyf>
 80066fa:	b930      	cbnz	r0, 800670a <fmaxf+0x22>
 80066fc:	eeb0 8a68 	vmov.f32	s16, s17
 8006700:	eeb0 0a48 	vmov.f32	s0, s16
 8006704:	ecbd 8b02 	vpop	{d8}
 8006708:	bd08      	pop	{r3, pc}
 800670a:	eeb0 0a68 	vmov.f32	s0, s17
 800670e:	f000 f825 	bl	800675c <__fpclassifyf>
 8006712:	2800      	cmp	r0, #0
 8006714:	d0f4      	beq.n	8006700 <fmaxf+0x18>
 8006716:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671e:	dded      	ble.n	80066fc <fmaxf+0x14>
 8006720:	e7ee      	b.n	8006700 <fmaxf+0x18>

08006722 <fminf>:
 8006722:	b508      	push	{r3, lr}
 8006724:	ed2d 8b02 	vpush	{d8}
 8006728:	eeb0 8a40 	vmov.f32	s16, s0
 800672c:	eef0 8a60 	vmov.f32	s17, s1
 8006730:	f000 f814 	bl	800675c <__fpclassifyf>
 8006734:	b930      	cbnz	r0, 8006744 <fminf+0x22>
 8006736:	eeb0 8a68 	vmov.f32	s16, s17
 800673a:	eeb0 0a48 	vmov.f32	s0, s16
 800673e:	ecbd 8b02 	vpop	{d8}
 8006742:	bd08      	pop	{r3, pc}
 8006744:	eeb0 0a68 	vmov.f32	s0, s17
 8006748:	f000 f808 	bl	800675c <__fpclassifyf>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0f4      	beq.n	800673a <fminf+0x18>
 8006750:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006758:	d5ed      	bpl.n	8006736 <fminf+0x14>
 800675a:	e7ee      	b.n	800673a <fminf+0x18>

0800675c <__fpclassifyf>:
 800675c:	ee10 3a10 	vmov	r3, s0
 8006760:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8006764:	d00d      	beq.n	8006782 <__fpclassifyf+0x26>
 8006766:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800676a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800676e:	d30a      	bcc.n	8006786 <__fpclassifyf+0x2a>
 8006770:	4b07      	ldr	r3, [pc, #28]	@ (8006790 <__fpclassifyf+0x34>)
 8006772:	1e42      	subs	r2, r0, #1
 8006774:	429a      	cmp	r2, r3
 8006776:	d908      	bls.n	800678a <__fpclassifyf+0x2e>
 8006778:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800677c:	4258      	negs	r0, r3
 800677e:	4158      	adcs	r0, r3
 8006780:	4770      	bx	lr
 8006782:	2002      	movs	r0, #2
 8006784:	4770      	bx	lr
 8006786:	2004      	movs	r0, #4
 8006788:	4770      	bx	lr
 800678a:	2003      	movs	r0, #3
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	007ffffe 	.word	0x007ffffe

08006794 <__ieee754_log10f>:
 8006794:	b508      	push	{r3, lr}
 8006796:	ee10 3a10 	vmov	r3, s0
 800679a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800679e:	ed2d 8b02 	vpush	{d8}
 80067a2:	d108      	bne.n	80067b6 <__ieee754_log10f+0x22>
 80067a4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800682c <__ieee754_log10f+0x98>
 80067a8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8006830 <__ieee754_log10f+0x9c>
 80067ac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80067b0:	ecbd 8b02 	vpop	{d8}
 80067b4:	bd08      	pop	{r3, pc}
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	461a      	mov	r2, r3
 80067ba:	da02      	bge.n	80067c2 <__ieee754_log10f+0x2e>
 80067bc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80067c0:	e7f2      	b.n	80067a8 <__ieee754_log10f+0x14>
 80067c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80067c6:	db02      	blt.n	80067ce <__ieee754_log10f+0x3a>
 80067c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80067cc:	e7f0      	b.n	80067b0 <__ieee754_log10f+0x1c>
 80067ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067d2:	bfbf      	itttt	lt
 80067d4:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8006834 <__ieee754_log10f+0xa0>
 80067d8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80067dc:	f06f 0118 	mvnlt.w	r1, #24
 80067e0:	ee17 2a90 	vmovlt	r2, s15
 80067e4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80067e8:	bfa8      	it	ge
 80067ea:	2100      	movge	r1, #0
 80067ec:	3b7f      	subs	r3, #127	@ 0x7f
 80067ee:	440b      	add	r3, r1
 80067f0:	0fd9      	lsrs	r1, r3, #31
 80067f2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80067fe:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8006802:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006806:	ee00 3a10 	vmov	s0, r3
 800680a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800680e:	f000 f819 	bl	8006844 <__ieee754_logf>
 8006812:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006838 <__ieee754_log10f+0xa4>
 8006816:	ee20 0a27 	vmul.f32	s0, s0, s15
 800681a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800683c <__ieee754_log10f+0xa8>
 800681e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8006822:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8006840 <__ieee754_log10f+0xac>
 8006826:	eea8 0a27 	vfma.f32	s0, s16, s15
 800682a:	e7c1      	b.n	80067b0 <__ieee754_log10f+0x1c>
 800682c:	cc000000 	.word	0xcc000000
 8006830:	00000000 	.word	0x00000000
 8006834:	4c000000 	.word	0x4c000000
 8006838:	3ede5bd9 	.word	0x3ede5bd9
 800683c:	355427db 	.word	0x355427db
 8006840:	3e9a2080 	.word	0x3e9a2080

08006844 <__ieee754_logf>:
 8006844:	ee10 3a10 	vmov	r3, s0
 8006848:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800684c:	d106      	bne.n	800685c <__ieee754_logf+0x18>
 800684e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80069e8 <__ieee754_logf+0x1a4>
 8006852:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80069ec <__ieee754_logf+0x1a8>
 8006856:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800685a:	4770      	bx	lr
 800685c:	2b00      	cmp	r3, #0
 800685e:	461a      	mov	r2, r3
 8006860:	da02      	bge.n	8006868 <__ieee754_logf+0x24>
 8006862:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006866:	e7f4      	b.n	8006852 <__ieee754_logf+0xe>
 8006868:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800686c:	db02      	blt.n	8006874 <__ieee754_logf+0x30>
 800686e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006872:	4770      	bx	lr
 8006874:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006878:	bfb8      	it	lt
 800687a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80069f0 <__ieee754_logf+0x1ac>
 800687e:	485d      	ldr	r0, [pc, #372]	@ (80069f4 <__ieee754_logf+0x1b0>)
 8006880:	bfbe      	ittt	lt
 8006882:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006886:	f06f 0118 	mvnlt.w	r1, #24
 800688a:	ee17 2a90 	vmovlt	r2, s15
 800688e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006892:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006896:	4410      	add	r0, r2
 8006898:	bfa8      	it	ge
 800689a:	2100      	movge	r1, #0
 800689c:	3b7f      	subs	r3, #127	@ 0x7f
 800689e:	440b      	add	r3, r1
 80068a0:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80068a4:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80068a8:	4311      	orrs	r1, r2
 80068aa:	ee00 1a10 	vmov	s0, r1
 80068ae:	4952      	ldr	r1, [pc, #328]	@ (80069f8 <__ieee754_logf+0x1b4>)
 80068b0:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80068b4:	f102 000f 	add.w	r0, r2, #15
 80068b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80068bc:	4001      	ands	r1, r0
 80068be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80068c2:	bb89      	cbnz	r1, 8006928 <__ieee754_logf+0xe4>
 80068c4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80068c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068cc:	d10f      	bne.n	80068ee <__ieee754_logf+0xaa>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8087 	beq.w	80069e2 <__ieee754_logf+0x19e>
 80068d4:	ee07 3a90 	vmov	s15, r3
 80068d8:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80069fc <__ieee754_logf+0x1b8>
 80068dc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006a00 <__ieee754_logf+0x1bc>
 80068e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80068e8:	eea7 0a87 	vfma.f32	s0, s15, s14
 80068ec:	4770      	bx	lr
 80068ee:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8006a04 <__ieee754_logf+0x1c0>
 80068f2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80068f6:	eee0 7a66 	vfms.f32	s15, s0, s13
 80068fa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80068fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006902:	b913      	cbnz	r3, 800690a <__ieee754_logf+0xc6>
 8006904:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006908:	4770      	bx	lr
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80069fc <__ieee754_logf+0x1b8>
 8006912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006916:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800691a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800691e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006a00 <__ieee754_logf+0x1bc>
 8006922:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8006926:	4770      	bx	lr
 8006928:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800692c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006930:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006a08 <__ieee754_logf+0x1c4>
 8006934:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8006a0c <__ieee754_logf+0x1c8>
 8006938:	4935      	ldr	r1, [pc, #212]	@ (8006a10 <__ieee754_logf+0x1cc>)
 800693a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800693e:	4411      	add	r1, r2
 8006940:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8006944:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8006948:	430a      	orrs	r2, r1
 800694a:	2a00      	cmp	r2, #0
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	ee26 5a06 	vmul.f32	s10, s12, s12
 8006954:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006958:	ee25 7a05 	vmul.f32	s14, s10, s10
 800695c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8006a14 <__ieee754_logf+0x1d0>
 8006960:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006964:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006a18 <__ieee754_logf+0x1d4>
 8006968:	eee7 5a87 	vfma.f32	s11, s15, s14
 800696c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8006a1c <__ieee754_logf+0x1d8>
 8006970:	eee7 7a24 	vfma.f32	s15, s14, s9
 8006974:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8006a20 <__ieee754_logf+0x1dc>
 8006978:	eee7 4a87 	vfma.f32	s9, s15, s14
 800697c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8006a24 <__ieee754_logf+0x1e0>
 8006980:	eee4 7a87 	vfma.f32	s15, s9, s14
 8006984:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006988:	eee5 7a87 	vfma.f32	s15, s11, s14
 800698c:	dd1a      	ble.n	80069c4 <__ieee754_logf+0x180>
 800698e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006992:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006996:	ee27 7a00 	vmul.f32	s14, s14, s0
 800699a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800699e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80069a2:	b913      	cbnz	r3, 80069aa <__ieee754_logf+0x166>
 80069a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069a8:	e7ac      	b.n	8006904 <__ieee754_logf+0xc0>
 80069aa:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80069fc <__ieee754_logf+0x1b8>
 80069ae:	eee6 7a86 	vfma.f32	s15, s13, s12
 80069b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069b6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80069ba:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006a00 <__ieee754_logf+0x1bc>
 80069be:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80069c2:	4770      	bx	lr
 80069c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80069c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80069cc:	b913      	cbnz	r3, 80069d4 <__ieee754_logf+0x190>
 80069ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80069d2:	4770      	bx	lr
 80069d4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80069fc <__ieee754_logf+0x1b8>
 80069d8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80069dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80069e0:	e7eb      	b.n	80069ba <__ieee754_logf+0x176>
 80069e2:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80069ec <__ieee754_logf+0x1a8>
 80069e6:	4770      	bx	lr
 80069e8:	cc000000 	.word	0xcc000000
 80069ec:	00000000 	.word	0x00000000
 80069f0:	4c000000 	.word	0x4c000000
 80069f4:	004afb20 	.word	0x004afb20
 80069f8:	007ffff0 	.word	0x007ffff0
 80069fc:	3717f7d1 	.word	0x3717f7d1
 8006a00:	3f317180 	.word	0x3f317180
 8006a04:	3eaaaaab 	.word	0x3eaaaaab
 8006a08:	3e1cd04f 	.word	0x3e1cd04f
 8006a0c:	3e178897 	.word	0x3e178897
 8006a10:	ffcf5c30 	.word	0xffcf5c30
 8006a14:	3e638e29 	.word	0x3e638e29
 8006a18:	3ecccccd 	.word	0x3ecccccd
 8006a1c:	3e3a3325 	.word	0x3e3a3325
 8006a20:	3e924925 	.word	0x3e924925
 8006a24:	3f2aaaab 	.word	0x3f2aaaab

08006a28 <_init>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr

08006a34 <_fini>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr
