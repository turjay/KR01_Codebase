
Ready2Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005d90  08005d90  00006d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e44  08005e44  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e44  08005e44  00006e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e4c  08005e4c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e4c  08005e4c  00006e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e50  08005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005e54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000404  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f79a  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d7  00000000  00000000  00016832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00018d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad2  00000000  00000000  00019af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fbf  00000000  00000000  0001a5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011411  00000000  00000000  0003d581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d898a  00000000  00000000  0004e992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012731c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040f4  00000000  00000000  00127360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012b454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d78 	.word	0x08005d78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005d78 	.word	0x08005d78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b988 	b.w	8000920 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	468e      	mov	lr, r1
 8000630:	4604      	mov	r4, r0
 8000632:	4688      	mov	r8, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d962      	bls.n	8000704 <__udivmoddi4+0xdc>
 800063e:	fab2 f682 	clz	r6, r2
 8000642:	b14e      	cbz	r6, 8000658 <__udivmoddi4+0x30>
 8000644:	f1c6 0320 	rsb	r3, r6, #32
 8000648:	fa01 f806 	lsl.w	r8, r1, r6
 800064c:	fa20 f303 	lsr.w	r3, r0, r3
 8000650:	40b7      	lsls	r7, r6
 8000652:	ea43 0808 	orr.w	r8, r3, r8
 8000656:	40b4      	lsls	r4, r6
 8000658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800065c:	fa1f fc87 	uxth.w	ip, r7
 8000660:	fbb8 f1fe 	udiv	r1, r8, lr
 8000664:	0c23      	lsrs	r3, r4, #16
 8000666:	fb0e 8811 	mls	r8, lr, r1, r8
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fb01 f20c 	mul.w	r2, r1, ip
 8000672:	429a      	cmp	r2, r3
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0x62>
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	f101 30ff 	add.w	r0, r1, #4294967295
 800067c:	f080 80ea 	bcs.w	8000854 <__udivmoddi4+0x22c>
 8000680:	429a      	cmp	r2, r3
 8000682:	f240 80e7 	bls.w	8000854 <__udivmoddi4+0x22c>
 8000686:	3902      	subs	r1, #2
 8000688:	443b      	add	r3, r7
 800068a:	1a9a      	subs	r2, r3, r2
 800068c:	b2a3      	uxth	r3, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800069a:	fb00 fc0c 	mul.w	ip, r0, ip
 800069e:	459c      	cmp	ip, r3
 80006a0:	d909      	bls.n	80006b6 <__udivmoddi4+0x8e>
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006a8:	f080 80d6 	bcs.w	8000858 <__udivmoddi4+0x230>
 80006ac:	459c      	cmp	ip, r3
 80006ae:	f240 80d3 	bls.w	8000858 <__udivmoddi4+0x230>
 80006b2:	443b      	add	r3, r7
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ba:	eba3 030c 	sub.w	r3, r3, ip
 80006be:	2100      	movs	r1, #0
 80006c0:	b11d      	cbz	r5, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40f3      	lsrs	r3, r6
 80006c4:	2200      	movs	r2, #0
 80006c6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d905      	bls.n	80006de <__udivmoddi4+0xb6>
 80006d2:	b10d      	cbz	r5, 80006d8 <__udivmoddi4+0xb0>
 80006d4:	e9c5 0100 	strd	r0, r1, [r5]
 80006d8:	2100      	movs	r1, #0
 80006da:	4608      	mov	r0, r1
 80006dc:	e7f5      	b.n	80006ca <__udivmoddi4+0xa2>
 80006de:	fab3 f183 	clz	r1, r3
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d146      	bne.n	8000774 <__udivmoddi4+0x14c>
 80006e6:	4573      	cmp	r3, lr
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xc8>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 8105 	bhi.w	80008fa <__udivmoddi4+0x2d2>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4690      	mov	r8, r2
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0e5      	beq.n	80006ca <__udivmoddi4+0xa2>
 80006fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000702:	e7e2      	b.n	80006ca <__udivmoddi4+0xa2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	f000 8090 	beq.w	800082a <__udivmoddi4+0x202>
 800070a:	fab2 f682 	clz	r6, r2
 800070e:	2e00      	cmp	r6, #0
 8000710:	f040 80a4 	bne.w	800085c <__udivmoddi4+0x234>
 8000714:	1a8a      	subs	r2, r1, r2
 8000716:	0c03      	lsrs	r3, r0, #16
 8000718:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800071c:	b280      	uxth	r0, r0
 800071e:	b2bc      	uxth	r4, r7
 8000720:	2101      	movs	r1, #1
 8000722:	fbb2 fcfe 	udiv	ip, r2, lr
 8000726:	fb0e 221c 	mls	r2, lr, ip, r2
 800072a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072e:	fb04 f20c 	mul.w	r2, r4, ip
 8000732:	429a      	cmp	r2, r3
 8000734:	d907      	bls.n	8000746 <__udivmoddi4+0x11e>
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	f10c 38ff 	add.w	r8, ip, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x11c>
 800073e:	429a      	cmp	r2, r3
 8000740:	f200 80e0 	bhi.w	8000904 <__udivmoddi4+0x2dc>
 8000744:	46c4      	mov	ip, r8
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	fbb3 f2fe 	udiv	r2, r3, lr
 800074c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000750:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000754:	fb02 f404 	mul.w	r4, r2, r4
 8000758:	429c      	cmp	r4, r3
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x144>
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x142>
 8000764:	429c      	cmp	r4, r3
 8000766:	f200 80ca 	bhi.w	80008fe <__udivmoddi4+0x2d6>
 800076a:	4602      	mov	r2, r0
 800076c:	1b1b      	subs	r3, r3, r4
 800076e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000772:	e7a5      	b.n	80006c0 <__udivmoddi4+0x98>
 8000774:	f1c1 0620 	rsb	r6, r1, #32
 8000778:	408b      	lsls	r3, r1
 800077a:	fa22 f706 	lsr.w	r7, r2, r6
 800077e:	431f      	orrs	r7, r3
 8000780:	fa0e f401 	lsl.w	r4, lr, r1
 8000784:	fa20 f306 	lsr.w	r3, r0, r6
 8000788:	fa2e fe06 	lsr.w	lr, lr, r6
 800078c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000790:	4323      	orrs	r3, r4
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	fa1f fc87 	uxth.w	ip, r7
 800079a:	fbbe f0f9 	udiv	r0, lr, r9
 800079e:	0c1c      	lsrs	r4, r3, #16
 80007a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	d909      	bls.n	80007c8 <__udivmoddi4+0x1a0>
 80007b4:	193c      	adds	r4, r7, r4
 80007b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ba:	f080 809c 	bcs.w	80008f6 <__udivmoddi4+0x2ce>
 80007be:	45a6      	cmp	lr, r4
 80007c0:	f240 8099 	bls.w	80008f6 <__udivmoddi4+0x2ce>
 80007c4:	3802      	subs	r0, #2
 80007c6:	443c      	add	r4, r7
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	fa1f fe83 	uxth.w	lr, r3
 80007d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d4:	fb09 4413 	mls	r4, r9, r3, r4
 80007d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e0:	45a4      	cmp	ip, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x1ce>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007ea:	f080 8082 	bcs.w	80008f2 <__udivmoddi4+0x2ca>
 80007ee:	45a4      	cmp	ip, r4
 80007f0:	d97f      	bls.n	80008f2 <__udivmoddi4+0x2ca>
 80007f2:	3b02      	subs	r3, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007fa:	eba4 040c 	sub.w	r4, r4, ip
 80007fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000802:	4564      	cmp	r4, ip
 8000804:	4673      	mov	r3, lr
 8000806:	46e1      	mov	r9, ip
 8000808:	d362      	bcc.n	80008d0 <__udivmoddi4+0x2a8>
 800080a:	d05f      	beq.n	80008cc <__udivmoddi4+0x2a4>
 800080c:	b15d      	cbz	r5, 8000826 <__udivmoddi4+0x1fe>
 800080e:	ebb8 0203 	subs.w	r2, r8, r3
 8000812:	eb64 0409 	sbc.w	r4, r4, r9
 8000816:	fa04 f606 	lsl.w	r6, r4, r6
 800081a:	fa22 f301 	lsr.w	r3, r2, r1
 800081e:	431e      	orrs	r6, r3
 8000820:	40cc      	lsrs	r4, r1
 8000822:	e9c5 6400 	strd	r6, r4, [r5]
 8000826:	2100      	movs	r1, #0
 8000828:	e74f      	b.n	80006ca <__udivmoddi4+0xa2>
 800082a:	fbb1 fcf2 	udiv	ip, r1, r2
 800082e:	0c01      	lsrs	r1, r0, #16
 8000830:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000834:	b280      	uxth	r0, r0
 8000836:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800083a:	463b      	mov	r3, r7
 800083c:	4638      	mov	r0, r7
 800083e:	463c      	mov	r4, r7
 8000840:	46b8      	mov	r8, r7
 8000842:	46be      	mov	lr, r7
 8000844:	2620      	movs	r6, #32
 8000846:	fbb1 f1f7 	udiv	r1, r1, r7
 800084a:	eba2 0208 	sub.w	r2, r2, r8
 800084e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000852:	e766      	b.n	8000722 <__udivmoddi4+0xfa>
 8000854:	4601      	mov	r1, r0
 8000856:	e718      	b.n	800068a <__udivmoddi4+0x62>
 8000858:	4610      	mov	r0, r2
 800085a:	e72c      	b.n	80006b6 <__udivmoddi4+0x8e>
 800085c:	f1c6 0220 	rsb	r2, r6, #32
 8000860:	fa2e f302 	lsr.w	r3, lr, r2
 8000864:	40b7      	lsls	r7, r6
 8000866:	40b1      	lsls	r1, r6
 8000868:	fa20 f202 	lsr.w	r2, r0, r2
 800086c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000870:	430a      	orrs	r2, r1
 8000872:	fbb3 f8fe 	udiv	r8, r3, lr
 8000876:	b2bc      	uxth	r4, r7
 8000878:	fb0e 3318 	mls	r3, lr, r8, r3
 800087c:	0c11      	lsrs	r1, r2, #16
 800087e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000882:	fb08 f904 	mul.w	r9, r8, r4
 8000886:	40b0      	lsls	r0, r6
 8000888:	4589      	cmp	r9, r1
 800088a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800088e:	b280      	uxth	r0, r0
 8000890:	d93e      	bls.n	8000910 <__udivmoddi4+0x2e8>
 8000892:	1879      	adds	r1, r7, r1
 8000894:	f108 3cff 	add.w	ip, r8, #4294967295
 8000898:	d201      	bcs.n	800089e <__udivmoddi4+0x276>
 800089a:	4589      	cmp	r9, r1
 800089c:	d81f      	bhi.n	80008de <__udivmoddi4+0x2b6>
 800089e:	eba1 0109 	sub.w	r1, r1, r9
 80008a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008a6:	fb09 f804 	mul.w	r8, r9, r4
 80008aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ae:	b292      	uxth	r2, r2
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	4542      	cmp	r2, r8
 80008b6:	d229      	bcs.n	800090c <__udivmoddi4+0x2e4>
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80008be:	d2c4      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c0:	4542      	cmp	r2, r8
 80008c2:	d2c2      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c4:	f1a9 0102 	sub.w	r1, r9, #2
 80008c8:	443a      	add	r2, r7
 80008ca:	e7be      	b.n	800084a <__udivmoddi4+0x222>
 80008cc:	45f0      	cmp	r8, lr
 80008ce:	d29d      	bcs.n	800080c <__udivmoddi4+0x1e4>
 80008d0:	ebbe 0302 	subs.w	r3, lr, r2
 80008d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008d8:	3801      	subs	r0, #1
 80008da:	46e1      	mov	r9, ip
 80008dc:	e796      	b.n	800080c <__udivmoddi4+0x1e4>
 80008de:	eba7 0909 	sub.w	r9, r7, r9
 80008e2:	4449      	add	r1, r9
 80008e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ec:	fb09 f804 	mul.w	r8, r9, r4
 80008f0:	e7db      	b.n	80008aa <__udivmoddi4+0x282>
 80008f2:	4673      	mov	r3, lr
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1ce>
 80008f6:	4650      	mov	r0, sl
 80008f8:	e766      	b.n	80007c8 <__udivmoddi4+0x1a0>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e6fd      	b.n	80006fa <__udivmoddi4+0xd2>
 80008fe:	443b      	add	r3, r7
 8000900:	3a02      	subs	r2, #2
 8000902:	e733      	b.n	800076c <__udivmoddi4+0x144>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	443b      	add	r3, r7
 800090a:	e71c      	b.n	8000746 <__udivmoddi4+0x11e>
 800090c:	4649      	mov	r1, r9
 800090e:	e79c      	b.n	800084a <__udivmoddi4+0x222>
 8000910:	eba1 0109 	sub.w	r1, r1, r9
 8000914:	46c4      	mov	ip, r8
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fb09 f804 	mul.w	r8, r9, r4
 800091e:	e7c4      	b.n	80008aa <__udivmoddi4+0x282>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <map_clamped>:

static uint16_t sensor1_min = 1280, sensor1_max = 4095;
static uint16_t sensor2_min = 640,  sensor2_max = 1980;

static float map_clamped(int32_t x, int32_t in_min, int32_t in_max)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    if (x < in_min) x = in_min;
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	429a      	cmp	r2, r3
 8000936:	da01      	bge.n	800093c <map_clamped+0x18>
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60fb      	str	r3, [r7, #12]
    if (x > in_max) x = in_max;
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dd01      	ble.n	8000948 <map_clamped+0x24>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	60fb      	str	r3, [r7, #12]
    return ((float)(x - in_min) / (in_max - in_min)) * 100.0f;
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	ee07 3a90 	vmov	s15, r3
 8000952:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000968:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000980 <map_clamped+0x5c>
 800096c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000970:	eeb0 0a67 	vmov.f32	s0, s15
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	42c80000 	.word	0x42c80000

08000984 <APPS_Init>:

void APPS_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, adcdata, ADC_CHANNEL_COUNT);
 8000988:	2202      	movs	r2, #2
 800098a:	4908      	ldr	r1, [pc, #32]	@ (80009ac <APPS_Init+0x28>)
 800098c:	4808      	ldr	r0, [pc, #32]	@ (80009b0 <APPS_Init+0x2c>)
 800098e:	f001 f8b5 	bl	8001afc <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);
 8000992:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <APPS_Init+0x30>)
 8000994:	f003 f846 	bl	8003a24 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000998:	2100      	movs	r1, #0
 800099a:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <APPS_Init+0x34>)
 800099c:	f003 f904 	bl	8003ba8 <HAL_TIM_PWM_Start>
    apps_enabled = true;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <APPS_Init+0x38>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000088 	.word	0x20000088
 80009b0:	200000a4 	.word	0x200000a4
 80009b4:	200001dc 	.word	0x200001dc
 80009b8:	20000194 	.word	0x20000194
 80009bc:	200002b6 	.word	0x200002b6

080009c0 <APPS_Loop>:

void APPS_Loop(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
    if (!apps_enabled) {
 80009c6:	4b85      	ldr	r3, [pc, #532]	@ (8000bdc <APPS_Loop+0x21c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f083 0301 	eor.w	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d004      	beq.n	80009de <APPS_Loop+0x1e>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80009d4:	4b82      	ldr	r3, [pc, #520]	@ (8000be0 <APPS_Loop+0x220>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2200      	movs	r2, #0
 80009da:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 80009dc:	e0fa      	b.n	8000bd4 <APPS_Loop+0x214>
    }

    norm1 = map_clamped(adcdata[0], sensor1_min, sensor1_max);
 80009de:	4b81      	ldr	r3, [pc, #516]	@ (8000be4 <APPS_Loop+0x224>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	4b80      	ldr	r3, [pc, #512]	@ (8000be8 <APPS_Loop+0x228>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4b80      	ldr	r3, [pc, #512]	@ (8000bec <APPS_Loop+0x22c>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f7ff ff98 	bl	8000924 <map_clamped>
 80009f4:	eef0 7a40 	vmov.f32	s15, s0
 80009f8:	4b7d      	ldr	r3, [pc, #500]	@ (8000bf0 <APPS_Loop+0x230>)
 80009fa:	edc3 7a00 	vstr	s15, [r3]
    float norm2 = map_clamped(adcdata[1], sensor2_min, sensor2_max);
 80009fe:	4b79      	ldr	r3, [pc, #484]	@ (8000be4 <APPS_Loop+0x224>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4618      	mov	r0, r3
 8000a04:	4b7b      	ldr	r3, [pc, #492]	@ (8000bf4 <APPS_Loop+0x234>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8000bf8 <APPS_Loop+0x238>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f7ff ff88 	bl	8000924 <map_clamped>
 8000a14:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    if (norm1 < 6.2f) norm1 = 0.0f;
 8000a18:	4b75      	ldr	r3, [pc, #468]	@ (8000bf0 <APPS_Loop+0x230>)
 8000a1a:	edd3 7a00 	vldr	s15, [r3]
 8000a1e:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8000bfc <APPS_Loop+0x23c>
 8000a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2a:	d503      	bpl.n	8000a34 <APPS_Loop+0x74>
 8000a2c:	4b70      	ldr	r3, [pc, #448]	@ (8000bf0 <APPS_Loop+0x230>)
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
    if (norm2 < 6.2f) norm2 = 0.0f;
 8000a34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a38:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8000bfc <APPS_Loop+0x23c>
 8000a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a44:	d502      	bpl.n	8000a4c <APPS_Loop+0x8c>
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24

    norm1 = fminf(fmaxf(norm1, 0.0f), 100.0f);
 8000a4c:	4b68      	ldr	r3, [pc, #416]	@ (8000bf0 <APPS_Loop+0x230>)
 8000a4e:	edd3 7a00 	vldr	s15, [r3]
 8000a52:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8000c00 <APPS_Loop+0x240>
 8000a56:	eeb0 0a67 	vmov.f32	s0, s15
 8000a5a:	f004 ffed 	bl	8005a38 <fmaxf>
 8000a5e:	eef0 7a40 	vmov.f32	s15, s0
 8000a62:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8000c04 <APPS_Loop+0x244>
 8000a66:	eeb0 0a67 	vmov.f32	s0, s15
 8000a6a:	f005 f802 	bl	8005a72 <fminf>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	4b5f      	ldr	r3, [pc, #380]	@ (8000bf0 <APPS_Loop+0x230>)
 8000a74:	edc3 7a00 	vstr	s15, [r3]
    norm2 = fminf(fmaxf(norm2, 0.0f), 100.0f);
 8000a78:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8000c00 <APPS_Loop+0x240>
 8000a7c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8000a80:	f004 ffda 	bl	8005a38 <fmaxf>
 8000a84:	eef0 7a40 	vmov.f32	s15, s0
 8000a88:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8000c04 <APPS_Loop+0x244>
 8000a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a90:	f004 ffef 	bl	8005a72 <fminf>
 8000a94:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    float diff = fabsf(norm1 - norm2);
 8000a98:	4b55      	ldr	r3, [pc, #340]	@ (8000bf0 <APPS_Loop+0x230>)
 8000a9a:	ed93 7a00 	vldr	s14, [r3]
 8000a9e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aa6:	eef0 7ae7 	vabs.f32	s15, s15
 8000aaa:	edc7 7a07 	vstr	s15, [r7, #28]
    uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 8000aae:	4b56      	ldr	r3, [pc, #344]	@ (8000c08 <APPS_Loop+0x248>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab4:	61bb      	str	r3, [r7, #24]

    if (diff > 10.0f) {
 8000ab6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000aba:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	dd1d      	ble.n	8000b04 <APPS_Loop+0x144>
        if (!diff_flag) {
 8000ac8:	4b50      	ldr	r3, [pc, #320]	@ (8000c0c <APPS_Loop+0x24c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f083 0301 	eor.w	r3, r3, #1
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <APPS_Loop+0x124>
            diff_flag = true;
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8000c0c <APPS_Loop+0x24c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
            diff_start_time = now;
 8000adc:	4a4c      	ldr	r2, [pc, #304]	@ (8000c10 <APPS_Loop+0x250>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	e012      	b.n	8000b0a <APPS_Loop+0x14a>
        } else {
            uint32_t elapsed = (now >= diff_start_time)
                             ? (now - diff_start_time)
                             : (0xFFFFFFFF - diff_start_time + now + 1);
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <APPS_Loop+0x250>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
            uint32_t elapsed = (now >= diff_start_time)
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	617b      	str	r3, [r7, #20]

            if (elapsed >= 100) {  // 100 ms geçtiyse hata
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	2b63      	cmp	r3, #99	@ 0x63
 8000af2:	d90a      	bls.n	8000b0a <APPS_Loop+0x14a>
                permanent_fault = true;
 8000af4:	4b47      	ldr	r3, [pc, #284]	@ (8000c14 <APPS_Loop+0x254>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000afa:	4b39      	ldr	r3, [pc, #228]	@ (8000be0 <APPS_Loop+0x220>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
                return;
 8000b02:	e067      	b.n	8000bd4 <APPS_Loop+0x214>
            }
        }
    } else {
        diff_flag = false;
 8000b04:	4b41      	ldr	r3, [pc, #260]	@ (8000c0c <APPS_Loop+0x24c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
    }

    if (!permanent_fault) {
 8000b0a:	4b42      	ldr	r3, [pc, #264]	@ (8000c14 <APPS_Loop+0x254>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f083 0301 	eor.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d05d      	beq.n	8000bd4 <APPS_Loop+0x214>
        float norm1_scaled = norm1 / 100.0f;
 8000b18:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <APPS_Loop+0x230>)
 8000b1a:	ed93 7a00 	vldr	s14, [r3]
 8000b1e:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8000c04 <APPS_Loop+0x244>
 8000b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b26:	edc7 7a04 	vstr	s15, [r7, #16]
        float log_pwm = log10f(9.0f * norm1_scaled + 1.0f); // log dağılım
 8000b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b2e:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8000b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b42:	f004 ff45 	bl	80059d0 <log10f>
 8000b46:	ed87 0a03 	vstr	s0, [r7, #12]

        float pwm_raw = log_pwm * 49.0f;
 8000b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b4e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000c18 <APPS_Loop+0x258>
 8000b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b56:	edc7 7a02 	vstr	s15, [r7, #8]

        const float alpha = 0.1f;
 8000b5a:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <APPS_Loop+0x25c>)
 8000b5c:	607b      	str	r3, [r7, #4]
        filtered_pwm = (alpha * pwm_raw) + ((1.0f - alpha) * filtered_pwm);
 8000b5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <APPS_Loop+0x260>)
 8000b78:	edd3 7a00 	vldr	s15, [r3]
 8000b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b84:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <APPS_Loop+0x260>)
 8000b86:	edc3 7a00 	vstr	s15, [r3]

        uint32_t smooth_pwm = (uint32_t)(filtered_pwm + 0.5f);
 8000b8a:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <APPS_Loop+0x260>)
 8000b8c:	edd3 7a00 	vldr	s15, [r3]
 8000b90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b9c:	ee17 3a90 	vmov	r3, s15
 8000ba0:	623b      	str	r3, [r7, #32]

        if (smooth_pwm < 3) smooth_pwm = 0;
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d801      	bhi.n	8000bac <APPS_Loop+0x1ec>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
        if (smooth_pwm > 48) smooth_pwm = 49;
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	2b30      	cmp	r3, #48	@ 0x30
 8000bb0:	d901      	bls.n	8000bb6 <APPS_Loop+0x1f6>
 8000bb2:	2331      	movs	r3, #49	@ 0x31
 8000bb4:	623b      	str	r3, [r7, #32]

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, smooth_pwm);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <APPS_Loop+0x220>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6a3a      	ldr	r2, [r7, #32]
 8000bbc:	635a      	str	r2, [r3, #52]	@ 0x34
        pwm[0] = smooth_pwm * 100 / 49;
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	2264      	movs	r2, #100	@ 0x64
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <APPS_Loop+0x264>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <APPS_Loop+0x268>)
 8000bd2:	801a      	strh	r2, [r3, #0]
    }

}
 8000bd4:	3728      	adds	r7, #40	@ 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002b6 	.word	0x200002b6
 8000be0:	20000194 	.word	0x20000194
 8000be4:	20000088 	.word	0x20000088
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000002 	.word	0x20000002
 8000bf0:	20000084 	.word	0x20000084
 8000bf4:	20000004 	.word	0x20000004
 8000bf8:	20000006 	.word	0x20000006
 8000bfc:	40c66666 	.word	0x40c66666
 8000c00:	00000000 	.word	0x00000000
 8000c04:	42c80000 	.word	0x42c80000
 8000c08:	200001dc 	.word	0x200001dc
 8000c0c:	20000092 	.word	0x20000092
 8000c10:	20000094 	.word	0x20000094
 8000c14:	20000093 	.word	0x20000093
 8000c18:	42440000 	.word	0x42440000
 8000c1c:	3dcccccd 	.word	0x3dcccccd
 8000c20:	20000098 	.word	0x20000098
 8000c24:	5397829d 	.word	0x5397829d
 8000c28:	20000090 	.word	0x20000090

08000c2c <APPS_Deinit>:

void APPS_Deinit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc1);
 8000c30:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <APPS_Deinit+0x34>)
 8000c32:	f001 f877 	bl	8001d24 <HAL_ADC_Stop_DMA>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000c36:	2100      	movs	r1, #0
 8000c38:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <APPS_Deinit+0x38>)
 8000c3a:	f003 f87d 	bl	8003d38 <HAL_TIM_PWM_Stop>
    adcdata[0] = 0;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <APPS_Deinit+0x3c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
    adcdata[1] = 0;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <APPS_Deinit+0x3c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <APPS_Deinit+0x38>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	@ 0x34
    filtered_pwm = 0.0f;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <APPS_Deinit+0x40>)
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000a4 	.word	0x200000a4
 8000c64:	20000194 	.word	0x20000194
 8000c68:	20000088 	.word	0x20000088
 8000c6c:	20000098 	.word	0x20000098

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f000 fe67 	bl	8001948 <HAL_Init>

  /* USER CODE BEGIN Init */
  prev_rtd_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);  // İlk durumu oku
 8000c7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c7e:	4862      	ldr	r0, [pc, #392]	@ (8000e08 <main+0x198>)
 8000c80:	f002 f9f6 	bl	8003070 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b60      	ldr	r3, [pc, #384]	@ (8000e0c <main+0x19c>)
 8000c8a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f8d8 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000c90:	f000 fb12 	bl	80012b8 <MX_DMA_Init>
  MX_GPIO_Init();
 8000c94:	f000 fb30 	bl	80012f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c98:	f000 f93c 	bl	8000f14 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c9c:	f000 f9fa 	bl	8001094 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ca0:	f000 fa6e 	bl	8001180 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ca4:	f000 fade 	bl	8001264 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000ca8:	f000 f994 	bl	8000fd4 <MX_ADC2_Init>
  MX_TIM14_Init();
 8000cac:	f000 fab6 	bl	800121c <MX_TIM14_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // döngü içinde:
      rtd_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb4:	4854      	ldr	r0, [pc, #336]	@ (8000e08 <main+0x198>)
 8000cb6:	f002 f9db 	bl	8003070 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b54      	ldr	r3, [pc, #336]	@ (8000e10 <main+0x1a0>)
 8000cc0:	701a      	strb	r2, [r3, #0]
      GPIO_PinState brake_pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4850      	ldr	r0, [pc, #320]	@ (8000e08 <main+0x198>)
 8000cc8:	f002 f9d2 	bl	8003070 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]

      // RTD toggle: sadece buton düşen kenarda (HIGH ➝ LOW)
      if (prev_rtd_button == GPIO_PIN_SET && rtd_button == GPIO_PIN_RESET)
 8000cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000e0c <main+0x19c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d138      	bne.n	8000d4a <main+0xda>
 8000cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e10 <main+0x1a0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d134      	bne.n	8000d4a <main+0xda>
      {
          if (!rtd_active && brake_pressed == GPIO_PIN_SET) {
 8000ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8000e14 <main+0x1a4>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f083 0301 	eor.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01b      	beq.n	8000d26 <main+0xb6>
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d118      	bne.n	8000d26 <main+0xb6>
              // RTD aktif ediliyor
              rtd_active = true;
 8000cf4:	4b47      	ldr	r3, [pc, #284]	@ (8000e14 <main+0x1a4>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
              apps_enabled = true;
 8000cfa:	4b47      	ldr	r3, [pc, #284]	@ (8000e18 <main+0x1a8>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
              APPS_Init();
 8000d00:	f7ff fe40 	bl	8000984 <APPS_Init>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Buzzer ON
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0a:	483f      	ldr	r0, [pc, #252]	@ (8000e08 <main+0x198>)
 8000d0c:	f002 f9c8 	bl	80030a0 <HAL_GPIO_WritePin>
              HAL_Delay(2000);
 8000d10:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d14:	f000 fe8a 	bl	8001a2c <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1e:	483a      	ldr	r0, [pc, #232]	@ (8000e08 <main+0x198>)
 8000d20:	f002 f9be 	bl	80030a0 <HAL_GPIO_WritePin>
 8000d24:	e011      	b.n	8000d4a <main+0xda>
          } else if (rtd_active) {
 8000d26:	4b3b      	ldr	r3, [pc, #236]	@ (8000e14 <main+0x1a4>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00d      	beq.n	8000d4a <main+0xda>
              // RTD devreden çıkarılıyor
              rtd_active = false;
 8000d2e:	4b39      	ldr	r3, [pc, #228]	@ (8000e14 <main+0x1a4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
              apps_enabled = false;
 8000d34:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <main+0x1a8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
              APPS_Deinit();
 8000d3a:	f7ff ff77 	bl	8000c2c <APPS_Deinit>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Buzzer OFF
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d44:	4830      	ldr	r0, [pc, #192]	@ (8000e08 <main+0x198>)
 8000d46:	f002 f9ab 	bl	80030a0 <HAL_GPIO_WritePin>
          }
      }

      // butonun önceki durumunu güncelle
      prev_rtd_button = rtd_button;
 8000d4a:	4b31      	ldr	r3, [pc, #196]	@ (8000e10 <main+0x1a0>)
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <main+0x19c>)
 8000d50:	701a      	strb	r2, [r3, #0]

      // Buzzer otomatik kapatma (2 saniye sonra)
      if (buzzer_on) {
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <main+0x1ac>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00c      	beq.n	8000d74 <main+0x104>
    	  HAL_Delay(3000);
 8000d5a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d5e:	f000 fe65 	bl	8001a2c <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d68:	4827      	ldr	r0, [pc, #156]	@ (8000e08 <main+0x198>)
 8000d6a:	f002 f999 	bl	80030a0 <HAL_GPIO_WritePin>
          buzzer_on = false;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <main+0x1ac>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
      }

      if (apps_enabled) {
 8000d74:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <main+0x1a8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <main+0x110>
          APPS_Loop();
 8000d7c:	f7ff fe20 	bl	80009c0 <APPS_Loop>
      }

      if (brake_pressed == GPIO_PIN_SET)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d106      	bne.n	8000d94 <main+0x124>
          HAL_UART_Transmit(&huart2, (uint8_t*)"Brake ON\r\n", 10, HAL_MAX_DELAY);
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	4924      	ldr	r1, [pc, #144]	@ (8000e20 <main+0x1b0>)
 8000d8e:	4825      	ldr	r0, [pc, #148]	@ (8000e24 <main+0x1b4>)
 8000d90:	f003 fdae 	bl	80048f0 <HAL_UART_Transmit>
      if (rtd_button == GPIO_PIN_RESET)
 8000d94:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <main+0x1a0>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <main+0x13a>
          HAL_UART_Transmit(&huart2, (uint8_t*)"RTD ON\r\n", 9, HAL_MAX_DELAY);
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	2209      	movs	r2, #9
 8000da2:	4921      	ldr	r1, [pc, #132]	@ (8000e28 <main+0x1b8>)
 8000da4:	481f      	ldr	r0, [pc, #124]	@ (8000e24 <main+0x1b4>)
 8000da6:	f003 fda3 	bl	80048f0 <HAL_UART_Transmit>

      // UART veri gönderimi (her zaman gönderilecek, apps açık olmasa bile)
      snprintf(uart_buf, sizeof(uart_buf),
 8000daa:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <main+0x1bc>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <main+0x1bc>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e30 <main+0x1c0>)
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	491e      	ldr	r1, [pc, #120]	@ (8000e30 <main+0x1c0>)
 8000db8:	6849      	ldr	r1, [r1, #4]
 8000dba:	9102      	str	r1, [sp, #8]
 8000dbc:	9201      	str	r2, [sp, #4]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e34 <main+0x1c4>)
 8000dc4:	2164      	movs	r1, #100	@ 0x64
 8000dc6:	481c      	ldr	r0, [pc, #112]	@ (8000e38 <main+0x1c8>)
 8000dc8:	f004 f94e 	bl	8005068 <sniprintf>
               "APPS: %lu, %lu | GYRO: %lu, %lu\r\n",
               adcdata[0], adcdata[1], gyrodata[0], gyrodata[1]);

      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000dcc:	481a      	ldr	r0, [pc, #104]	@ (8000e38 <main+0x1c8>)
 8000dce:	f7ff f9ff 	bl	80001d0 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	4917      	ldr	r1, [pc, #92]	@ (8000e38 <main+0x1c8>)
 8000ddc:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <main+0x1b4>)
 8000dde:	f003 fd87 	bl	80048f0 <HAL_UART_Transmit>

      Nextion_UpdateStatus(norm1, rtd_active);
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <main+0x1cc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbae 	bl	8000548 <__aeabi_f2d>
 8000dec:	4604      	mov	r4, r0
 8000dee:	460d      	mov	r5, r1
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <main+0x1a4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	ec45 4b10 	vmov	d0, r4, r5
 8000dfa:	f000 fafd 	bl	80013f8 <Nextion_UpdateStatus>

      HAL_Delay(300);
 8000dfe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e02:	f000 fe13 	bl	8001a2c <HAL_Delay>
  {
 8000e06:	e753      	b.n	8000cb0 <main+0x40>
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200002b4 	.word	0x200002b4
 8000e14:	200002b5 	.word	0x200002b5
 8000e18:	200002b6 	.word	0x200002b6
 8000e1c:	200002b7 	.word	0x200002b7
 8000e20:	08005d90 	.word	0x08005d90
 8000e24:	2000026c 	.word	0x2000026c
 8000e28:	08005d9c 	.word	0x08005d9c
 8000e2c:	20000088 	.word	0x20000088
 8000e30:	2000009c 	.word	0x2000009c
 8000e34:	08005da8 	.word	0x08005da8
 8000e38:	200002b8 	.word	0x200002b8
 8000e3c:	20000084 	.word	0x20000084

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	@ 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	2230      	movs	r2, #48	@ 0x30
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f004 f940 	bl	80050d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <SystemClock_Config+0xcc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	4a27      	ldr	r2, [pc, #156]	@ (8000f0c <SystemClock_Config+0xcc>)
 8000e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e74:	4b25      	ldr	r3, [pc, #148]	@ (8000f0c <SystemClock_Config+0xcc>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <SystemClock_Config+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <SystemClock_Config+0xd0>)
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <SystemClock_Config+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb4:	23a8      	movs	r3, #168	@ 0xa8
 8000eb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 f905 	bl	80030d4 <HAL_RCC_OscConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed0:	f000 fa64 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fb66 	bl	80035c4 <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000efe:	f000 fa4d 	bl	800139c <Error_Handler>
  }
}
 8000f02:	bf00      	nop
 8000f04:	3750      	adds	r7, #80	@ 0x50
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40007000 	.word	0x40007000

08000f14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f26:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f28:	4a28      	ldr	r2, [pc, #160]	@ (8000fcc <MX_ADC1_Init+0xb8>)
 8000f2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f34:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f3a:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f56:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <MX_ADC1_Init+0xbc>)
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f74:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f76:	f000 fd7d 	bl	8001a74 <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f80:	f000 fa0c 	bl	800139c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f96:	f000 ff3d 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fa0:	f000 f9fc 	bl	800139c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_ADC1_Init+0xb4>)
 8000fb2:	f000 ff2f 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fbc:	f000 f9ee 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000a4 	.word	0x200000a4
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	0f000001 	.word	0x0f000001

08000fd4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8000fe8:	4a28      	ldr	r2, [pc, #160]	@ (800108c <MX_ADC2_Init+0xb8>)
 8000fea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fec:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8000fee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ff2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff4:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001000:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <MX_ADC2_Init+0xbc>)
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_ADC2_Init+0xb4>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001022:	2202      	movs	r2, #2
 8001024:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001030:	2201      	movs	r2, #1
 8001032:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001034:	4814      	ldr	r0, [pc, #80]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001036:	f000 fd1d 	bl	8001a74 <HAL_ADC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001040:	f000 f9ac 	bl	800139c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001044:	2304      	movs	r3, #4
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800104c:	2303      	movs	r3, #3
 800104e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001056:	f000 fedd 	bl	8001e14 <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 f99c 	bl	800139c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001064:	2305      	movs	r3, #5
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001068:	2302      	movs	r3, #2
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_ADC2_Init+0xb4>)
 8001072:	f000 fecf 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800107c:	f000 f98e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000ec 	.word	0x200000ec
 800108c:	40012100 	.word	0x40012100
 8001090:	0f000001 	.word	0x0f000001

08001094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	@ 0x38
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <MX_TIM3_Init+0xe4>)
 80010c6:	4a2d      	ldr	r2, [pc, #180]	@ (800117c <MX_TIM3_Init+0xe8>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80010ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <MX_TIM3_Init+0xe4>)
 80010cc:	2253      	movs	r2, #83	@ 0x53
 80010ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <MX_TIM3_Init+0xe4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <MX_TIM3_Init+0xe4>)
 80010d8:	2231      	movs	r2, #49	@ 0x31
 80010da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <MX_TIM3_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <MX_TIM3_Init+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010e8:	4823      	ldr	r0, [pc, #140]	@ (8001178 <MX_TIM3_Init+0xe4>)
 80010ea:	f002 fc4b 	bl	8003984 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80010f4:	f000 f952 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001102:	4619      	mov	r1, r3
 8001104:	481c      	ldr	r0, [pc, #112]	@ (8001178 <MX_TIM3_Init+0xe4>)
 8001106:	f002 ff49 	bl	8003f9c <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001110:	f000 f944 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001114:	4818      	ldr	r0, [pc, #96]	@ (8001178 <MX_TIM3_Init+0xe4>)
 8001116:	f002 fced 	bl	8003af4 <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001120:	f000 f93c 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	4619      	mov	r1, r3
 8001132:	4811      	ldr	r0, [pc, #68]	@ (8001178 <MX_TIM3_Init+0xe4>)
 8001134:	f003 fb10 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800113e:	f000 f92d 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	@ 0x60
 8001144:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	@ (8001178 <MX_TIM3_Init+0xe4>)
 800115a:	f002 fe5d 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001164:	f000 f91a 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <MX_TIM3_Init+0xe4>)
 800116a:	f000 fabf 	bl	80016ec <HAL_TIM_MspPostInit>

}
 800116e:	bf00      	nop
 8001170:	3738      	adds	r7, #56	@ 0x38
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000194 	.word	0x20000194
 800117c:	40000400 	.word	0x40000400

08001180 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800119c:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <MX_TIM4_Init+0x94>)
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <MX_TIM4_Init+0x98>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011a4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80011a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011c4:	4813      	ldr	r0, [pc, #76]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011c6:	f002 fbdd 	bl	8003984 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80011d0:	f000 f8e4 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4619      	mov	r1, r3
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011e2:	f002 fedb 	bl	8003f9c <HAL_TIM_ConfigClockSource>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011ec:	f000 f8d6 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_TIM4_Init+0x94>)
 80011fe:	f003 faab 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001208:	f000 f8c8 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001dc 	.word	0x200001dc
 8001218:	40000800 	.word	0x40000800

0800121c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_TIM14_Init+0x40>)
 8001222:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <MX_TIM14_Init+0x44>)
 8001224:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16799;
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <MX_TIM14_Init+0x40>)
 8001228:	f244 129f 	movw	r2, #16799	@ 0x419f
 800122c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_TIM14_Init+0x40>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 3000;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_TIM14_Init+0x40>)
 8001236:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800123a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_TIM14_Init+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_TIM14_Init+0x40>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_TIM14_Init+0x40>)
 800124a:	f002 fb9b 	bl	8003984 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001254:	f000 f8a2 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000224 	.word	0x20000224
 8001260:	40002000 	.word	0x40002000

08001264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART2_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001270:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800129c:	f003 fad8 	bl	8004850 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 f879 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000026c 	.word	0x2000026c
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_DMA_Init+0x3c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <MX_DMA_Init+0x3c>)
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	203c      	movs	r0, #60	@ 0x3c
 80012e0:	f001 f913 	bl	800250a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80012e4:	203c      	movs	r0, #60	@ 0x3c
 80012e6:	f001 f92c 	bl	8002542 <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <MX_GPIO_Init+0x9c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a1f      	ldr	r2, [pc, #124]	@ (8001394 <MX_GPIO_Init+0x9c>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_GPIO_Init+0x9c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_GPIO_Init+0x9c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <MX_GPIO_Init+0x9c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <MX_GPIO_Init+0x9c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800134c:	4812      	ldr	r0, [pc, #72]	@ (8001398 <MX_GPIO_Init+0xa0>)
 800134e:	f001 fea7 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <MX_GPIO_Init+0xa0>)
 800136c:	f001 fce4 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001370:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_GPIO_Init+0xa0>)
 8001386:	f001 fcd7 	bl	8002d38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800138a:	bf00      	nop
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <Nextion_SendCommand>:
#include <string.h>
#include <stdio.h>

extern UART_HandleTypeDef huart2;

void Nextion_SendCommand(const char *cmd) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    const uint8_t end_cmd[3] = {0xFF, 0xFF, 0xFF};
 80013b0:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <Nextion_SendCommand+0x48>)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	4611      	mov	r1, r2
 80013ba:	8019      	strh	r1, [r3, #0]
 80013bc:	3302      	adds	r3, #2
 80013be:	0c12      	lsrs	r2, r2, #16
 80013c0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7fe ff04 	bl	80001d0 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <Nextion_SendCommand+0x4c>)
 80013d4:	f003 fa8c 	bl	80048f0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, end_cmd, 3, HAL_MAX_DELAY);
 80013d8:	f107 010c 	add.w	r1, r7, #12
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	2203      	movs	r2, #3
 80013e2:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <Nextion_SendCommand+0x4c>)
 80013e4:	f003 fa84 	bl	80048f0 <HAL_UART_Transmit>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	08005dcc 	.word	0x08005dcc
 80013f4:	2000026c 	.word	0x2000026c

080013f8 <Nextion_UpdateStatus>:

void Nextion_UpdateStatus(float norm1, bool rtd_state) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b092      	sub	sp, #72	@ 0x48
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	4603      	mov	r3, r0
 8001404:	70fb      	strb	r3, [r7, #3]
    char buffer[64];

    // APPS verisini gönder (n7)
    snprintf(buffer, sizeof(buffer), "t4.txt=\"%d\"", (int)norm1);
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	f107 0008 	add.w	r0, r7, #8
 8001412:	ee17 3a90 	vmov	r3, s15
 8001416:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <Nextion_UpdateStatus+0x5c>)
 8001418:	2140      	movs	r1, #64	@ 0x40
 800141a:	f003 fe25 	bl	8005068 <sniprintf>
    Nextion_SendCommand(buffer);
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffc0 	bl	80013a8 <Nextion_SendCommand>


    // RTD durumunu gönder (t9)
    snprintf(buffer, sizeof(buffer), "t9.txt=\"%s\"", rtd_state ? "ON" : "OFF");
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <Nextion_UpdateStatus+0x3a>
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <Nextion_UpdateStatus+0x60>)
 8001430:	e000      	b.n	8001434 <Nextion_UpdateStatus+0x3c>
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <Nextion_UpdateStatus+0x64>)
 8001434:	f107 0008 	add.w	r0, r7, #8
 8001438:	4a09      	ldr	r2, [pc, #36]	@ (8001460 <Nextion_UpdateStatus+0x68>)
 800143a:	2140      	movs	r1, #64	@ 0x40
 800143c:	f003 fe14 	bl	8005068 <sniprintf>
    Nextion_SendCommand(buffer);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ffaf 	bl	80013a8 <Nextion_SendCommand>
}
 800144a:	bf00      	nop
 800144c:	3748      	adds	r7, #72	@ 0x48
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	08005dd0 	.word	0x08005dd0
 8001458:	08005ddc 	.word	0x08005ddc
 800145c:	08005de0 	.word	0x08005de0
 8001460:	08005de4 	.word	0x08005de4

08001464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a46      	ldr	r2, [pc, #280]	@ (80015ec <HAL_ADC_MspInit+0x138>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d159      	bne.n	800158a <HAL_ADC_MspInit+0xd6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	4b45      	ldr	r3, [pc, #276]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a44      	ldr	r2, [pc, #272]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	4b3e      	ldr	r3, [pc, #248]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a3d      	ldr	r2, [pc, #244]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150e:	2303      	movs	r3, #3
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4834      	ldr	r0, [pc, #208]	@ (80015f4 <HAL_ADC_MspInit+0x140>)
 8001522:	f001 fc09 	bl	8002d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001526:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001528:	4a34      	ldr	r2, [pc, #208]	@ (80015fc <HAL_ADC_MspInit+0x148>)
 800152a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800152c:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001532:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001538:	4b2f      	ldr	r3, [pc, #188]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800153e:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001544:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001546:	4b2c      	ldr	r3, [pc, #176]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001548:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800154c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001550:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001556:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001560:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001564:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800156c:	4822      	ldr	r0, [pc, #136]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 800156e:	f001 f803 	bl	8002578 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001578:	f7ff ff10 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001580:	639a      	str	r2, [r3, #56]	@ 0x38
 8001582:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <HAL_ADC_MspInit+0x144>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001588:	e02c      	b.n	80015e4 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <HAL_ADC_MspInit+0x14c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d127      	bne.n	80015e4 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80015a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_ADC_MspInit+0x13c>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015cc:	2330      	movs	r3, #48	@ 0x30
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_ADC_MspInit+0x140>)
 80015e0:	f001 fbaa 	bl	8002d38 <HAL_GPIO_Init>
}
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	@ 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	20000134 	.word	0x20000134
 80015fc:	40026470 	.word	0x40026470
 8001600:	40012100 	.word	0x40012100

08001604 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	@ 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2d      	ldr	r2, [pc, #180]	@ (80016d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10e      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	4a2b      	ldr	r2, [pc, #172]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6413      	str	r3, [r2, #64]	@ 0x40
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001642:	e044      	b.n	80016ce <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a25      	ldr	r2, [pc, #148]	@ (80016e0 <HAL_TIM_Base_MspInit+0xdc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10e      	bne.n	800166c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]
}
 800166a:	e030      	b.n	80016ce <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM14)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12b      	bne.n	80016ce <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a17      	ldr	r2, [pc, #92]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_TIM_Base_MspInit+0xd8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80016be:	2309      	movs	r3, #9
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <HAL_TIM_Base_MspInit+0xe4>)
 80016ca:	f001 fb35 	bl	8002d38 <HAL_GPIO_Init>
}
 80016ce:	bf00      	nop
 80016d0:	3730      	adds	r7, #48	@ 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40000400 	.word	0x40000400
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40002000 	.word	0x40002000
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_TIM_MspPostInit+0x68>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11d      	bne.n	800174a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800172a:	2340      	movs	r3, #64	@ 0x40
 800172c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800173a:	2302      	movs	r3, #2
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <HAL_TIM_MspPostInit+0x70>)
 8001746:	f001 faf7 	bl	8002d38 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40000400 	.word	0x40000400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_UART_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <HAL_UART_MspInit+0x88>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a17      	ldr	r2, [pc, #92]	@ (80017e8 <HAL_UART_MspInit+0x88>)
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <HAL_UART_MspInit+0x88>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_UART_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	@ (80017e8 <HAL_UART_MspInit+0x88>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_UART_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ba:	230c      	movs	r3, #12
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ca:	2307      	movs	r3, #7
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	@ (80017ec <HAL_UART_MspInit+0x8c>)
 80017d6:	f001 faaf 	bl	8002d38 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	@ 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <NMI_Handler+0x4>

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <MemManage_Handler+0x4>

08001808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <UsageFault_Handler+0x4>

08001818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f000 f8d1 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <DMA2_Stream4_IRQHandler+0x10>)
 8001856:	f001 f805 	bl	8002864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000134 	.word	0x20000134

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f003 fc26 	bl	80050e4 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20020000 	.word	0x20020000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	2000031c 	.word	0x2000031c
 80018cc:	20000470 	.word	0x20000470

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800192c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018f8:	f7ff ffea 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fe:	490d      	ldr	r1, [pc, #52]	@ (8001934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001914:	4c0a      	ldr	r4, [pc, #40]	@ (8001940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001922:	f003 fbe5 	bl	80050f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7ff f9a3 	bl	8000c70 <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800192c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001938:	08005e54 	.word	0x08005e54
  ldr r2, =_sbss
 800193c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001940:	2000046c 	.word	0x2000046c

08001944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_Init+0x40>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <HAL_Init+0x40>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <HAL_Init+0x40>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 fdbf 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	200f      	movs	r0, #15
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff fd72 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fdd7 	bl	800255e <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 fd9f 	bl	800250a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	@ (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	20000014 	.word	0x20000014
 80019e8:	20000010 	.word	0x20000010

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	20000320 	.word	0x20000320

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000320 	.word	0x20000320

08001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff ffee 	bl	8001a14 <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d005      	beq.n	8001a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_Delay+0x44>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a52:	bf00      	nop
 8001a54:	f7ff ffde 	bl	8001a14 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f7      	bhi.n	8001a54 <HAL_Delay+0x28>
  {
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000014 	.word	0x20000014

08001a74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e033      	b.n	8001af2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fd0e 	bl	80014b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aba:	f023 0302 	bic.w	r3, r3, #2
 8001abe:	f043 0202 	orr.w	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fac6 	bl	8002058 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ae2:	e001      	b.n	8001ae8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Start_DMA+0x22>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e0eb      	b.n	8001cf6 <HAL_ADC_Start_DMA+0x1fa>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d018      	beq.n	8001b66 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b44:	4b6e      	ldr	r3, [pc, #440]	@ (8001d00 <HAL_ADC_Start_DMA+0x204>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	@ (8001d04 <HAL_ADC_Start_DMA+0x208>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0c9a      	lsrs	r2, r3, #18
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001b58:	e002      	b.n	8001b60 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b74:	d107      	bne.n	8001b86 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b84:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	f040 80a3 	bne.w	8001cdc <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bc0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bd4:	d106      	bne.n	8001be4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f023 0206 	bic.w	r2, r3, #6
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001be2:	e002      	b.n	8001bea <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf2:	4b45      	ldr	r3, [pc, #276]	@ (8001d08 <HAL_ADC_Start_DMA+0x20c>)
 8001bf4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfa:	4a44      	ldr	r2, [pc, #272]	@ (8001d0c <HAL_ADC_Start_DMA+0x210>)
 8001bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c02:	4a43      	ldr	r2, [pc, #268]	@ (8001d10 <HAL_ADC_Start_DMA+0x214>)
 8001c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0a:	4a42      	ldr	r2, [pc, #264]	@ (8001d14 <HAL_ADC_Start_DMA+0x218>)
 8001c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c26:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c36:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	334c      	adds	r3, #76	@ 0x4c
 8001c42:	4619      	mov	r1, r3
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f000 fd44 	bl	80026d4 <HAL_DMA_Start_IT>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d12a      	bne.n	8001cb2 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2d      	ldr	r2, [pc, #180]	@ (8001d18 <HAL_ADC_Start_DMA+0x21c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d015      	beq.n	8001c92 <HAL_ADC_Start_DMA+0x196>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d1c <HAL_ADC_Start_DMA+0x220>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d105      	bne.n	8001c7c <HAL_ADC_Start_DMA+0x180>
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <HAL_ADC_Start_DMA+0x20c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a27      	ldr	r2, [pc, #156]	@ (8001d20 <HAL_ADC_Start_DMA+0x224>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d136      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x1f8>
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_ADC_Start_DMA+0x20c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d130      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d129      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e020      	b.n	8001cf4 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <HAL_ADC_Start_DMA+0x21c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d11b      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x1f8>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d114      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	e00b      	b.n	8001cf4 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f043 0210 	orr.w	r2, r3, #16
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	431bde83 	.word	0x431bde83
 8001d08:	40012300 	.word	0x40012300
 8001d0c:	08002251 	.word	0x08002251
 8001d10:	0800230b 	.word	0x0800230b
 8001d14:	08002327 	.word	0x08002327
 8001d18:	40012000 	.word	0x40012000
 8001d1c:	40012100 	.word	0x40012100
 8001d20:	40012200 	.word	0x40012200

08001d24 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Stop_DMA+0x1a>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e048      	b.n	8001dd0 <HAL_ADC_Stop_DMA+0xac>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d130      	bne.n	8001dc6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d72:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d10f      	bne.n	8001da2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fcfc 	bl	8002784 <HAL_DMA_Abort>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001db0:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1c>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e105      	b.n	800203c <HAL_ADC_ConfigChannel+0x228>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d925      	bls.n	8001e8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68d9      	ldr	r1, [r3, #12]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4403      	add	r3, r0
 8001e7e:	3b1e      	subs	r3, #30
 8001e80:	409a      	lsls	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	e022      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6919      	ldr	r1, [r3, #16]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6919      	ldr	r1, [r3, #16]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4403      	add	r3, r0
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d824      	bhi.n	8001f24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b05      	subs	r3, #5
 8001eec:	221f      	movs	r2, #31
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	400a      	ands	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b05      	subs	r3, #5
 8001f16:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f22:	e04c      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d824      	bhi.n	8001f76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b23      	subs	r3, #35	@ 0x23
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43da      	mvns	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b23      	subs	r3, #35	@ 0x23
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f74:	e023      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b41      	subs	r3, #65	@ 0x41
 8001f88:	221f      	movs	r2, #31
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	400a      	ands	r2, r1
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b41      	subs	r3, #65	@ 0x41
 8001fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <HAL_ADC_ConfigChannel+0x234>)
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	@ (800204c <HAL_ADC_ConfigChannel+0x238>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1cc>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b12      	cmp	r3, #18
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_ADC_ConfigChannel+0x238>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d123      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x21e>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b10      	cmp	r3, #16
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x1e6>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b11      	cmp	r3, #17
 8001ff8:	d11b      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b10      	cmp	r3, #16
 800200c:	d111      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_ADC_ConfigChannel+0x23c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a10      	ldr	r2, [pc, #64]	@ (8002054 <HAL_ADC_ConfigChannel+0x240>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	0c9a      	lsrs	r2, r3, #18
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002024:	e002      	b.n	800202c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3b01      	subs	r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f9      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40012300 	.word	0x40012300
 800204c:	40012000 	.word	0x40012000
 8002050:	2000000c 	.word	0x2000000c
 8002054:	431bde83 	.word	0x431bde83

08002058 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002060:	4b79      	ldr	r3, [pc, #484]	@ (8002248 <ADC_Init+0x1f0>)
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	431a      	orrs	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800208c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	021a      	lsls	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	4a58      	ldr	r2, [pc, #352]	@ (800224c <ADC_Init+0x1f4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d022      	beq.n	8002136 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6899      	ldr	r1, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e00f      	b.n	8002156 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002154:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0202 	bic.w	r2, r2, #2
 8002164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
 8002170:	005a      	lsls	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002192:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	3b01      	subs	r3, #1
 80021b0:	035a      	lsls	r2, r3, #13
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	e007      	b.n	80021cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	051a      	lsls	r2, r3, #20
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800220e:	025a      	lsls	r2, r3, #9
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	029a      	lsls	r2, r3, #10
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40012300 	.word	0x40012300
 800224c:	0f000001 	.word	0x0f000001

08002250 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002266:	2b00      	cmp	r3, #0
 8002268:	d13c      	bne.n	80022e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d12b      	bne.n	80022dc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d127      	bne.n	80022dc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d119      	bne.n	80022dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0220 	bic.w	r2, r2, #32
 80022b6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fd7b 	bl	8001dd8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022e2:	e00e      	b.n	8002302 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff fd85 	bl	8001e00 <HAL_ADC_ErrorCallback>
}
 80022f6:	e004      	b.n	8002302 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002316:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff fd67 	bl	8001dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2240      	movs	r2, #64	@ 0x40
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f043 0204 	orr.w	r2, r3, #4
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7ff fd5a 	bl	8001e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4907      	ldr	r1, [pc, #28]	@ (80023f0 <__NVIC_EnableIRQ+0x38>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	@ (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	@ (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c0:	d301      	bcc.n	80024c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c6:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <SysTick_Config+0x40>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ce:	210f      	movs	r1, #15
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f7ff ff8e 	bl	80023f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <SysTick_Config+0x40>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <SysTick_Config+0x40>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff29 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff3e 	bl	800239c <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff8e 	bl	8002448 <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5d 	bl	80023f4 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff31 	bl	80023b8 <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffa2 	bl	80024b0 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fa46 	bl	8001a14 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e099      	b.n	80026c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b4:	e00f      	b.n	80025d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b6:	f7ff fa2d 	bl	8001a14 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d908      	bls.n	80025d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e078      	b.n	80026c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e8      	bne.n	80025b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <HAL_DMA_Init+0x158>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	4313      	orrs	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f023 0307 	bic.w	r3, r3, #7
 8002656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	2b04      	cmp	r3, #4
 8002668:	d117      	bne.n	800269a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fadf 	bl	8002c40 <DMA_CheckFifoParam>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2240      	movs	r2, #64	@ 0x40
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002696:	2301      	movs	r3, #1
 8002698:	e016      	b.n	80026c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa96 	bl	8002bd4 <DMA_CalcBaseAndBitshift>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	223f      	movs	r2, #63	@ 0x3f
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	f010803f 	.word	0xf010803f

080026d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_DMA_Start_IT+0x26>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e040      	b.n	800277c <HAL_DMA_Start_IT+0xa8>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d12f      	bne.n	800276e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa28 	bl	8002b78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	223f      	movs	r2, #63	@ 0x3f
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0216 	orr.w	r2, r2, #22
 8002742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e005      	b.n	800277a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7ff f93f 	bl	8001a14 <HAL_GetTick>
 8002796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2280      	movs	r2, #128	@ 0x80
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e052      	b.n	800285c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0216 	bic.w	r2, r2, #22
 80027c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_DMA_Abort+0x62>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0208 	bic.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002806:	e013      	b.n	8002830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002808:	f7ff f904 	bl	8001a14 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b05      	cmp	r3, #5
 8002814:	d90c      	bls.n	8002830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2203      	movs	r2, #3
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e015      	b.n	800285c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e4      	bne.n	8002808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	223f      	movs	r2, #63	@ 0x3f
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002870:	4b8e      	ldr	r3, [pc, #568]	@ (8002aac <HAL_DMA_IRQHandler+0x248>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a8e      	ldr	r2, [pc, #568]	@ (8002ab0 <HAL_DMA_IRQHandler+0x24c>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002882:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	2208      	movs	r2, #8
 8002890:	409a      	lsls	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	2208      	movs	r2, #8
 80028be:	409a      	lsls	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	2201      	movs	r2, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	f043 0202 	orr.w	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	2204      	movs	r2, #4
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	2204      	movs	r2, #4
 800292a:	409a      	lsls	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	2210      	movs	r2, #16
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d043      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03c      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	2210      	movs	r2, #16
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d024      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e01f      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e016      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0208 	bic.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	2220      	movs	r2, #32
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 808f 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8087 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	2220      	movs	r2, #32
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d136      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0216 	bic.w	r2, r2, #22
 8002a1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_DMA_IRQHandler+0x1da>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0208 	bic.w	r2, r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	223f      	movs	r2, #63	@ 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d07e      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
        }
        return;
 8002a7a:	e079      	b.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d031      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e02c      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
 8002aaa:	bf00      	nop
 8002aac:	2000000c 	.word	0x2000000c
 8002ab0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d023      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e01e      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0210 	bic.w	r2, r2, #16
 8002ae2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d307      	bcc.n	8002b4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f2      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x2cc>
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
 8002b6e:	e000      	b.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b70:	bf00      	nop
    }
  }
}
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b40      	cmp	r3, #64	@ 0x40
 8002ba4:	d108      	bne.n	8002bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bb6:	e007      	b.n	8002bc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3b10      	subs	r3, #16
 8002be4:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <DMA_CalcBaseAndBitshift+0x64>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bee:	4a13      	ldr	r2, [pc, #76]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x68>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d909      	bls.n	8002c16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	1d1a      	adds	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c14:	e007      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	08005e08 	.word	0x08005e08

08002c40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d856      	bhi.n	8002d0e <DMA_CheckFifoParam+0xce>
 8002c60:	a201      	add	r2, pc, #4	@ (adr r2, 8002c68 <DMA_CheckFifoParam+0x28>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c8b 	.word	0x08002c8b
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002d0f 	.word	0x08002d0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d046      	beq.n	8002d12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e043      	b.n	8002d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c92:	d140      	bne.n	8002d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e03d      	b.n	8002d16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca2:	d121      	bne.n	8002ce8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d837      	bhi.n	8002d1a <DMA_CheckFifoParam+0xda>
 8002caa:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <DMA_CheckFifoParam+0x70>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cc7 	.word	0x08002cc7
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002cd9 	.word	0x08002cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e030      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d025      	beq.n	8002d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e022      	b.n	8002d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce6:	e01c      	b.n	8002d22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d903      	bls.n	8002cf6 <DMA_CheckFifoParam+0xb6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf4:	e018      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e015      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e00b      	b.n	8002d26 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e00a      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e008      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e006      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e004      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
    }
  } 
  
  return status; 
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e16b      	b.n	800302c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 815a 	bne.w	8003026 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d005      	beq.n	8002d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d130      	bne.n	8002dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 0201 	and.w	r2, r3, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d017      	beq.n	8002e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d123      	bne.n	8002e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80b4 	beq.w	8003026 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	4a5f      	ldr	r2, [pc, #380]	@ (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ece:	4b5d      	ldr	r3, [pc, #372]	@ (8003044 <HAL_GPIO_Init+0x30c>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a5b      	ldr	r2, [pc, #364]	@ (8003048 <HAL_GPIO_Init+0x310>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	@ (800304c <HAL_GPIO_Init+0x314>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a51      	ldr	r2, [pc, #324]	@ (8003050 <HAL_GPIO_Init+0x318>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d025      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a50      	ldr	r2, [pc, #320]	@ (8003054 <HAL_GPIO_Init+0x31c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	@ (8003058 <HAL_GPIO_Init+0x320>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x216>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4d      	ldr	r2, [pc, #308]	@ (8003060 <HAL_GPIO_Init+0x328>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	@ (8003064 <HAL_GPIO_Init+0x32c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x20e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	@ (8003068 <HAL_GPIO_Init+0x330>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x20a>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00e      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f42:	2308      	movs	r3, #8
 8002f44:	e00c      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f46:	2306      	movs	r3, #6
 8002f48:	e00a      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	e008      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f002 0203 	and.w	r2, r2, #3
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4093      	lsls	r3, r2
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f70:	4935      	ldr	r1, [pc, #212]	@ (8003048 <HAL_GPIO_Init+0x310>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	3302      	adds	r3, #2
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fa2:	4a32      	ldr	r2, [pc, #200]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa8:	4b30      	ldr	r3, [pc, #192]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fcc:	4a27      	ldr	r2, [pc, #156]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd2:	4b26      	ldr	r3, [pc, #152]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003020:	4a12      	ldr	r2, [pc, #72]	@ (800306c <HAL_GPIO_Init+0x334>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3301      	adds	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f ae90 	bls.w	8002d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3724      	adds	r7, #36	@ 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40013800 	.word	0x40013800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020400 	.word	0x40020400
 8003054:	40020800 	.word	0x40020800
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40021000 	.word	0x40021000
 8003060:	40021400 	.word	0x40021400
 8003064:	40021800 	.word	0x40021800
 8003068:	40021c00 	.word	0x40021c00
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e267      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d075      	beq.n	80031de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030f2:	4b88      	ldr	r3, [pc, #544]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d00c      	beq.n	8003118 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b85      	ldr	r3, [pc, #532]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003106:	2b08      	cmp	r3, #8
 8003108:	d112      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b82      	ldr	r3, [pc, #520]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003116:	d10b      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	4b7e      	ldr	r3, [pc, #504]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d05b      	beq.n	80031dc <HAL_RCC_OscConfig+0x108>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d157      	bne.n	80031dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e242      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003138:	d106      	bne.n	8003148 <HAL_RCC_OscConfig+0x74>
 800313a:	4b76      	ldr	r3, [pc, #472]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a75      	ldr	r2, [pc, #468]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e01d      	b.n	8003184 <HAL_RCC_OscConfig+0xb0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x98>
 8003152:	4b70      	ldr	r3, [pc, #448]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6f      	ldr	r2, [pc, #444]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	4b6d      	ldr	r3, [pc, #436]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6c      	ldr	r2, [pc, #432]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0xb0>
 800316c:	4b69      	ldr	r3, [pc, #420]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a68      	ldr	r2, [pc, #416]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b66      	ldr	r3, [pc, #408]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fc42 	bl	8001a14 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe fc3e 	bl	8001a14 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	@ 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e207      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0xc0>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fc2e 	bl	8001a14 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fc2a 	bl	8001a14 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e1f3      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	4b51      	ldr	r3, [pc, #324]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0xe8>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d063      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d11c      	bne.n	800323c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b44      	ldr	r3, [pc, #272]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCC_OscConfig+0x152>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e1c7      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b3b      	ldr	r3, [pc, #236]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4937      	ldr	r1, [pc, #220]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	e03a      	b.n	80032b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	4b34      	ldr	r3, [pc, #208]	@ (8003318 <HAL_RCC_OscConfig+0x244>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe fbe3 	bl	8001a14 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003252:	f7fe fbdf 	bl	8001a14 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1a8      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4925      	ldr	r1, [pc, #148]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <HAL_RCC_OscConfig+0x244>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fbc2 	bl	8001a14 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003294:	f7fe fbbe 	bl	8001a14 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e187      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d036      	beq.n	800332c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <HAL_RCC_OscConfig+0x248>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fe fba2 	bl	8001a14 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe fb9e 	bl	8001a14 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e167      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCC_OscConfig+0x240>)
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x200>
 80032f2:	e01b      	b.n	800332c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_RCC_OscConfig+0x248>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fb8b 	bl	8001a14 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e00e      	b.n	8003320 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003302:	f7fe fb87 	bl	8001a14 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d907      	bls.n	8003320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e150      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b88      	ldr	r3, [pc, #544]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8097 	beq.w	8003468 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b81      	ldr	r3, [pc, #516]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b7d      	ldr	r3, [pc, #500]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	4a7c      	ldr	r2, [pc, #496]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	@ 0x40
 800335a:	4b7a      	ldr	r3, [pc, #488]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b77      	ldr	r3, [pc, #476]	@ (8003548 <HAL_RCC_OscConfig+0x474>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b74      	ldr	r3, [pc, #464]	@ (8003548 <HAL_RCC_OscConfig+0x474>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a73      	ldr	r2, [pc, #460]	@ (8003548 <HAL_RCC_OscConfig+0x474>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fe fb47 	bl	8001a14 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe fb43 	bl	8001a14 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e10c      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <HAL_RCC_OscConfig+0x474>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x2ea>
 80033b0:	4b64      	ldr	r3, [pc, #400]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a63      	ldr	r2, [pc, #396]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x324>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x30c>
 80033c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x324>
 80033e0:	4b58      	ldr	r3, [pc, #352]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e4:	4a57      	ldr	r2, [pc, #348]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ec:	4b55      	ldr	r3, [pc, #340]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	4a54      	ldr	r2, [pc, #336]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fb08 	bl	8001a14 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fe fb04 	bl	8001a14 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0cb      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	4b49      	ldr	r3, [pc, #292]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCC_OscConfig+0x334>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fe faf2 	bl	8001a14 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe faee 	bl	8001a14 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0b5      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	4b3e      	ldr	r3, [pc, #248]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ee      	bne.n	8003434 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	4a38      	ldr	r2, [pc, #224]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a1 	beq.w	80035b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003472:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	d05c      	beq.n	8003538 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d141      	bne.n	800350a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b31      	ldr	r3, [pc, #196]	@ (800354c <HAL_RCC_OscConfig+0x478>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fac2 	bl	8001a14 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fabe 	bl	8001a14 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e087      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b27      	ldr	r3, [pc, #156]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	019b      	lsls	r3, r3, #6
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	491b      	ldr	r1, [pc, #108]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x478>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe fa97 	bl	8001a14 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe fa93 	bl	8001a14 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e05c      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fc:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x416>
 8003508:	e054      	b.n	80035b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <HAL_RCC_OscConfig+0x478>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe fa80 	bl	8001a14 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7fe fa7c 	bl	8001a14 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e045      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_OscConfig+0x470>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x444>
 8003536:	e03d      	b.n	80035b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e038      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
 8003544:	40023800 	.word	0x40023800
 8003548:	40007000 	.word	0x40007000
 800354c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_RCC_OscConfig+0x4ec>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d028      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d121      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d11a      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003586:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003588:	4293      	cmp	r3, r2
 800358a:	d111      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	3b01      	subs	r3, #1
 800359a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800

080035c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0cc      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b68      	ldr	r3, [pc, #416]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d90c      	bls.n	8003600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b65      	ldr	r3, [pc, #404]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b63      	ldr	r3, [pc, #396]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b8      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003618:	4b59      	ldr	r3, [pc, #356]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a58      	ldr	r2, [pc, #352]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003630:	4b53      	ldr	r3, [pc, #332]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a52      	ldr	r2, [pc, #328]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800363a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b50      	ldr	r3, [pc, #320]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	494d      	ldr	r1, [pc, #308]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d044      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d119      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d003      	beq.n	8003682 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	2b03      	cmp	r3, #3
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b3f      	ldr	r3, [pc, #252]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e067      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b37      	ldr	r3, [pc, #220]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4934      	ldr	r1, [pc, #208]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7fe f9ae 	bl	8001a14 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7fe f9aa 	bl	8001a14 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e04f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d20c      	bcs.n	800370c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b22      	ldr	r3, [pc, #136]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b20      	ldr	r3, [pc, #128]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e032      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003718:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4916      	ldr	r1, [pc, #88]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003736:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	490e      	ldr	r1, [pc, #56]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800374a:	f000 f821 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	490a      	ldr	r1, [pc, #40]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	4a09      	ldr	r2, [pc, #36]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe f90e 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00
 8003780:	40023800 	.word	0x40023800
 8003784:	08005df0 	.word	0x08005df0
 8003788:	2000000c 	.word	0x2000000c
 800378c:	20000010 	.word	0x20000010

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b090      	sub	sp, #64	@ 0x40
 8003796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a8:	4b59      	ldr	r3, [pc, #356]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x180>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d00d      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x40>
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	f200 80a1 	bhi.w	80038fc <HAL_RCC_GetSysClockFreq+0x16c>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x34>
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x3a>
 80037c2:	e09b      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b53      	ldr	r3, [pc, #332]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x184>)
 80037c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037c8:	e09b      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ca:	4b53      	ldr	r3, [pc, #332]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x188>)
 80037cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037ce:	e098      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037da:	4b4d      	ldr	r3, [pc, #308]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x180>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d028      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x180>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	2200      	movs	r2, #0
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037f8:	2100      	movs	r1, #0
 80037fa:	4b47      	ldr	r3, [pc, #284]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x188>)
 80037fc:	fb03 f201 	mul.w	r2, r3, r1
 8003800:	2300      	movs	r3, #0
 8003802:	fb00 f303 	mul.w	r3, r0, r3
 8003806:	4413      	add	r3, r2
 8003808:	4a43      	ldr	r2, [pc, #268]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x188>)
 800380a:	fba0 1202 	umull	r1, r2, r0, r2
 800380e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003810:	460a      	mov	r2, r1
 8003812:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003816:	4413      	add	r3, r2
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381c:	2200      	movs	r2, #0
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	61fa      	str	r2, [r7, #28]
 8003822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003826:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800382a:	f7fc fee5 	bl	80005f8 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4613      	mov	r3, r2
 8003834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003836:	e053      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003838:	4b35      	ldr	r3, [pc, #212]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x180>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	2200      	movs	r2, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	617a      	str	r2, [r7, #20]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800384a:	f04f 0b00 	mov.w	fp, #0
 800384e:	4652      	mov	r2, sl
 8003850:	465b      	mov	r3, fp
 8003852:	f04f 0000 	mov.w	r0, #0
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	0159      	lsls	r1, r3, #5
 800385c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003860:	0150      	lsls	r0, r2, #5
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	ebb2 080a 	subs.w	r8, r2, sl
 800386a:	eb63 090b 	sbc.w	r9, r3, fp
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800387a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800387e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003882:	ebb2 0408 	subs.w	r4, r2, r8
 8003886:	eb63 0509 	sbc.w	r5, r3, r9
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	00eb      	lsls	r3, r5, #3
 8003894:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003898:	00e2      	lsls	r2, r4, #3
 800389a:	4614      	mov	r4, r2
 800389c:	461d      	mov	r5, r3
 800389e:	eb14 030a 	adds.w	r3, r4, sl
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	eb45 030b 	adc.w	r3, r5, fp
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038b6:	4629      	mov	r1, r5
 80038b8:	028b      	lsls	r3, r1, #10
 80038ba:	4621      	mov	r1, r4
 80038bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c0:	4621      	mov	r1, r4
 80038c2:	028a      	lsls	r2, r1, #10
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ca:	2200      	movs	r2, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	60fa      	str	r2, [r7, #12]
 80038d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d4:	f7fc fe90 	bl	80005f8 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x180>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	3301      	adds	r3, #1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038fa:	e002      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x184>)
 80038fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003904:	4618      	mov	r0, r3
 8003906:	3740      	adds	r7, #64	@ 0x40
 8003908:	46bd      	mov	sp, r7
 800390a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	00f42400 	.word	0x00f42400
 8003918:	017d7840 	.word	0x017d7840

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000000c 	.word	0x2000000c

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a9b      	lsrs	r3, r3, #10
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4903      	ldr	r1, [pc, #12]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800
 8003958:	08005e00 	.word	0x08005e00

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003960:	f7ff ffdc 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0b5b      	lsrs	r3, r3, #13
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	@ (8003980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	08005e00 	.word	0x08005e00

08003984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e041      	b.n	8003a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fe2a 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fbb2 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e046      	b.n	8003aca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a23      	ldr	r2, [pc, #140]	@ (8003ad8 <HAL_TIM_Base_Start+0xb4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <HAL_TIM_Base_Start+0x70>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a56:	d01d      	beq.n	8003a94 <HAL_TIM_Base_Start+0x70>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003adc <HAL_TIM_Base_Start+0xb8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <HAL_TIM_Base_Start+0x70>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae0 <HAL_TIM_Base_Start+0xbc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_TIM_Base_Start+0x70>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <HAL_TIM_Base_Start+0xc0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_TIM_Base_Start+0x70>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <HAL_TIM_Base_Start+0xc4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_TIM_Base_Start+0x70>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	@ (8003aec <HAL_TIM_Base_Start+0xc8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIM_Base_Start+0x70>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a18      	ldr	r2, [pc, #96]	@ (8003af0 <HAL_TIM_Base_Start+0xcc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d111      	bne.n	8003ab8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d010      	beq.n	8003ac8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	e007      	b.n	8003ac8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40010400 	.word	0x40010400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40001800 	.word	0x40001800

08003af4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e041      	b.n	8003b8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f839 	bl	8003b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 fafa 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_TIM_PWM_Start+0x24>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e022      	b.n	8003c12 <HAL_TIM_PWM_Start+0x6a>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d109      	bne.n	8003be6 <HAL_TIM_PWM_Start+0x3e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e015      	b.n	8003c12 <HAL_TIM_PWM_Start+0x6a>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d109      	bne.n	8003c00 <HAL_TIM_PWM_Start+0x58>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e008      	b.n	8003c12 <HAL_TIM_PWM_Start+0x6a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07c      	b.n	8003d14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x82>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c28:	e013      	b.n	8003c52 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x92>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	e00b      	b.n	8003c52 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0xa2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c48:	e003      	b.n	8003c52 <HAL_TIM_PWM_Start+0xaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fd56 	bl	800470c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2d      	ldr	r2, [pc, #180]	@ (8003d1c <HAL_TIM_PWM_Start+0x174>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIM_PWM_Start+0xcc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d20 <HAL_TIM_PWM_Start+0x178>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_PWM_Start+0xd0>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_TIM_PWM_Start+0xd2>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <HAL_TIM_PWM_Start+0x174>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_TIM_PWM_Start+0x136>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca0:	d01d      	beq.n	8003cde <HAL_TIM_PWM_Start+0x136>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d24 <HAL_TIM_PWM_Start+0x17c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_TIM_PWM_Start+0x136>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <HAL_TIM_PWM_Start+0x180>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_TIM_PWM_Start+0x136>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1c      	ldr	r2, [pc, #112]	@ (8003d2c <HAL_TIM_PWM_Start+0x184>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_TIM_PWM_Start+0x136>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a16      	ldr	r2, [pc, #88]	@ (8003d20 <HAL_TIM_PWM_Start+0x178>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_TIM_PWM_Start+0x136>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a18      	ldr	r2, [pc, #96]	@ (8003d30 <HAL_TIM_PWM_Start+0x188>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIM_PWM_Start+0x136>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	@ (8003d34 <HAL_TIM_PWM_Start+0x18c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d111      	bne.n	8003d02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b06      	cmp	r3, #6
 8003cee:	d010      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d00:	e007      	b.n	8003d12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40010400 	.word	0x40010400
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40001800 	.word	0x40001800

08003d38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	6839      	ldr	r1, [r7, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fcde 	bl	800470c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2e      	ldr	r2, [pc, #184]	@ (8003e10 <HAL_TIM_PWM_Stop+0xd8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_TIM_PWM_Stop+0x2c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e14 <HAL_TIM_PWM_Stop+0xdc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_PWM_Stop+0x30>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_TIM_PWM_Stop+0x32>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d017      	beq.n	8003d9e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <HAL_TIM_PWM_Stop+0x66>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_TIM_PWM_Stop+0x66>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <HAL_TIM_PWM_Stop+0x96>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a1a      	ldr	r2, [r3, #32]
 8003db4:	f240 4344 	movw	r3, #1092	@ 0x444
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_TIM_PWM_Stop+0x96>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_PWM_Stop+0xa6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ddc:	e013      	b.n	8003e06 <HAL_TIM_PWM_Stop+0xce>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d104      	bne.n	8003dee <HAL_TIM_PWM_Stop+0xb6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dec:	e00b      	b.n	8003e06 <HAL_TIM_PWM_Stop+0xce>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d104      	bne.n	8003dfe <HAL_TIM_PWM_Stop+0xc6>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dfc:	e003      	b.n	8003e06 <HAL_TIM_PWM_Stop+0xce>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010400 	.word	0x40010400

08003e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0ae      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	f200 809f 	bhi.w	8003f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e46:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e81 	.word	0x08003e81
 8003e50:	08003f85 	.word	0x08003f85
 8003e54:	08003f85 	.word	0x08003f85
 8003e58:	08003f85 	.word	0x08003f85
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003f85 	.word	0x08003f85
 8003e64:	08003f85 	.word	0x08003f85
 8003e68:	08003f85 	.word	0x08003f85
 8003e6c:	08003f03 	.word	0x08003f03
 8003e70:	08003f85 	.word	0x08003f85
 8003e74:	08003f85 	.word	0x08003f85
 8003e78:	08003f85 	.word	0x08003f85
 8003e7c:	08003f43 	.word	0x08003f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f9f6 	bl	8004278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	619a      	str	r2, [r3, #24]
      break;
 8003ebe:	e064      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fa46 	bl	8004358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      break;
 8003f00:	e043      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fa9b 	bl	8004444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0204 	bic.w	r2, r2, #4
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
      break;
 8003f40:	e023      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 faef 	bl	800452c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	021a      	lsls	r2, r3, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
      break;
 8003f82:	e002      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e0b4      	b.n	8004122 <HAL_TIM_ConfigClockSource+0x186>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff0:	d03e      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0xd4>
 8003ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff6:	f200 8087 	bhi.w	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffe:	f000 8086 	beq.w	800410e <HAL_TIM_ConfigClockSource+0x172>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004006:	d87f      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b70      	cmp	r3, #112	@ 0x70
 800400a:	d01a      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xa6>
 800400c:	2b70      	cmp	r3, #112	@ 0x70
 800400e:	d87b      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004010:	2b60      	cmp	r3, #96	@ 0x60
 8004012:	d050      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004014:	2b60      	cmp	r3, #96	@ 0x60
 8004016:	d877      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004018:	2b50      	cmp	r3, #80	@ 0x50
 800401a:	d03c      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xfa>
 800401c:	2b50      	cmp	r3, #80	@ 0x50
 800401e:	d873      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d058      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004024:	2b40      	cmp	r3, #64	@ 0x40
 8004026:	d86f      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b30      	cmp	r3, #48	@ 0x30
 800402a:	d064      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 800402c:	2b30      	cmp	r3, #48	@ 0x30
 800402e:	d86b      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b20      	cmp	r3, #32
 8004032:	d060      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d867      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05c      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 800403c:	2b10      	cmp	r3, #16
 800403e:	d05a      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	e062      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004052:	f000 fb3b 	bl	80046cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	609a      	str	r2, [r3, #8]
      break;
 800406e:	e04f      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004080:	f000 fb24 	bl	80046cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004092:	609a      	str	r2, [r3, #8]
      break;
 8004094:	e03c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	461a      	mov	r2, r3
 80040a4:	f000 fa98 	bl	80045d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2150      	movs	r1, #80	@ 0x50
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 faf1 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 80040b4:	e02c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 fab7 	bl	8004636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2160      	movs	r1, #96	@ 0x60
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fae1 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 80040d4:	e01c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	461a      	mov	r2, r3
 80040e4:	f000 fa78 	bl	80045d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2140      	movs	r1, #64	@ 0x40
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fad1 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 80040f4:	e00c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f000 fac8 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 8004106:	e003      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e000      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800410e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a43      	ldr	r2, [pc, #268]	@ (800424c <TIM_Base_SetConfig+0x120>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a40      	ldr	r2, [pc, #256]	@ (8004250 <TIM_Base_SetConfig+0x124>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3f      	ldr	r2, [pc, #252]	@ (8004254 <TIM_Base_SetConfig+0x128>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3e      	ldr	r2, [pc, #248]	@ (8004258 <TIM_Base_SetConfig+0x12c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3d      	ldr	r2, [pc, #244]	@ (800425c <TIM_Base_SetConfig+0x130>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a32      	ldr	r2, [pc, #200]	@ (800424c <TIM_Base_SetConfig+0x120>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d02b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418c:	d027      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2f      	ldr	r2, [pc, #188]	@ (8004250 <TIM_Base_SetConfig+0x124>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d023      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2e      	ldr	r2, [pc, #184]	@ (8004254 <TIM_Base_SetConfig+0x128>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004258 <TIM_Base_SetConfig+0x12c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	@ (800425c <TIM_Base_SetConfig+0x130>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d017      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004260 <TIM_Base_SetConfig+0x134>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004264 <TIM_Base_SetConfig+0x138>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a29      	ldr	r2, [pc, #164]	@ (8004268 <TIM_Base_SetConfig+0x13c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	@ (800426c <TIM_Base_SetConfig+0x140>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	@ (8004270 <TIM_Base_SetConfig+0x144>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	@ (8004274 <TIM_Base_SetConfig+0x148>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a0e      	ldr	r2, [pc, #56]	@ (800424c <TIM_Base_SetConfig+0x120>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0xf2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a10      	ldr	r2, [pc, #64]	@ (800425c <TIM_Base_SetConfig+0x130>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d103      	bne.n	8004226 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f043 0204 	orr.w	r2, r3, #4
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	601a      	str	r2, [r3, #0]
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40010400 	.word	0x40010400
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800
 800426c:	40001800 	.word	0x40001800
 8004270:	40001c00 	.word	0x40001c00
 8004274:	40002000 	.word	0x40002000

08004278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f023 0201 	bic.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f023 0302 	bic.w	r3, r3, #2
 80042c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a20      	ldr	r2, [pc, #128]	@ (8004350 <TIM_OC1_SetConfig+0xd8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC1_SetConfig+0x64>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004354 <TIM_OC1_SetConfig+0xdc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d10c      	bne.n	80042f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0308 	bic.w	r3, r3, #8
 80042e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <TIM_OC1_SetConfig+0xd8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_OC1_SetConfig+0x8e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a14      	ldr	r2, [pc, #80]	@ (8004354 <TIM_OC1_SetConfig+0xdc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d111      	bne.n	800432a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800430c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40010000 	.word	0x40010000
 8004354:	40010400 	.word	0x40010400

08004358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f023 0210 	bic.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800438e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f023 0320 	bic.w	r3, r3, #32
 80043a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a22      	ldr	r2, [pc, #136]	@ (800443c <TIM_OC2_SetConfig+0xe4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_OC2_SetConfig+0x68>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a21      	ldr	r2, [pc, #132]	@ (8004440 <TIM_OC2_SetConfig+0xe8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d10d      	bne.n	80043dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a17      	ldr	r2, [pc, #92]	@ (800443c <TIM_OC2_SetConfig+0xe4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC2_SetConfig+0x94>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a16      	ldr	r2, [pc, #88]	@ (8004440 <TIM_OC2_SetConfig+0xe8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d113      	bne.n	8004414 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40010400 	.word	0x40010400

08004444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800448c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a21      	ldr	r2, [pc, #132]	@ (8004524 <TIM_OC3_SetConfig+0xe0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC3_SetConfig+0x66>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a20      	ldr	r2, [pc, #128]	@ (8004528 <TIM_OC3_SetConfig+0xe4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10d      	bne.n	80044c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a16      	ldr	r2, [pc, #88]	@ (8004524 <TIM_OC3_SetConfig+0xe0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC3_SetConfig+0x92>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a15      	ldr	r2, [pc, #84]	@ (8004528 <TIM_OC3_SetConfig+0xe4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d113      	bne.n	80044fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	621a      	str	r2, [r3, #32]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40010000 	.word	0x40010000
 8004528:	40010400 	.word	0x40010400

0800452c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a12      	ldr	r2, [pc, #72]	@ (80045d0 <TIM_OC4_SetConfig+0xa4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC4_SetConfig+0x68>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a11      	ldr	r2, [pc, #68]	@ (80045d4 <TIM_OC4_SetConfig+0xa8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d109      	bne.n	80045a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800459a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010400 	.word	0x40010400

080045d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 030a 	bic.w	r3, r3, #10
 8004614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004636:	b480      	push	{r7}
 8004638:	b087      	sub	sp, #28
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f023 0210 	bic.w	r2, r3, #16
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004672:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f043 0307 	orr.w	r3, r3, #7
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	2201      	movs	r2, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e05a      	b.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a21      	ldr	r2, [pc, #132]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d022      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047bc:	d01d      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a15      	ldr	r2, [pc, #84]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10c      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4313      	orrs	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40010000 	.word	0x40010000
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40010400 	.word	0x40010400
 8004848:	40014000 	.word	0x40014000
 800484c:	40001800 	.word	0x40001800

08004850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e042      	b.n	80048e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc ff72 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	@ 0x24
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f973 	bl	8004b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	@ 0x28
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b20      	cmp	r3, #32
 800490e:	d175      	bne.n	80049fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_UART_Transmit+0x2c>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e06e      	b.n	80049fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	@ 0x21
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fd f871 	bl	8001a14 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004948:	d108      	bne.n	800495c <HAL_UART_Transmit+0x6c>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e003      	b.n	8004964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004960:	2300      	movs	r3, #0
 8004962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004964:	e02e      	b.n	80049c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	2180      	movs	r1, #128	@ 0x80
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f848 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e03a      	b.n	80049fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	3302      	adds	r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e007      	b.n	80049b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cb      	bne.n	8004966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	@ 0x40
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f814 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e006      	b.n	80049fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e000      	b.n	80049fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b086      	sub	sp, #24
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4613      	mov	r3, r2
 8004a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a16:	e03b      	b.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d037      	beq.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a20:	f7fc fff8 	bl	8001a14 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	6a3a      	ldr	r2, [r7, #32]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d302      	bcc.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e03a      	b.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d023      	beq.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b80      	cmp	r3, #128	@ 0x80
 8004a4c:	d020      	beq.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d01d      	beq.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d116      	bne.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f81d 	bl	8004ab8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2208      	movs	r2, #8
 8004a82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e00f      	b.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d0b4      	beq.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b095      	sub	sp, #84	@ 0x54
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ae0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e5      	bne.n	8004ac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3314      	adds	r3, #20
 8004afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e5      	bne.n	8004af4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d119      	bne.n	8004b64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f023 0310 	bic.w	r3, r3, #16
 8004b46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b50:	61ba      	str	r2, [r7, #24]
 8004b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6979      	ldr	r1, [r7, #20]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b72:	bf00      	nop
 8004b74:	3754      	adds	r7, #84	@ 0x54
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b0c0      	sub	sp, #256	@ 0x100
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	68d9      	ldr	r1, [r3, #12]
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	ea40 0301 	orr.w	r3, r0, r1
 8004ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bd8:	f021 010c 	bic.w	r1, r1, #12
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004be6:	430b      	orrs	r3, r1
 8004be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfa:	6999      	ldr	r1, [r3, #24]
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	ea40 0301 	orr.w	r3, r0, r1
 8004c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8004e4c <UART_SetConfig+0x2cc>)
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d005      	beq.n	8004c20 <UART_SetConfig+0xa0>
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e50 <UART_SetConfig+0x2d0>)
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d104      	bne.n	8004c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7fe fe9c 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8004c24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c28:	e003      	b.n	8004c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c2a:	f7fe fe83 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8004c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c3c:	f040 810c 	bne.w	8004e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	1891      	adds	r1, r2, r2
 8004c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c5a:	415b      	adcs	r3, r3
 8004c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c62:	4621      	mov	r1, r4
 8004c64:	eb12 0801 	adds.w	r8, r2, r1
 8004c68:	4629      	mov	r1, r5
 8004c6a:	eb43 0901 	adc.w	r9, r3, r1
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c82:	4690      	mov	r8, r2
 8004c84:	4699      	mov	r9, r3
 8004c86:	4623      	mov	r3, r4
 8004c88:	eb18 0303 	adds.w	r3, r8, r3
 8004c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c90:	462b      	mov	r3, r5
 8004c92:	eb49 0303 	adc.w	r3, r9, r3
 8004c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cae:	460b      	mov	r3, r1
 8004cb0:	18db      	adds	r3, r3, r3
 8004cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	eb42 0303 	adc.w	r3, r2, r3
 8004cba:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cc4:	f7fb fc98 	bl	80005f8 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4b61      	ldr	r3, [pc, #388]	@ (8004e54 <UART_SetConfig+0x2d4>)
 8004cce:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	011c      	lsls	r4, r3, #4
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8004cfe:	4649      	mov	r1, r9
 8004d00:	eb43 0b01 	adc.w	fp, r3, r1
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d18:	4692      	mov	sl, r2
 8004d1a:	469b      	mov	fp, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d26:	464b      	mov	r3, r9
 8004d28:	eb4b 0303 	adc.w	r3, fp, r3
 8004d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d44:	460b      	mov	r3, r1
 8004d46:	18db      	adds	r3, r3, r3
 8004d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	eb42 0303 	adc.w	r3, r2, r3
 8004d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d5a:	f7fb fc4d 	bl	80005f8 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	4b3b      	ldr	r3, [pc, #236]	@ (8004e54 <UART_SetConfig+0x2d4>)
 8004d66:	fba3 2301 	umull	r2, r3, r3, r1
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2264      	movs	r2, #100	@ 0x64
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	1acb      	subs	r3, r1, r3
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d7a:	4b36      	ldr	r3, [pc, #216]	@ (8004e54 <UART_SetConfig+0x2d4>)
 8004d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d88:	441c      	add	r4, r3
 8004d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	1891      	adds	r1, r2, r2
 8004da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004da4:	415b      	adcs	r3, r3
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dac:	4641      	mov	r1, r8
 8004dae:	1851      	adds	r1, r2, r1
 8004db0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004db2:	4649      	mov	r1, r9
 8004db4:	414b      	adcs	r3, r1
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	00cb      	lsls	r3, r1, #3
 8004dc8:	4651      	mov	r1, sl
 8004dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dce:	4651      	mov	r1, sl
 8004dd0:	00ca      	lsls	r2, r1, #3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4642      	mov	r2, r8
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004de0:	464b      	mov	r3, r9
 8004de2:	460a      	mov	r2, r1
 8004de4:	eb42 0303 	adc.w	r3, r2, r3
 8004de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004df8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e00:	460b      	mov	r3, r1
 8004e02:	18db      	adds	r3, r3, r3
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e06:	4613      	mov	r3, r2
 8004e08:	eb42 0303 	adc.w	r3, r2, r3
 8004e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e16:	f7fb fbef 	bl	80005f8 <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <UART_SetConfig+0x2d4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	@ 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	3332      	adds	r3, #50	@ 0x32
 8004e32:	4a08      	ldr	r2, [pc, #32]	@ (8004e54 <UART_SetConfig+0x2d4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 0207 	and.w	r2, r3, #7
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4422      	add	r2, r4
 8004e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e48:	e106      	b.n	8005058 <UART_SetConfig+0x4d8>
 8004e4a:	bf00      	nop
 8004e4c:	40011000 	.word	0x40011000
 8004e50:	40011400 	.word	0x40011400
 8004e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	6239      	str	r1, [r7, #32]
 8004e72:	415b      	adcs	r3, r3
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	1854      	adds	r4, r2, r1
 8004e7e:	4649      	mov	r1, r9
 8004e80:	eb43 0501 	adc.w	r5, r3, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	00eb      	lsls	r3, r5, #3
 8004e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e92:	00e2      	lsls	r2, r4, #3
 8004e94:	4614      	mov	r4, r2
 8004e96:	461d      	mov	r5, r3
 8004e98:	4643      	mov	r3, r8
 8004e9a:	18e3      	adds	r3, r4, r3
 8004e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	eb45 0303 	adc.w	r3, r5, r3
 8004ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	008b      	lsls	r3, r1, #2
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	008a      	lsls	r2, r1, #2
 8004ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ed8:	f7fb fb8e 	bl	80005f8 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4b60      	ldr	r3, [pc, #384]	@ (8005064 <UART_SetConfig+0x4e4>)
 8004ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	011c      	lsls	r4, r3, #4
 8004eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	1891      	adds	r1, r2, r2
 8004f02:	61b9      	str	r1, [r7, #24]
 8004f04:	415b      	adcs	r3, r3
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	1851      	adds	r1, r2, r1
 8004f10:	6139      	str	r1, [r7, #16]
 8004f12:	4649      	mov	r1, r9
 8004f14:	414b      	adcs	r3, r1
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f24:	4659      	mov	r1, fp
 8004f26:	00cb      	lsls	r3, r1, #3
 8004f28:	4651      	mov	r1, sl
 8004f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2e:	4651      	mov	r1, sl
 8004f30:	00ca      	lsls	r2, r1, #3
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	189b      	adds	r3, r3, r2
 8004f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f40:	464b      	mov	r3, r9
 8004f42:	460a      	mov	r2, r1
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f64:	4649      	mov	r1, r9
 8004f66:	008b      	lsls	r3, r1, #2
 8004f68:	4641      	mov	r1, r8
 8004f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f6e:	4641      	mov	r1, r8
 8004f70:	008a      	lsls	r2, r1, #2
 8004f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f76:	f7fb fb3f 	bl	80005f8 <__aeabi_uldivmod>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4b38      	ldr	r3, [pc, #224]	@ (8005064 <UART_SetConfig+0x4e4>)
 8004f82:	fba3 2301 	umull	r2, r3, r3, r1
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	2264      	movs	r2, #100	@ 0x64
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	1acb      	subs	r3, r1, r3
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	3332      	adds	r3, #50	@ 0x32
 8004f94:	4a33      	ldr	r2, [pc, #204]	@ (8005064 <UART_SetConfig+0x4e4>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fa0:	441c      	add	r4, r3
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004faa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	1891      	adds	r1, r2, r2
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	415b      	adcs	r3, r3
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	1851      	adds	r1, r2, r1
 8004fc4:	6039      	str	r1, [r7, #0]
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	414b      	adcs	r3, r1
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fd8:	4659      	mov	r1, fp
 8004fda:	00cb      	lsls	r3, r1, #3
 8004fdc:	4651      	mov	r1, sl
 8004fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe2:	4651      	mov	r1, sl
 8004fe4:	00ca      	lsls	r2, r1, #3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4603      	mov	r3, r0
 8004fec:	4642      	mov	r2, r8
 8004fee:	189b      	adds	r3, r3, r2
 8004ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	460a      	mov	r2, r1
 8004ff6:	eb42 0303 	adc.w	r3, r2, r3
 8004ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	663b      	str	r3, [r7, #96]	@ 0x60
 8005006:	667a      	str	r2, [r7, #100]	@ 0x64
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005014:	4649      	mov	r1, r9
 8005016:	008b      	lsls	r3, r1, #2
 8005018:	4641      	mov	r1, r8
 800501a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501e:	4641      	mov	r1, r8
 8005020:	008a      	lsls	r2, r1, #2
 8005022:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005026:	f7fb fae7 	bl	80005f8 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <UART_SetConfig+0x4e4>)
 8005030:	fba3 1302 	umull	r1, r3, r3, r2
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	2164      	movs	r1, #100	@ 0x64
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	3332      	adds	r3, #50	@ 0x32
 8005042:	4a08      	ldr	r2, [pc, #32]	@ (8005064 <UART_SetConfig+0x4e4>)
 8005044:	fba2 2303 	umull	r2, r3, r2, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	f003 020f 	and.w	r2, r3, #15
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4422      	add	r2, r4
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800505e:	46bd      	mov	sp, r7
 8005060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005064:	51eb851f 	.word	0x51eb851f

08005068 <sniprintf>:
 8005068:	b40c      	push	{r2, r3}
 800506a:	b530      	push	{r4, r5, lr}
 800506c:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <sniprintf+0x68>)
 800506e:	1e0c      	subs	r4, r1, #0
 8005070:	681d      	ldr	r5, [r3, #0]
 8005072:	b09d      	sub	sp, #116	@ 0x74
 8005074:	da08      	bge.n	8005088 <sniprintf+0x20>
 8005076:	238b      	movs	r3, #139	@ 0x8b
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	f04f 30ff 	mov.w	r0, #4294967295
 800507e:	b01d      	add	sp, #116	@ 0x74
 8005080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005084:	b002      	add	sp, #8
 8005086:	4770      	bx	lr
 8005088:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800508c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005096:	bf14      	ite	ne
 8005098:	f104 33ff 	addne.w	r3, r4, #4294967295
 800509c:	4623      	moveq	r3, r4
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	9307      	str	r3, [sp, #28]
 80050a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050a6:	9002      	str	r0, [sp, #8]
 80050a8:	9006      	str	r0, [sp, #24]
 80050aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80050b0:	ab21      	add	r3, sp, #132	@ 0x84
 80050b2:	a902      	add	r1, sp, #8
 80050b4:	4628      	mov	r0, r5
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	f000 f994 	bl	80053e4 <_svfiprintf_r>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	bfbc      	itt	lt
 80050c0:	238b      	movlt	r3, #139	@ 0x8b
 80050c2:	602b      	strlt	r3, [r5, #0]
 80050c4:	2c00      	cmp	r4, #0
 80050c6:	d0da      	beq.n	800507e <sniprintf+0x16>
 80050c8:	9b02      	ldr	r3, [sp, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e7d6      	b.n	800507e <sniprintf+0x16>
 80050d0:	20000018 	.word	0x20000018

080050d4 <memset>:
 80050d4:	4402      	add	r2, r0
 80050d6:	4603      	mov	r3, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	d100      	bne.n	80050de <memset+0xa>
 80050dc:	4770      	bx	lr
 80050de:	f803 1b01 	strb.w	r1, [r3], #1
 80050e2:	e7f9      	b.n	80050d8 <memset+0x4>

080050e4 <__errno>:
 80050e4:	4b01      	ldr	r3, [pc, #4]	@ (80050ec <__errno+0x8>)
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000018 	.word	0x20000018

080050f0 <__libc_init_array>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005128 <__libc_init_array+0x38>)
 80050f4:	4c0d      	ldr	r4, [pc, #52]	@ (800512c <__libc_init_array+0x3c>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	2600      	movs	r6, #0
 80050fc:	42a6      	cmp	r6, r4
 80050fe:	d109      	bne.n	8005114 <__libc_init_array+0x24>
 8005100:	4d0b      	ldr	r5, [pc, #44]	@ (8005130 <__libc_init_array+0x40>)
 8005102:	4c0c      	ldr	r4, [pc, #48]	@ (8005134 <__libc_init_array+0x44>)
 8005104:	f000 fe38 	bl	8005d78 <_init>
 8005108:	1b64      	subs	r4, r4, r5
 800510a:	10a4      	asrs	r4, r4, #2
 800510c:	2600      	movs	r6, #0
 800510e:	42a6      	cmp	r6, r4
 8005110:	d105      	bne.n	800511e <__libc_init_array+0x2e>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	f855 3b04 	ldr.w	r3, [r5], #4
 8005118:	4798      	blx	r3
 800511a:	3601      	adds	r6, #1
 800511c:	e7ee      	b.n	80050fc <__libc_init_array+0xc>
 800511e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005122:	4798      	blx	r3
 8005124:	3601      	adds	r6, #1
 8005126:	e7f2      	b.n	800510e <__libc_init_array+0x1e>
 8005128:	08005e4c 	.word	0x08005e4c
 800512c:	08005e4c 	.word	0x08005e4c
 8005130:	08005e4c 	.word	0x08005e4c
 8005134:	08005e50 	.word	0x08005e50

08005138 <__retarget_lock_acquire_recursive>:
 8005138:	4770      	bx	lr

0800513a <__retarget_lock_release_recursive>:
 800513a:	4770      	bx	lr

0800513c <_free_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4605      	mov	r5, r0
 8005140:	2900      	cmp	r1, #0
 8005142:	d041      	beq.n	80051c8 <_free_r+0x8c>
 8005144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005148:	1f0c      	subs	r4, r1, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	bfb8      	it	lt
 800514e:	18e4      	addlt	r4, r4, r3
 8005150:	f000 f8e0 	bl	8005314 <__malloc_lock>
 8005154:	4a1d      	ldr	r2, [pc, #116]	@ (80051cc <_free_r+0x90>)
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	b933      	cbnz	r3, 8005168 <_free_r+0x2c>
 800515a:	6063      	str	r3, [r4, #4]
 800515c:	6014      	str	r4, [r2, #0]
 800515e:	4628      	mov	r0, r5
 8005160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005164:	f000 b8dc 	b.w	8005320 <__malloc_unlock>
 8005168:	42a3      	cmp	r3, r4
 800516a:	d908      	bls.n	800517e <_free_r+0x42>
 800516c:	6820      	ldr	r0, [r4, #0]
 800516e:	1821      	adds	r1, r4, r0
 8005170:	428b      	cmp	r3, r1
 8005172:	bf01      	itttt	eq
 8005174:	6819      	ldreq	r1, [r3, #0]
 8005176:	685b      	ldreq	r3, [r3, #4]
 8005178:	1809      	addeq	r1, r1, r0
 800517a:	6021      	streq	r1, [r4, #0]
 800517c:	e7ed      	b.n	800515a <_free_r+0x1e>
 800517e:	461a      	mov	r2, r3
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	b10b      	cbz	r3, 8005188 <_free_r+0x4c>
 8005184:	42a3      	cmp	r3, r4
 8005186:	d9fa      	bls.n	800517e <_free_r+0x42>
 8005188:	6811      	ldr	r1, [r2, #0]
 800518a:	1850      	adds	r0, r2, r1
 800518c:	42a0      	cmp	r0, r4
 800518e:	d10b      	bne.n	80051a8 <_free_r+0x6c>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	4401      	add	r1, r0
 8005194:	1850      	adds	r0, r2, r1
 8005196:	4283      	cmp	r3, r0
 8005198:	6011      	str	r1, [r2, #0]
 800519a:	d1e0      	bne.n	800515e <_free_r+0x22>
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	6053      	str	r3, [r2, #4]
 80051a2:	4408      	add	r0, r1
 80051a4:	6010      	str	r0, [r2, #0]
 80051a6:	e7da      	b.n	800515e <_free_r+0x22>
 80051a8:	d902      	bls.n	80051b0 <_free_r+0x74>
 80051aa:	230c      	movs	r3, #12
 80051ac:	602b      	str	r3, [r5, #0]
 80051ae:	e7d6      	b.n	800515e <_free_r+0x22>
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	1821      	adds	r1, r4, r0
 80051b4:	428b      	cmp	r3, r1
 80051b6:	bf04      	itt	eq
 80051b8:	6819      	ldreq	r1, [r3, #0]
 80051ba:	685b      	ldreq	r3, [r3, #4]
 80051bc:	6063      	str	r3, [r4, #4]
 80051be:	bf04      	itt	eq
 80051c0:	1809      	addeq	r1, r1, r0
 80051c2:	6021      	streq	r1, [r4, #0]
 80051c4:	6054      	str	r4, [r2, #4]
 80051c6:	e7ca      	b.n	800515e <_free_r+0x22>
 80051c8:	bd38      	pop	{r3, r4, r5, pc}
 80051ca:	bf00      	nop
 80051cc:	20000468 	.word	0x20000468

080051d0 <sbrk_aligned>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005210 <sbrk_aligned+0x40>)
 80051d4:	460c      	mov	r4, r1
 80051d6:	6831      	ldr	r1, [r6, #0]
 80051d8:	4605      	mov	r5, r0
 80051da:	b911      	cbnz	r1, 80051e2 <sbrk_aligned+0x12>
 80051dc:	f000 fba4 	bl	8005928 <_sbrk_r>
 80051e0:	6030      	str	r0, [r6, #0]
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 fb9f 	bl	8005928 <_sbrk_r>
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	d103      	bne.n	80051f6 <sbrk_aligned+0x26>
 80051ee:	f04f 34ff 	mov.w	r4, #4294967295
 80051f2:	4620      	mov	r0, r4
 80051f4:	bd70      	pop	{r4, r5, r6, pc}
 80051f6:	1cc4      	adds	r4, r0, #3
 80051f8:	f024 0403 	bic.w	r4, r4, #3
 80051fc:	42a0      	cmp	r0, r4
 80051fe:	d0f8      	beq.n	80051f2 <sbrk_aligned+0x22>
 8005200:	1a21      	subs	r1, r4, r0
 8005202:	4628      	mov	r0, r5
 8005204:	f000 fb90 	bl	8005928 <_sbrk_r>
 8005208:	3001      	adds	r0, #1
 800520a:	d1f2      	bne.n	80051f2 <sbrk_aligned+0x22>
 800520c:	e7ef      	b.n	80051ee <sbrk_aligned+0x1e>
 800520e:	bf00      	nop
 8005210:	20000464 	.word	0x20000464

08005214 <_malloc_r>:
 8005214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005218:	1ccd      	adds	r5, r1, #3
 800521a:	f025 0503 	bic.w	r5, r5, #3
 800521e:	3508      	adds	r5, #8
 8005220:	2d0c      	cmp	r5, #12
 8005222:	bf38      	it	cc
 8005224:	250c      	movcc	r5, #12
 8005226:	2d00      	cmp	r5, #0
 8005228:	4606      	mov	r6, r0
 800522a:	db01      	blt.n	8005230 <_malloc_r+0x1c>
 800522c:	42a9      	cmp	r1, r5
 800522e:	d904      	bls.n	800523a <_malloc_r+0x26>
 8005230:	230c      	movs	r3, #12
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	2000      	movs	r0, #0
 8005236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005310 <_malloc_r+0xfc>
 800523e:	f000 f869 	bl	8005314 <__malloc_lock>
 8005242:	f8d8 3000 	ldr.w	r3, [r8]
 8005246:	461c      	mov	r4, r3
 8005248:	bb44      	cbnz	r4, 800529c <_malloc_r+0x88>
 800524a:	4629      	mov	r1, r5
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff ffbf 	bl	80051d0 <sbrk_aligned>
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	4604      	mov	r4, r0
 8005256:	d158      	bne.n	800530a <_malloc_r+0xf6>
 8005258:	f8d8 4000 	ldr.w	r4, [r8]
 800525c:	4627      	mov	r7, r4
 800525e:	2f00      	cmp	r7, #0
 8005260:	d143      	bne.n	80052ea <_malloc_r+0xd6>
 8005262:	2c00      	cmp	r4, #0
 8005264:	d04b      	beq.n	80052fe <_malloc_r+0xea>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	4639      	mov	r1, r7
 800526a:	4630      	mov	r0, r6
 800526c:	eb04 0903 	add.w	r9, r4, r3
 8005270:	f000 fb5a 	bl	8005928 <_sbrk_r>
 8005274:	4581      	cmp	r9, r0
 8005276:	d142      	bne.n	80052fe <_malloc_r+0xea>
 8005278:	6821      	ldr	r1, [r4, #0]
 800527a:	1a6d      	subs	r5, r5, r1
 800527c:	4629      	mov	r1, r5
 800527e:	4630      	mov	r0, r6
 8005280:	f7ff ffa6 	bl	80051d0 <sbrk_aligned>
 8005284:	3001      	adds	r0, #1
 8005286:	d03a      	beq.n	80052fe <_malloc_r+0xea>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	442b      	add	r3, r5
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	f8d8 3000 	ldr.w	r3, [r8]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	bb62      	cbnz	r2, 80052f0 <_malloc_r+0xdc>
 8005296:	f8c8 7000 	str.w	r7, [r8]
 800529a:	e00f      	b.n	80052bc <_malloc_r+0xa8>
 800529c:	6822      	ldr	r2, [r4, #0]
 800529e:	1b52      	subs	r2, r2, r5
 80052a0:	d420      	bmi.n	80052e4 <_malloc_r+0xd0>
 80052a2:	2a0b      	cmp	r2, #11
 80052a4:	d917      	bls.n	80052d6 <_malloc_r+0xc2>
 80052a6:	1961      	adds	r1, r4, r5
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	6025      	str	r5, [r4, #0]
 80052ac:	bf18      	it	ne
 80052ae:	6059      	strne	r1, [r3, #4]
 80052b0:	6863      	ldr	r3, [r4, #4]
 80052b2:	bf08      	it	eq
 80052b4:	f8c8 1000 	streq.w	r1, [r8]
 80052b8:	5162      	str	r2, [r4, r5]
 80052ba:	604b      	str	r3, [r1, #4]
 80052bc:	4630      	mov	r0, r6
 80052be:	f000 f82f 	bl	8005320 <__malloc_unlock>
 80052c2:	f104 000b 	add.w	r0, r4, #11
 80052c6:	1d23      	adds	r3, r4, #4
 80052c8:	f020 0007 	bic.w	r0, r0, #7
 80052cc:	1ac2      	subs	r2, r0, r3
 80052ce:	bf1c      	itt	ne
 80052d0:	1a1b      	subne	r3, r3, r0
 80052d2:	50a3      	strne	r3, [r4, r2]
 80052d4:	e7af      	b.n	8005236 <_malloc_r+0x22>
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	42a3      	cmp	r3, r4
 80052da:	bf0c      	ite	eq
 80052dc:	f8c8 2000 	streq.w	r2, [r8]
 80052e0:	605a      	strne	r2, [r3, #4]
 80052e2:	e7eb      	b.n	80052bc <_malloc_r+0xa8>
 80052e4:	4623      	mov	r3, r4
 80052e6:	6864      	ldr	r4, [r4, #4]
 80052e8:	e7ae      	b.n	8005248 <_malloc_r+0x34>
 80052ea:	463c      	mov	r4, r7
 80052ec:	687f      	ldr	r7, [r7, #4]
 80052ee:	e7b6      	b.n	800525e <_malloc_r+0x4a>
 80052f0:	461a      	mov	r2, r3
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	d1fb      	bne.n	80052f0 <_malloc_r+0xdc>
 80052f8:	2300      	movs	r3, #0
 80052fa:	6053      	str	r3, [r2, #4]
 80052fc:	e7de      	b.n	80052bc <_malloc_r+0xa8>
 80052fe:	230c      	movs	r3, #12
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	4630      	mov	r0, r6
 8005304:	f000 f80c 	bl	8005320 <__malloc_unlock>
 8005308:	e794      	b.n	8005234 <_malloc_r+0x20>
 800530a:	6005      	str	r5, [r0, #0]
 800530c:	e7d6      	b.n	80052bc <_malloc_r+0xa8>
 800530e:	bf00      	nop
 8005310:	20000468 	.word	0x20000468

08005314 <__malloc_lock>:
 8005314:	4801      	ldr	r0, [pc, #4]	@ (800531c <__malloc_lock+0x8>)
 8005316:	f7ff bf0f 	b.w	8005138 <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	20000460 	.word	0x20000460

08005320 <__malloc_unlock>:
 8005320:	4801      	ldr	r0, [pc, #4]	@ (8005328 <__malloc_unlock+0x8>)
 8005322:	f7ff bf0a 	b.w	800513a <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	20000460 	.word	0x20000460

0800532c <__ssputs_r>:
 800532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	688e      	ldr	r6, [r1, #8]
 8005332:	461f      	mov	r7, r3
 8005334:	42be      	cmp	r6, r7
 8005336:	680b      	ldr	r3, [r1, #0]
 8005338:	4682      	mov	sl, r0
 800533a:	460c      	mov	r4, r1
 800533c:	4690      	mov	r8, r2
 800533e:	d82d      	bhi.n	800539c <__ssputs_r+0x70>
 8005340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005344:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005348:	d026      	beq.n	8005398 <__ssputs_r+0x6c>
 800534a:	6965      	ldr	r5, [r4, #20]
 800534c:	6909      	ldr	r1, [r1, #16]
 800534e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005352:	eba3 0901 	sub.w	r9, r3, r1
 8005356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800535a:	1c7b      	adds	r3, r7, #1
 800535c:	444b      	add	r3, r9
 800535e:	106d      	asrs	r5, r5, #1
 8005360:	429d      	cmp	r5, r3
 8005362:	bf38      	it	cc
 8005364:	461d      	movcc	r5, r3
 8005366:	0553      	lsls	r3, r2, #21
 8005368:	d527      	bpl.n	80053ba <__ssputs_r+0x8e>
 800536a:	4629      	mov	r1, r5
 800536c:	f7ff ff52 	bl	8005214 <_malloc_r>
 8005370:	4606      	mov	r6, r0
 8005372:	b360      	cbz	r0, 80053ce <__ssputs_r+0xa2>
 8005374:	6921      	ldr	r1, [r4, #16]
 8005376:	464a      	mov	r2, r9
 8005378:	f000 fae6 	bl	8005948 <memcpy>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	6126      	str	r6, [r4, #16]
 800538a:	6165      	str	r5, [r4, #20]
 800538c:	444e      	add	r6, r9
 800538e:	eba5 0509 	sub.w	r5, r5, r9
 8005392:	6026      	str	r6, [r4, #0]
 8005394:	60a5      	str	r5, [r4, #8]
 8005396:	463e      	mov	r6, r7
 8005398:	42be      	cmp	r6, r7
 800539a:	d900      	bls.n	800539e <__ssputs_r+0x72>
 800539c:	463e      	mov	r6, r7
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	4632      	mov	r2, r6
 80053a2:	4641      	mov	r1, r8
 80053a4:	f000 faa6 	bl	80058f4 <memmove>
 80053a8:	68a3      	ldr	r3, [r4, #8]
 80053aa:	1b9b      	subs	r3, r3, r6
 80053ac:	60a3      	str	r3, [r4, #8]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	4433      	add	r3, r6
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	2000      	movs	r0, #0
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ba:	462a      	mov	r2, r5
 80053bc:	f000 fad2 	bl	8005964 <_realloc_r>
 80053c0:	4606      	mov	r6, r0
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d1e0      	bne.n	8005388 <__ssputs_r+0x5c>
 80053c6:	6921      	ldr	r1, [r4, #16]
 80053c8:	4650      	mov	r0, sl
 80053ca:	f7ff feb7 	bl	800513c <_free_r>
 80053ce:	230c      	movs	r3, #12
 80053d0:	f8ca 3000 	str.w	r3, [sl]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	e7e9      	b.n	80053b6 <__ssputs_r+0x8a>
	...

080053e4 <_svfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	4698      	mov	r8, r3
 80053ea:	898b      	ldrh	r3, [r1, #12]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	b09d      	sub	sp, #116	@ 0x74
 80053f0:	4607      	mov	r7, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	d510      	bpl.n	800541a <_svfiprintf_r+0x36>
 80053f8:	690b      	ldr	r3, [r1, #16]
 80053fa:	b973      	cbnz	r3, 800541a <_svfiprintf_r+0x36>
 80053fc:	2140      	movs	r1, #64	@ 0x40
 80053fe:	f7ff ff09 	bl	8005214 <_malloc_r>
 8005402:	6028      	str	r0, [r5, #0]
 8005404:	6128      	str	r0, [r5, #16]
 8005406:	b930      	cbnz	r0, 8005416 <_svfiprintf_r+0x32>
 8005408:	230c      	movs	r3, #12
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	b01d      	add	sp, #116	@ 0x74
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	2340      	movs	r3, #64	@ 0x40
 8005418:	616b      	str	r3, [r5, #20]
 800541a:	2300      	movs	r3, #0
 800541c:	9309      	str	r3, [sp, #36]	@ 0x24
 800541e:	2320      	movs	r3, #32
 8005420:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005424:	f8cd 800c 	str.w	r8, [sp, #12]
 8005428:	2330      	movs	r3, #48	@ 0x30
 800542a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80055c8 <_svfiprintf_r+0x1e4>
 800542e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005432:	f04f 0901 	mov.w	r9, #1
 8005436:	4623      	mov	r3, r4
 8005438:	469a      	mov	sl, r3
 800543a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800543e:	b10a      	cbz	r2, 8005444 <_svfiprintf_r+0x60>
 8005440:	2a25      	cmp	r2, #37	@ 0x25
 8005442:	d1f9      	bne.n	8005438 <_svfiprintf_r+0x54>
 8005444:	ebba 0b04 	subs.w	fp, sl, r4
 8005448:	d00b      	beq.n	8005462 <_svfiprintf_r+0x7e>
 800544a:	465b      	mov	r3, fp
 800544c:	4622      	mov	r2, r4
 800544e:	4629      	mov	r1, r5
 8005450:	4638      	mov	r0, r7
 8005452:	f7ff ff6b 	bl	800532c <__ssputs_r>
 8005456:	3001      	adds	r0, #1
 8005458:	f000 80a7 	beq.w	80055aa <_svfiprintf_r+0x1c6>
 800545c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800545e:	445a      	add	r2, fp
 8005460:	9209      	str	r2, [sp, #36]	@ 0x24
 8005462:	f89a 3000 	ldrb.w	r3, [sl]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 809f 	beq.w	80055aa <_svfiprintf_r+0x1c6>
 800546c:	2300      	movs	r3, #0
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005476:	f10a 0a01 	add.w	sl, sl, #1
 800547a:	9304      	str	r3, [sp, #16]
 800547c:	9307      	str	r3, [sp, #28]
 800547e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005482:	931a      	str	r3, [sp, #104]	@ 0x68
 8005484:	4654      	mov	r4, sl
 8005486:	2205      	movs	r2, #5
 8005488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548c:	484e      	ldr	r0, [pc, #312]	@ (80055c8 <_svfiprintf_r+0x1e4>)
 800548e:	f7fa fea7 	bl	80001e0 <memchr>
 8005492:	9a04      	ldr	r2, [sp, #16]
 8005494:	b9d8      	cbnz	r0, 80054ce <_svfiprintf_r+0xea>
 8005496:	06d0      	lsls	r0, r2, #27
 8005498:	bf44      	itt	mi
 800549a:	2320      	movmi	r3, #32
 800549c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054a0:	0711      	lsls	r1, r2, #28
 80054a2:	bf44      	itt	mi
 80054a4:	232b      	movmi	r3, #43	@ 0x2b
 80054a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054aa:	f89a 3000 	ldrb.w	r3, [sl]
 80054ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80054b0:	d015      	beq.n	80054de <_svfiprintf_r+0xfa>
 80054b2:	9a07      	ldr	r2, [sp, #28]
 80054b4:	4654      	mov	r4, sl
 80054b6:	2000      	movs	r0, #0
 80054b8:	f04f 0c0a 	mov.w	ip, #10
 80054bc:	4621      	mov	r1, r4
 80054be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054c2:	3b30      	subs	r3, #48	@ 0x30
 80054c4:	2b09      	cmp	r3, #9
 80054c6:	d94b      	bls.n	8005560 <_svfiprintf_r+0x17c>
 80054c8:	b1b0      	cbz	r0, 80054f8 <_svfiprintf_r+0x114>
 80054ca:	9207      	str	r2, [sp, #28]
 80054cc:	e014      	b.n	80054f8 <_svfiprintf_r+0x114>
 80054ce:	eba0 0308 	sub.w	r3, r0, r8
 80054d2:	fa09 f303 	lsl.w	r3, r9, r3
 80054d6:	4313      	orrs	r3, r2
 80054d8:	9304      	str	r3, [sp, #16]
 80054da:	46a2      	mov	sl, r4
 80054dc:	e7d2      	b.n	8005484 <_svfiprintf_r+0xa0>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	1d19      	adds	r1, r3, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	9103      	str	r1, [sp, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bfbb      	ittet	lt
 80054ea:	425b      	neglt	r3, r3
 80054ec:	f042 0202 	orrlt.w	r2, r2, #2
 80054f0:	9307      	strge	r3, [sp, #28]
 80054f2:	9307      	strlt	r3, [sp, #28]
 80054f4:	bfb8      	it	lt
 80054f6:	9204      	strlt	r2, [sp, #16]
 80054f8:	7823      	ldrb	r3, [r4, #0]
 80054fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80054fc:	d10a      	bne.n	8005514 <_svfiprintf_r+0x130>
 80054fe:	7863      	ldrb	r3, [r4, #1]
 8005500:	2b2a      	cmp	r3, #42	@ 0x2a
 8005502:	d132      	bne.n	800556a <_svfiprintf_r+0x186>
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	1d1a      	adds	r2, r3, #4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	9203      	str	r2, [sp, #12]
 800550c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005510:	3402      	adds	r4, #2
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80055d8 <_svfiprintf_r+0x1f4>
 8005518:	7821      	ldrb	r1, [r4, #0]
 800551a:	2203      	movs	r2, #3
 800551c:	4650      	mov	r0, sl
 800551e:	f7fa fe5f 	bl	80001e0 <memchr>
 8005522:	b138      	cbz	r0, 8005534 <_svfiprintf_r+0x150>
 8005524:	9b04      	ldr	r3, [sp, #16]
 8005526:	eba0 000a 	sub.w	r0, r0, sl
 800552a:	2240      	movs	r2, #64	@ 0x40
 800552c:	4082      	lsls	r2, r0
 800552e:	4313      	orrs	r3, r2
 8005530:	3401      	adds	r4, #1
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005538:	4824      	ldr	r0, [pc, #144]	@ (80055cc <_svfiprintf_r+0x1e8>)
 800553a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800553e:	2206      	movs	r2, #6
 8005540:	f7fa fe4e 	bl	80001e0 <memchr>
 8005544:	2800      	cmp	r0, #0
 8005546:	d036      	beq.n	80055b6 <_svfiprintf_r+0x1d2>
 8005548:	4b21      	ldr	r3, [pc, #132]	@ (80055d0 <_svfiprintf_r+0x1ec>)
 800554a:	bb1b      	cbnz	r3, 8005594 <_svfiprintf_r+0x1b0>
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	3307      	adds	r3, #7
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	3308      	adds	r3, #8
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800555a:	4433      	add	r3, r6
 800555c:	9309      	str	r3, [sp, #36]	@ 0x24
 800555e:	e76a      	b.n	8005436 <_svfiprintf_r+0x52>
 8005560:	fb0c 3202 	mla	r2, ip, r2, r3
 8005564:	460c      	mov	r4, r1
 8005566:	2001      	movs	r0, #1
 8005568:	e7a8      	b.n	80054bc <_svfiprintf_r+0xd8>
 800556a:	2300      	movs	r3, #0
 800556c:	3401      	adds	r4, #1
 800556e:	9305      	str	r3, [sp, #20]
 8005570:	4619      	mov	r1, r3
 8005572:	f04f 0c0a 	mov.w	ip, #10
 8005576:	4620      	mov	r0, r4
 8005578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800557c:	3a30      	subs	r2, #48	@ 0x30
 800557e:	2a09      	cmp	r2, #9
 8005580:	d903      	bls.n	800558a <_svfiprintf_r+0x1a6>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0c6      	beq.n	8005514 <_svfiprintf_r+0x130>
 8005586:	9105      	str	r1, [sp, #20]
 8005588:	e7c4      	b.n	8005514 <_svfiprintf_r+0x130>
 800558a:	fb0c 2101 	mla	r1, ip, r1, r2
 800558e:	4604      	mov	r4, r0
 8005590:	2301      	movs	r3, #1
 8005592:	e7f0      	b.n	8005576 <_svfiprintf_r+0x192>
 8005594:	ab03      	add	r3, sp, #12
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	462a      	mov	r2, r5
 800559a:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <_svfiprintf_r+0x1f0>)
 800559c:	a904      	add	r1, sp, #16
 800559e:	4638      	mov	r0, r7
 80055a0:	f3af 8000 	nop.w
 80055a4:	1c42      	adds	r2, r0, #1
 80055a6:	4606      	mov	r6, r0
 80055a8:	d1d6      	bne.n	8005558 <_svfiprintf_r+0x174>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	065b      	lsls	r3, r3, #25
 80055ae:	f53f af2d 	bmi.w	800540c <_svfiprintf_r+0x28>
 80055b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b4:	e72c      	b.n	8005410 <_svfiprintf_r+0x2c>
 80055b6:	ab03      	add	r3, sp, #12
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	462a      	mov	r2, r5
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <_svfiprintf_r+0x1f0>)
 80055be:	a904      	add	r1, sp, #16
 80055c0:	4638      	mov	r0, r7
 80055c2:	f000 f879 	bl	80056b8 <_printf_i>
 80055c6:	e7ed      	b.n	80055a4 <_svfiprintf_r+0x1c0>
 80055c8:	08005e10 	.word	0x08005e10
 80055cc:	08005e1a 	.word	0x08005e1a
 80055d0:	00000000 	.word	0x00000000
 80055d4:	0800532d 	.word	0x0800532d
 80055d8:	08005e16 	.word	0x08005e16

080055dc <_printf_common>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	4616      	mov	r6, r2
 80055e2:	4698      	mov	r8, r3
 80055e4:	688a      	ldr	r2, [r1, #8]
 80055e6:	690b      	ldr	r3, [r1, #16]
 80055e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	bfb8      	it	lt
 80055f0:	4613      	movlt	r3, r2
 80055f2:	6033      	str	r3, [r6, #0]
 80055f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055f8:	4607      	mov	r7, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	b10a      	cbz	r2, 8005602 <_printf_common+0x26>
 80055fe:	3301      	adds	r3, #1
 8005600:	6033      	str	r3, [r6, #0]
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	0699      	lsls	r1, r3, #26
 8005606:	bf42      	ittt	mi
 8005608:	6833      	ldrmi	r3, [r6, #0]
 800560a:	3302      	addmi	r3, #2
 800560c:	6033      	strmi	r3, [r6, #0]
 800560e:	6825      	ldr	r5, [r4, #0]
 8005610:	f015 0506 	ands.w	r5, r5, #6
 8005614:	d106      	bne.n	8005624 <_printf_common+0x48>
 8005616:	f104 0a19 	add.w	sl, r4, #25
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	6832      	ldr	r2, [r6, #0]
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	42ab      	cmp	r3, r5
 8005622:	dc26      	bgt.n	8005672 <_printf_common+0x96>
 8005624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	3b00      	subs	r3, #0
 800562c:	bf18      	it	ne
 800562e:	2301      	movne	r3, #1
 8005630:	0692      	lsls	r2, r2, #26
 8005632:	d42b      	bmi.n	800568c <_printf_common+0xb0>
 8005634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005638:	4641      	mov	r1, r8
 800563a:	4638      	mov	r0, r7
 800563c:	47c8      	blx	r9
 800563e:	3001      	adds	r0, #1
 8005640:	d01e      	beq.n	8005680 <_printf_common+0xa4>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	6922      	ldr	r2, [r4, #16]
 8005646:	f003 0306 	and.w	r3, r3, #6
 800564a:	2b04      	cmp	r3, #4
 800564c:	bf02      	ittt	eq
 800564e:	68e5      	ldreq	r5, [r4, #12]
 8005650:	6833      	ldreq	r3, [r6, #0]
 8005652:	1aed      	subeq	r5, r5, r3
 8005654:	68a3      	ldr	r3, [r4, #8]
 8005656:	bf0c      	ite	eq
 8005658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800565c:	2500      	movne	r5, #0
 800565e:	4293      	cmp	r3, r2
 8005660:	bfc4      	itt	gt
 8005662:	1a9b      	subgt	r3, r3, r2
 8005664:	18ed      	addgt	r5, r5, r3
 8005666:	2600      	movs	r6, #0
 8005668:	341a      	adds	r4, #26
 800566a:	42b5      	cmp	r5, r6
 800566c:	d11a      	bne.n	80056a4 <_printf_common+0xc8>
 800566e:	2000      	movs	r0, #0
 8005670:	e008      	b.n	8005684 <_printf_common+0xa8>
 8005672:	2301      	movs	r3, #1
 8005674:	4652      	mov	r2, sl
 8005676:	4641      	mov	r1, r8
 8005678:	4638      	mov	r0, r7
 800567a:	47c8      	blx	r9
 800567c:	3001      	adds	r0, #1
 800567e:	d103      	bne.n	8005688 <_printf_common+0xac>
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005688:	3501      	adds	r5, #1
 800568a:	e7c6      	b.n	800561a <_printf_common+0x3e>
 800568c:	18e1      	adds	r1, r4, r3
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	2030      	movs	r0, #48	@ 0x30
 8005692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005696:	4422      	add	r2, r4
 8005698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800569c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056a0:	3302      	adds	r3, #2
 80056a2:	e7c7      	b.n	8005634 <_printf_common+0x58>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4622      	mov	r2, r4
 80056a8:	4641      	mov	r1, r8
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c8      	blx	r9
 80056ae:	3001      	adds	r0, #1
 80056b0:	d0e6      	beq.n	8005680 <_printf_common+0xa4>
 80056b2:	3601      	adds	r6, #1
 80056b4:	e7d9      	b.n	800566a <_printf_common+0x8e>
	...

080056b8 <_printf_i>:
 80056b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	7e0f      	ldrb	r7, [r1, #24]
 80056be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056c0:	2f78      	cmp	r7, #120	@ 0x78
 80056c2:	4691      	mov	r9, r2
 80056c4:	4680      	mov	r8, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	469a      	mov	sl, r3
 80056ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ce:	d807      	bhi.n	80056e0 <_printf_i+0x28>
 80056d0:	2f62      	cmp	r7, #98	@ 0x62
 80056d2:	d80a      	bhi.n	80056ea <_printf_i+0x32>
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	f000 80d1 	beq.w	800587c <_printf_i+0x1c4>
 80056da:	2f58      	cmp	r7, #88	@ 0x58
 80056dc:	f000 80b8 	beq.w	8005850 <_printf_i+0x198>
 80056e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056e8:	e03a      	b.n	8005760 <_printf_i+0xa8>
 80056ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ee:	2b15      	cmp	r3, #21
 80056f0:	d8f6      	bhi.n	80056e0 <_printf_i+0x28>
 80056f2:	a101      	add	r1, pc, #4	@ (adr r1, 80056f8 <_printf_i+0x40>)
 80056f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056f8:	08005751 	.word	0x08005751
 80056fc:	08005765 	.word	0x08005765
 8005700:	080056e1 	.word	0x080056e1
 8005704:	080056e1 	.word	0x080056e1
 8005708:	080056e1 	.word	0x080056e1
 800570c:	080056e1 	.word	0x080056e1
 8005710:	08005765 	.word	0x08005765
 8005714:	080056e1 	.word	0x080056e1
 8005718:	080056e1 	.word	0x080056e1
 800571c:	080056e1 	.word	0x080056e1
 8005720:	080056e1 	.word	0x080056e1
 8005724:	08005863 	.word	0x08005863
 8005728:	0800578f 	.word	0x0800578f
 800572c:	0800581d 	.word	0x0800581d
 8005730:	080056e1 	.word	0x080056e1
 8005734:	080056e1 	.word	0x080056e1
 8005738:	08005885 	.word	0x08005885
 800573c:	080056e1 	.word	0x080056e1
 8005740:	0800578f 	.word	0x0800578f
 8005744:	080056e1 	.word	0x080056e1
 8005748:	080056e1 	.word	0x080056e1
 800574c:	08005825 	.word	0x08005825
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6032      	str	r2, [r6, #0]
 8005758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800575c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005760:	2301      	movs	r3, #1
 8005762:	e09c      	b.n	800589e <_printf_i+0x1e6>
 8005764:	6833      	ldr	r3, [r6, #0]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1d19      	adds	r1, r3, #4
 800576a:	6031      	str	r1, [r6, #0]
 800576c:	0606      	lsls	r6, r0, #24
 800576e:	d501      	bpl.n	8005774 <_printf_i+0xbc>
 8005770:	681d      	ldr	r5, [r3, #0]
 8005772:	e003      	b.n	800577c <_printf_i+0xc4>
 8005774:	0645      	lsls	r5, r0, #25
 8005776:	d5fb      	bpl.n	8005770 <_printf_i+0xb8>
 8005778:	f9b3 5000 	ldrsh.w	r5, [r3]
 800577c:	2d00      	cmp	r5, #0
 800577e:	da03      	bge.n	8005788 <_printf_i+0xd0>
 8005780:	232d      	movs	r3, #45	@ 0x2d
 8005782:	426d      	negs	r5, r5
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005788:	4858      	ldr	r0, [pc, #352]	@ (80058ec <_printf_i+0x234>)
 800578a:	230a      	movs	r3, #10
 800578c:	e011      	b.n	80057b2 <_printf_i+0xfa>
 800578e:	6821      	ldr	r1, [r4, #0]
 8005790:	6833      	ldr	r3, [r6, #0]
 8005792:	0608      	lsls	r0, r1, #24
 8005794:	f853 5b04 	ldr.w	r5, [r3], #4
 8005798:	d402      	bmi.n	80057a0 <_printf_i+0xe8>
 800579a:	0649      	lsls	r1, r1, #25
 800579c:	bf48      	it	mi
 800579e:	b2ad      	uxthmi	r5, r5
 80057a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80057a2:	4852      	ldr	r0, [pc, #328]	@ (80058ec <_printf_i+0x234>)
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	bf14      	ite	ne
 80057a8:	230a      	movne	r3, #10
 80057aa:	2308      	moveq	r3, #8
 80057ac:	2100      	movs	r1, #0
 80057ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057b2:	6866      	ldr	r6, [r4, #4]
 80057b4:	60a6      	str	r6, [r4, #8]
 80057b6:	2e00      	cmp	r6, #0
 80057b8:	db05      	blt.n	80057c6 <_printf_i+0x10e>
 80057ba:	6821      	ldr	r1, [r4, #0]
 80057bc:	432e      	orrs	r6, r5
 80057be:	f021 0104 	bic.w	r1, r1, #4
 80057c2:	6021      	str	r1, [r4, #0]
 80057c4:	d04b      	beq.n	800585e <_printf_i+0x1a6>
 80057c6:	4616      	mov	r6, r2
 80057c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80057cc:	fb03 5711 	mls	r7, r3, r1, r5
 80057d0:	5dc7      	ldrb	r7, [r0, r7]
 80057d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057d6:	462f      	mov	r7, r5
 80057d8:	42bb      	cmp	r3, r7
 80057da:	460d      	mov	r5, r1
 80057dc:	d9f4      	bls.n	80057c8 <_printf_i+0x110>
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d10b      	bne.n	80057fa <_printf_i+0x142>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	07df      	lsls	r7, r3, #31
 80057e6:	d508      	bpl.n	80057fa <_printf_i+0x142>
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	6861      	ldr	r1, [r4, #4]
 80057ec:	4299      	cmp	r1, r3
 80057ee:	bfde      	ittt	le
 80057f0:	2330      	movle	r3, #48	@ 0x30
 80057f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057fa:	1b92      	subs	r2, r2, r6
 80057fc:	6122      	str	r2, [r4, #16]
 80057fe:	f8cd a000 	str.w	sl, [sp]
 8005802:	464b      	mov	r3, r9
 8005804:	aa03      	add	r2, sp, #12
 8005806:	4621      	mov	r1, r4
 8005808:	4640      	mov	r0, r8
 800580a:	f7ff fee7 	bl	80055dc <_printf_common>
 800580e:	3001      	adds	r0, #1
 8005810:	d14a      	bne.n	80058a8 <_printf_i+0x1f0>
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	b004      	add	sp, #16
 8005818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	f043 0320 	orr.w	r3, r3, #32
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	4832      	ldr	r0, [pc, #200]	@ (80058f0 <_printf_i+0x238>)
 8005826:	2778      	movs	r7, #120	@ 0x78
 8005828:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	6831      	ldr	r1, [r6, #0]
 8005830:	061f      	lsls	r7, r3, #24
 8005832:	f851 5b04 	ldr.w	r5, [r1], #4
 8005836:	d402      	bmi.n	800583e <_printf_i+0x186>
 8005838:	065f      	lsls	r7, r3, #25
 800583a:	bf48      	it	mi
 800583c:	b2ad      	uxthmi	r5, r5
 800583e:	6031      	str	r1, [r6, #0]
 8005840:	07d9      	lsls	r1, r3, #31
 8005842:	bf44      	itt	mi
 8005844:	f043 0320 	orrmi.w	r3, r3, #32
 8005848:	6023      	strmi	r3, [r4, #0]
 800584a:	b11d      	cbz	r5, 8005854 <_printf_i+0x19c>
 800584c:	2310      	movs	r3, #16
 800584e:	e7ad      	b.n	80057ac <_printf_i+0xf4>
 8005850:	4826      	ldr	r0, [pc, #152]	@ (80058ec <_printf_i+0x234>)
 8005852:	e7e9      	b.n	8005828 <_printf_i+0x170>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	f023 0320 	bic.w	r3, r3, #32
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	e7f6      	b.n	800584c <_printf_i+0x194>
 800585e:	4616      	mov	r6, r2
 8005860:	e7bd      	b.n	80057de <_printf_i+0x126>
 8005862:	6833      	ldr	r3, [r6, #0]
 8005864:	6825      	ldr	r5, [r4, #0]
 8005866:	6961      	ldr	r1, [r4, #20]
 8005868:	1d18      	adds	r0, r3, #4
 800586a:	6030      	str	r0, [r6, #0]
 800586c:	062e      	lsls	r6, r5, #24
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	d501      	bpl.n	8005876 <_printf_i+0x1be>
 8005872:	6019      	str	r1, [r3, #0]
 8005874:	e002      	b.n	800587c <_printf_i+0x1c4>
 8005876:	0668      	lsls	r0, r5, #25
 8005878:	d5fb      	bpl.n	8005872 <_printf_i+0x1ba>
 800587a:	8019      	strh	r1, [r3, #0]
 800587c:	2300      	movs	r3, #0
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	4616      	mov	r6, r2
 8005882:	e7bc      	b.n	80057fe <_printf_i+0x146>
 8005884:	6833      	ldr	r3, [r6, #0]
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	6032      	str	r2, [r6, #0]
 800588a:	681e      	ldr	r6, [r3, #0]
 800588c:	6862      	ldr	r2, [r4, #4]
 800588e:	2100      	movs	r1, #0
 8005890:	4630      	mov	r0, r6
 8005892:	f7fa fca5 	bl	80001e0 <memchr>
 8005896:	b108      	cbz	r0, 800589c <_printf_i+0x1e4>
 8005898:	1b80      	subs	r0, r0, r6
 800589a:	6060      	str	r0, [r4, #4]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	2300      	movs	r3, #0
 80058a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058a6:	e7aa      	b.n	80057fe <_printf_i+0x146>
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	4632      	mov	r2, r6
 80058ac:	4649      	mov	r1, r9
 80058ae:	4640      	mov	r0, r8
 80058b0:	47d0      	blx	sl
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0ad      	beq.n	8005812 <_printf_i+0x15a>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	079b      	lsls	r3, r3, #30
 80058ba:	d413      	bmi.n	80058e4 <_printf_i+0x22c>
 80058bc:	68e0      	ldr	r0, [r4, #12]
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	4298      	cmp	r0, r3
 80058c2:	bfb8      	it	lt
 80058c4:	4618      	movlt	r0, r3
 80058c6:	e7a6      	b.n	8005816 <_printf_i+0x15e>
 80058c8:	2301      	movs	r3, #1
 80058ca:	4632      	mov	r2, r6
 80058cc:	4649      	mov	r1, r9
 80058ce:	4640      	mov	r0, r8
 80058d0:	47d0      	blx	sl
 80058d2:	3001      	adds	r0, #1
 80058d4:	d09d      	beq.n	8005812 <_printf_i+0x15a>
 80058d6:	3501      	adds	r5, #1
 80058d8:	68e3      	ldr	r3, [r4, #12]
 80058da:	9903      	ldr	r1, [sp, #12]
 80058dc:	1a5b      	subs	r3, r3, r1
 80058de:	42ab      	cmp	r3, r5
 80058e0:	dcf2      	bgt.n	80058c8 <_printf_i+0x210>
 80058e2:	e7eb      	b.n	80058bc <_printf_i+0x204>
 80058e4:	2500      	movs	r5, #0
 80058e6:	f104 0619 	add.w	r6, r4, #25
 80058ea:	e7f5      	b.n	80058d8 <_printf_i+0x220>
 80058ec:	08005e21 	.word	0x08005e21
 80058f0:	08005e32 	.word	0x08005e32

080058f4 <memmove>:
 80058f4:	4288      	cmp	r0, r1
 80058f6:	b510      	push	{r4, lr}
 80058f8:	eb01 0402 	add.w	r4, r1, r2
 80058fc:	d902      	bls.n	8005904 <memmove+0x10>
 80058fe:	4284      	cmp	r4, r0
 8005900:	4623      	mov	r3, r4
 8005902:	d807      	bhi.n	8005914 <memmove+0x20>
 8005904:	1e43      	subs	r3, r0, #1
 8005906:	42a1      	cmp	r1, r4
 8005908:	d008      	beq.n	800591c <memmove+0x28>
 800590a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800590e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005912:	e7f8      	b.n	8005906 <memmove+0x12>
 8005914:	4402      	add	r2, r0
 8005916:	4601      	mov	r1, r0
 8005918:	428a      	cmp	r2, r1
 800591a:	d100      	bne.n	800591e <memmove+0x2a>
 800591c:	bd10      	pop	{r4, pc}
 800591e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005926:	e7f7      	b.n	8005918 <memmove+0x24>

08005928 <_sbrk_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	@ (8005944 <_sbrk_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb ff96 	bl	8001864 <_sbrk>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_sbrk_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_sbrk_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	2000045c 	.word	0x2000045c

08005948 <memcpy>:
 8005948:	440a      	add	r2, r1
 800594a:	4291      	cmp	r1, r2
 800594c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005950:	d100      	bne.n	8005954 <memcpy+0xc>
 8005952:	4770      	bx	lr
 8005954:	b510      	push	{r4, lr}
 8005956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800595a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800595e:	4291      	cmp	r1, r2
 8005960:	d1f9      	bne.n	8005956 <memcpy+0xe>
 8005962:	bd10      	pop	{r4, pc}

08005964 <_realloc_r>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	4607      	mov	r7, r0
 800596a:	4614      	mov	r4, r2
 800596c:	460d      	mov	r5, r1
 800596e:	b921      	cbnz	r1, 800597a <_realloc_r+0x16>
 8005970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	4611      	mov	r1, r2
 8005976:	f7ff bc4d 	b.w	8005214 <_malloc_r>
 800597a:	b92a      	cbnz	r2, 8005988 <_realloc_r+0x24>
 800597c:	f7ff fbde 	bl	800513c <_free_r>
 8005980:	4625      	mov	r5, r4
 8005982:	4628      	mov	r0, r5
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005988:	f000 f81a 	bl	80059c0 <_malloc_usable_size_r>
 800598c:	4284      	cmp	r4, r0
 800598e:	4606      	mov	r6, r0
 8005990:	d802      	bhi.n	8005998 <_realloc_r+0x34>
 8005992:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005996:	d8f4      	bhi.n	8005982 <_realloc_r+0x1e>
 8005998:	4621      	mov	r1, r4
 800599a:	4638      	mov	r0, r7
 800599c:	f7ff fc3a 	bl	8005214 <_malloc_r>
 80059a0:	4680      	mov	r8, r0
 80059a2:	b908      	cbnz	r0, 80059a8 <_realloc_r+0x44>
 80059a4:	4645      	mov	r5, r8
 80059a6:	e7ec      	b.n	8005982 <_realloc_r+0x1e>
 80059a8:	42b4      	cmp	r4, r6
 80059aa:	4622      	mov	r2, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	bf28      	it	cs
 80059b0:	4632      	movcs	r2, r6
 80059b2:	f7ff ffc9 	bl	8005948 <memcpy>
 80059b6:	4629      	mov	r1, r5
 80059b8:	4638      	mov	r0, r7
 80059ba:	f7ff fbbf 	bl	800513c <_free_r>
 80059be:	e7f1      	b.n	80059a4 <_realloc_r+0x40>

080059c0 <_malloc_usable_size_r>:
 80059c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c4:	1f18      	subs	r0, r3, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfbc      	itt	lt
 80059ca:	580b      	ldrlt	r3, [r1, r0]
 80059cc:	18c0      	addlt	r0, r0, r3
 80059ce:	4770      	bx	lr

080059d0 <log10f>:
 80059d0:	b508      	push	{r3, lr}
 80059d2:	ed2d 8b02 	vpush	{d8}
 80059d6:	eeb0 8a40 	vmov.f32	s16, s0
 80059da:	f000 f883 	bl	8005ae4 <__ieee754_log10f>
 80059de:	eeb4 8a48 	vcmp.f32	s16, s16
 80059e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e6:	d60f      	bvs.n	8005a08 <log10f+0x38>
 80059e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	d80a      	bhi.n	8005a08 <log10f+0x38>
 80059f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80059f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fa:	d108      	bne.n	8005a0e <log10f+0x3e>
 80059fc:	f7ff fb72 	bl	80050e4 <__errno>
 8005a00:	2322      	movs	r3, #34	@ 0x22
 8005a02:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005a24 <log10f+0x54>
 8005a06:	6003      	str	r3, [r0, #0]
 8005a08:	ecbd 8b02 	vpop	{d8}
 8005a0c:	bd08      	pop	{r3, pc}
 8005a0e:	f7ff fb69 	bl	80050e4 <__errno>
 8005a12:	ecbd 8b02 	vpop	{d8}
 8005a16:	2321      	movs	r3, #33	@ 0x21
 8005a18:	6003      	str	r3, [r0, #0]
 8005a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a1e:	4802      	ldr	r0, [pc, #8]	@ (8005a28 <log10f+0x58>)
 8005a20:	f000 b804 	b.w	8005a2c <nanf>
 8005a24:	ff800000 	.word	0xff800000
 8005a28:	08005e15 	.word	0x08005e15

08005a2c <nanf>:
 8005a2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005a34 <nanf+0x8>
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	7fc00000 	.word	0x7fc00000

08005a38 <fmaxf>:
 8005a38:	b508      	push	{r3, lr}
 8005a3a:	ed2d 8b02 	vpush	{d8}
 8005a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8005a42:	eef0 8a60 	vmov.f32	s17, s1
 8005a46:	f000 f831 	bl	8005aac <__fpclassifyf>
 8005a4a:	b930      	cbnz	r0, 8005a5a <fmaxf+0x22>
 8005a4c:	eeb0 8a68 	vmov.f32	s16, s17
 8005a50:	eeb0 0a48 	vmov.f32	s0, s16
 8005a54:	ecbd 8b02 	vpop	{d8}
 8005a58:	bd08      	pop	{r3, pc}
 8005a5a:	eeb0 0a68 	vmov.f32	s0, s17
 8005a5e:	f000 f825 	bl	8005aac <__fpclassifyf>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d0f4      	beq.n	8005a50 <fmaxf+0x18>
 8005a66:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6e:	dded      	ble.n	8005a4c <fmaxf+0x14>
 8005a70:	e7ee      	b.n	8005a50 <fmaxf+0x18>

08005a72 <fminf>:
 8005a72:	b508      	push	{r3, lr}
 8005a74:	ed2d 8b02 	vpush	{d8}
 8005a78:	eeb0 8a40 	vmov.f32	s16, s0
 8005a7c:	eef0 8a60 	vmov.f32	s17, s1
 8005a80:	f000 f814 	bl	8005aac <__fpclassifyf>
 8005a84:	b930      	cbnz	r0, 8005a94 <fminf+0x22>
 8005a86:	eeb0 8a68 	vmov.f32	s16, s17
 8005a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8005a8e:	ecbd 8b02 	vpop	{d8}
 8005a92:	bd08      	pop	{r3, pc}
 8005a94:	eeb0 0a68 	vmov.f32	s0, s17
 8005a98:	f000 f808 	bl	8005aac <__fpclassifyf>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d0f4      	beq.n	8005a8a <fminf+0x18>
 8005aa0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa8:	d5ed      	bpl.n	8005a86 <fminf+0x14>
 8005aaa:	e7ee      	b.n	8005a8a <fminf+0x18>

08005aac <__fpclassifyf>:
 8005aac:	ee10 3a10 	vmov	r3, s0
 8005ab0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8005ab4:	d00d      	beq.n	8005ad2 <__fpclassifyf+0x26>
 8005ab6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8005aba:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005abe:	d30a      	bcc.n	8005ad6 <__fpclassifyf+0x2a>
 8005ac0:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <__fpclassifyf+0x34>)
 8005ac2:	1e42      	subs	r2, r0, #1
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d908      	bls.n	8005ada <__fpclassifyf+0x2e>
 8005ac8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8005acc:	4258      	negs	r0, r3
 8005ace:	4158      	adcs	r0, r3
 8005ad0:	4770      	bx	lr
 8005ad2:	2002      	movs	r0, #2
 8005ad4:	4770      	bx	lr
 8005ad6:	2004      	movs	r0, #4
 8005ad8:	4770      	bx	lr
 8005ada:	2003      	movs	r0, #3
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	007ffffe 	.word	0x007ffffe

08005ae4 <__ieee754_log10f>:
 8005ae4:	b508      	push	{r3, lr}
 8005ae6:	ee10 3a10 	vmov	r3, s0
 8005aea:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005aee:	ed2d 8b02 	vpush	{d8}
 8005af2:	d108      	bne.n	8005b06 <__ieee754_log10f+0x22>
 8005af4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005b7c <__ieee754_log10f+0x98>
 8005af8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8005b80 <__ieee754_log10f+0x9c>
 8005afc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005b00:	ecbd 8b02 	vpop	{d8}
 8005b04:	bd08      	pop	{r3, pc}
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	461a      	mov	r2, r3
 8005b0a:	da02      	bge.n	8005b12 <__ieee754_log10f+0x2e>
 8005b0c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005b10:	e7f2      	b.n	8005af8 <__ieee754_log10f+0x14>
 8005b12:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005b16:	db02      	blt.n	8005b1e <__ieee754_log10f+0x3a>
 8005b18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005b1c:	e7f0      	b.n	8005b00 <__ieee754_log10f+0x1c>
 8005b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b22:	bfbf      	itttt	lt
 8005b24:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8005b84 <__ieee754_log10f+0xa0>
 8005b28:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005b2c:	f06f 0118 	mvnlt.w	r1, #24
 8005b30:	ee17 2a90 	vmovlt	r2, s15
 8005b34:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005b38:	bfa8      	it	ge
 8005b3a:	2100      	movge	r1, #0
 8005b3c:	3b7f      	subs	r3, #127	@ 0x7f
 8005b3e:	440b      	add	r3, r1
 8005b40:	0fd9      	lsrs	r1, r3, #31
 8005b42:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8005b4e:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8005b52:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005b56:	ee00 3a10 	vmov	s0, r3
 8005b5a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005b5e:	f000 f819 	bl	8005b94 <__ieee754_logf>
 8005b62:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005b88 <__ieee754_log10f+0xa4>
 8005b66:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005b6a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005b8c <__ieee754_log10f+0xa8>
 8005b6e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005b72:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8005b90 <__ieee754_log10f+0xac>
 8005b76:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005b7a:	e7c1      	b.n	8005b00 <__ieee754_log10f+0x1c>
 8005b7c:	cc000000 	.word	0xcc000000
 8005b80:	00000000 	.word	0x00000000
 8005b84:	4c000000 	.word	0x4c000000
 8005b88:	3ede5bd9 	.word	0x3ede5bd9
 8005b8c:	355427db 	.word	0x355427db
 8005b90:	3e9a2080 	.word	0x3e9a2080

08005b94 <__ieee754_logf>:
 8005b94:	ee10 3a10 	vmov	r3, s0
 8005b98:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005b9c:	d106      	bne.n	8005bac <__ieee754_logf+0x18>
 8005b9e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8005d38 <__ieee754_logf+0x1a4>
 8005ba2:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8005d3c <__ieee754_logf+0x1a8>
 8005ba6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005baa:	4770      	bx	lr
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	da02      	bge.n	8005bb8 <__ieee754_logf+0x24>
 8005bb2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005bb6:	e7f4      	b.n	8005ba2 <__ieee754_logf+0xe>
 8005bb8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005bbc:	db02      	blt.n	8005bc4 <__ieee754_logf+0x30>
 8005bbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005bc2:	4770      	bx	lr
 8005bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bc8:	bfb8      	it	lt
 8005bca:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8005d40 <__ieee754_logf+0x1ac>
 8005bce:	485d      	ldr	r0, [pc, #372]	@ (8005d44 <__ieee754_logf+0x1b0>)
 8005bd0:	bfbe      	ittt	lt
 8005bd2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005bd6:	f06f 0118 	mvnlt.w	r1, #24
 8005bda:	ee17 2a90 	vmovlt	r2, s15
 8005bde:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005be2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8005be6:	4410      	add	r0, r2
 8005be8:	bfa8      	it	ge
 8005bea:	2100      	movge	r1, #0
 8005bec:	3b7f      	subs	r3, #127	@ 0x7f
 8005bee:	440b      	add	r3, r1
 8005bf0:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8005bf4:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8005bf8:	4311      	orrs	r1, r2
 8005bfa:	ee00 1a10 	vmov	s0, r1
 8005bfe:	4952      	ldr	r1, [pc, #328]	@ (8005d48 <__ieee754_logf+0x1b4>)
 8005c00:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8005c04:	f102 000f 	add.w	r0, r2, #15
 8005c08:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005c0c:	4001      	ands	r1, r0
 8005c0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c12:	bb89      	cbnz	r1, 8005c78 <__ieee754_logf+0xe4>
 8005c14:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1c:	d10f      	bne.n	8005c3e <__ieee754_logf+0xaa>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8087 	beq.w	8005d32 <__ieee754_logf+0x19e>
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8005d4c <__ieee754_logf+0x1b8>
 8005c2c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8005d50 <__ieee754_logf+0x1bc>
 8005c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c34:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005c38:	eea7 0a87 	vfma.f32	s0, s15, s14
 8005c3c:	4770      	bx	lr
 8005c3e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8005d54 <__ieee754_logf+0x1c0>
 8005c42:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005c46:	eee0 7a66 	vfms.f32	s15, s0, s13
 8005c4a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c52:	b913      	cbnz	r3, 8005c5a <__ieee754_logf+0xc6>
 8005c54:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005c58:	4770      	bx	lr
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005d4c <__ieee754_logf+0x1b8>
 8005c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c66:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005c6a:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005c6e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005d50 <__ieee754_logf+0x1bc>
 8005c72:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8005c76:	4770      	bx	lr
 8005c78:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005c7c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005c80:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8005d58 <__ieee754_logf+0x1c4>
 8005c84:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8005d5c <__ieee754_logf+0x1c8>
 8005c88:	4935      	ldr	r1, [pc, #212]	@ (8005d60 <__ieee754_logf+0x1cc>)
 8005c8a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8005c8e:	4411      	add	r1, r2
 8005c90:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8005c94:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005ca4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ca8:	ee25 7a05 	vmul.f32	s14, s10, s10
 8005cac:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8005d64 <__ieee754_logf+0x1d0>
 8005cb0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005cb4:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005d68 <__ieee754_logf+0x1d4>
 8005cb8:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005cbc:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8005d6c <__ieee754_logf+0x1d8>
 8005cc0:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005cc4:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8005d70 <__ieee754_logf+0x1dc>
 8005cc8:	eee7 4a87 	vfma.f32	s9, s15, s14
 8005ccc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8005d74 <__ieee754_logf+0x1e0>
 8005cd0:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005cd4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005cd8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005cdc:	dd1a      	ble.n	8005d14 <__ieee754_logf+0x180>
 8005cde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ce2:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005ce6:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005cf2:	b913      	cbnz	r3, 8005cfa <__ieee754_logf+0x166>
 8005cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cf8:	e7ac      	b.n	8005c54 <__ieee754_logf+0xc0>
 8005cfa:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8005d4c <__ieee754_logf+0x1b8>
 8005cfe:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005d02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d06:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005d0a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005d50 <__ieee754_logf+0x1bc>
 8005d0e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8005d12:	4770      	bx	lr
 8005d14:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005d18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d1c:	b913      	cbnz	r3, 8005d24 <__ieee754_logf+0x190>
 8005d1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005d22:	4770      	bx	lr
 8005d24:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005d4c <__ieee754_logf+0x1b8>
 8005d28:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8005d2c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005d30:	e7eb      	b.n	8005d0a <__ieee754_logf+0x176>
 8005d32:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8005d3c <__ieee754_logf+0x1a8>
 8005d36:	4770      	bx	lr
 8005d38:	cc000000 	.word	0xcc000000
 8005d3c:	00000000 	.word	0x00000000
 8005d40:	4c000000 	.word	0x4c000000
 8005d44:	004afb20 	.word	0x004afb20
 8005d48:	007ffff0 	.word	0x007ffff0
 8005d4c:	3717f7d1 	.word	0x3717f7d1
 8005d50:	3f317180 	.word	0x3f317180
 8005d54:	3eaaaaab 	.word	0x3eaaaaab
 8005d58:	3e1cd04f 	.word	0x3e1cd04f
 8005d5c:	3e178897 	.word	0x3e178897
 8005d60:	ffcf5c30 	.word	0xffcf5c30
 8005d64:	3e638e29 	.word	0x3e638e29
 8005d68:	3ecccccd 	.word	0x3ecccccd
 8005d6c:	3e3a3325 	.word	0x3e3a3325
 8005d70:	3e924925 	.word	0x3e924925
 8005d74:	3f2aaaab 	.word	0x3f2aaaab

08005d78 <_init>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr

08005d84 <_fini>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr
