
Ready2Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005324  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080054b4  080054b4  000064b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005544  08005544  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005544  08005544  00006544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800554c  0800554c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800554c  0800554c  0000654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005550  08005550  00006550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005554  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000003fc  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f032  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c4  00000000  00000000  000160ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00018390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab9  00000000  00000000  00019148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c73  00000000  00000000  00019c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a53  00000000  00000000  0003c874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d88e6  00000000  00000000  0004d2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125bad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e88  00000000  00000000  00125bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00129a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800549c 	.word	0x0800549c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800549c 	.word	0x0800549c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <APPS_Init>:
extern DMA_HandleTypeDef hdma_tim3_ch1;

static uint32_t pwm_buffer[1] = {0}; // PWM Duty Buffer

void APPS_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, adcdata, ADC_CHANNEL_COUNT);
 80005b0:	2202      	movs	r2, #2
 80005b2:	4906      	ldr	r1, [pc, #24]	@ (80005cc <APPS_Init+0x20>)
 80005b4:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <APPS_Init+0x24>)
 80005b6:	f001 f807 	bl	80015c8 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <APPS_Init+0x28>)
 80005bc:	f002 ff98 	bl	80034f0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <APPS_Init+0x2c>)
 80005c4:	f003 f856 	bl	8003674 <HAL_TIM_PWM_Start>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000084 	.word	0x20000084
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	200001d4 	.word	0x200001d4
 80005d8:	2000018c 	.word	0x2000018c

080005dc <APPS_Loop>:

void APPS_Loop(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b089      	sub	sp, #36	@ 0x24
 80005e0:	af00      	add	r7, sp, #0
    if (!apps_enabled)
 80005e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000794 <APPS_Loop+0x1b8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d004      	beq.n	80005fa <APPS_Loop+0x1e>
    {
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // PWM'i de sıfırla
 80005f0:	4b69      	ldr	r3, [pc, #420]	@ (8000798 <APPS_Loop+0x1bc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 80005f8:	e0c6      	b.n	8000788 <APPS_Loop+0x1ac>
    }

    int32_t val1 = adcdata[0];
 80005fa:	4b68      	ldr	r3, [pc, #416]	@ (800079c <APPS_Loop+0x1c0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	617b      	str	r3, [r7, #20]
    int32_t val2 = adcdata[1];
 8000600:	4b66      	ldr	r3, [pc, #408]	@ (800079c <APPS_Loop+0x1c0>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	613b      	str	r3, [r7, #16]

    float norm1 = (val1 - sensor1_min) / (float)(sensor1_max - sensor1_min);
 8000606:	4b66      	ldr	r3, [pc, #408]	@ (80007a0 <APPS_Loop+0x1c4>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000618:	4b62      	ldr	r3, [pc, #392]	@ (80007a4 <APPS_Loop+0x1c8>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b60      	ldr	r3, [pc, #384]	@ (80007a0 <APPS_Loop+0x1c4>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000630:	edc7 7a07 	vstr	s15, [r7, #28]
    float norm2 = (val2 - sensor2_min) / (float)(sensor2_max - sensor2_min);
 8000634:	4b5c      	ldr	r3, [pc, #368]	@ (80007a8 <APPS_Loop+0x1cc>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000646:	4b59      	ldr	r3, [pc, #356]	@ (80007ac <APPS_Loop+0x1d0>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b56      	ldr	r3, [pc, #344]	@ (80007a8 <APPS_Loop+0x1cc>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	ee07 3a90 	vmov	s15, r3
 8000656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800065a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065e:	edc7 7a06 	vstr	s15, [r7, #24]

    if (norm1 < 0.0f) norm1 = 0.0f;
 8000662:	edd7 7a07 	vldr	s15, [r7, #28]
 8000666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	d502      	bpl.n	8000676 <APPS_Loop+0x9a>
 8000670:	f04f 0300 	mov.w	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    if (norm1 > 1.0f) norm1 = 1.0f;
 8000676:	edd7 7a07 	vldr	s15, [r7, #28]
 800067a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800067e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000686:	dd02      	ble.n	800068e <APPS_Loop+0xb2>
 8000688:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800068c:	61fb      	str	r3, [r7, #28]
    if (norm2 < 0.0f) norm2 = 0.0f;
 800068e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d502      	bpl.n	80006a2 <APPS_Loop+0xc6>
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
    if (norm2 > 1.0f) norm2 = 1.0f;
 80006a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80006a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b2:	dd02      	ble.n	80006ba <APPS_Loop+0xde>
 80006b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006b8:	61bb      	str	r3, [r7, #24]

    // İki normalize değer arasındaki fark
    float diff = fabsf(norm1 - norm2);
 80006ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80006be:	edd7 7a06 	vldr	s15, [r7, #24]
 80006c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006c6:	eef0 7ae7 	vabs.f32	s15, s15
 80006ca:	edc7 7a03 	vstr	s15, [r7, #12]

    uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <APPS_Loop+0x1d4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d4:	60bb      	str	r3, [r7, #8]

    // Eğer fark toleransı aşarsa
    if (diff > 0.10f) {
 80006d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80006da:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80007b4 <APPS_Loop+0x1d8>
 80006de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e6:	dd1e      	ble.n	8000726 <APPS_Loop+0x14a>
        if (!diff_flag) {
 80006e8:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <APPS_Loop+0x1dc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f083 0301 	eor.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <APPS_Loop+0x128>
            diff_flag = true;
 80006f6:	4b30      	ldr	r3, [pc, #192]	@ (80007b8 <APPS_Loop+0x1dc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
            diff_start_time = now;  // Takip başlangıcı
 80006fc:	4a2f      	ldr	r2, [pc, #188]	@ (80007bc <APPS_Loop+0x1e0>)
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	e013      	b.n	800072c <APPS_Loop+0x150>
        } else {
            // Süreyi kontrol et
            uint32_t elapsed = (now >= diff_start_time) ? (now - diff_start_time) : (0xFFFFFFFF - diff_start_time + now + 1);
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <APPS_Loop+0x1e0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	607b      	str	r3, [r7, #4]

            if (elapsed >= 1000) { // 100ms geçtiyse
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000714:	d30a      	bcc.n	800072c <APPS_Loop+0x150>
                permanent_fault = true;
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <APPS_Loop+0x1e4>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <APPS_Loop+0x1bc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	@ 0x34
 8000724:	e002      	b.n	800072c <APPS_Loop+0x150>

            }
        }
    } else {
        diff_flag = false;
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <APPS_Loop+0x1dc>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
    }

    // Eğer kalıcı hata yoksa PWM duty güncellenir

        if (!permanent_fault) {
 800072c:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <APPS_Loop+0x1e4>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f083 0301 	eor.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d026      	beq.n	8000788 <APPS_Loop+0x1ac>
            pwm_buffer[0] = (uint32_t)(norm1 * 49);
 800073a:	edd7 7a07 	vldr	s15, [r7, #28]
 800073e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80007c4 <APPS_Loop+0x1e8>
 8000742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074a:	ee17 2a90 	vmov	r2, s15
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000750:	601a      	str	r2, [r3, #0]

            // Duty değeri sınırlandırılır
            if (pwm_buffer[0] < 2) {
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d803      	bhi.n	8000762 <APPS_Loop+0x186>
                pwm_buffer[0] = 0;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <APPS_Loop+0x1ec>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	e006      	b.n	8000770 <APPS_Loop+0x194>
            } else if (pwm_buffer[0] > 47) {
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b2f      	cmp	r3, #47	@ 0x2f
 8000768:	d902      	bls.n	8000770 <APPS_Loop+0x194>
                pwm_buffer[0] = 49;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <APPS_Loop+0x1ec>)
 800076c:	2231      	movs	r2, #49	@ 0x31
 800076e:	601a      	str	r2, [r3, #0]
            }
            if(!permanent_fault){
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <APPS_Loop+0x1e4>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <APPS_Loop+0x1ac>

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_buffer[0]);
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <APPS_Loop+0x1bc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	635a      	str	r2, [r3, #52]	@ 0x34
            }


    }
}
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200002ae 	.word	0x200002ae
 8000798:	2000018c 	.word	0x2000018c
 800079c:	20000084 	.word	0x20000084
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000002 	.word	0x20000002
 80007a8:	20000004 	.word	0x20000004
 80007ac:	20000006 	.word	0x20000006
 80007b0:	200001d4 	.word	0x200001d4
 80007b4:	3dcccccd 	.word	0x3dcccccd
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	20000090 	.word	0x20000090
 80007c0:	2000008d 	.word	0x2000008d
 80007c4:	42440000 	.word	0x42440000
 80007c8:	20000094 	.word	0x20000094

080007cc <APPS_Deinit>:

void APPS_Deinit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc1);
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <APPS_Deinit+0x2c>)
 80007d2:	f001 f80d 	bl	80017f0 <HAL_ADC_Stop_DMA>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80007d6:	2100      	movs	r1, #0
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <APPS_Deinit+0x30>)
 80007da:	f003 f813 	bl	8003804 <HAL_TIM_PWM_Stop>

    adcdata[0] = 0;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <APPS_Deinit+0x34>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
    adcdata[1] = 0;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <APPS_Deinit+0x34>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80007ea:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <APPS_Deinit+0x30>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000009c 	.word	0x2000009c
 80007fc:	2000018c 	.word	0x2000018c
 8000800:	20000084 	.word	0x20000084

08000804 <GYRO_Init>:
ADC_HandleTypeDef* hadc_gyro = &hadc2;

uint16_t gyrodata[2];

void GYRO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
    // Başlangıçta yapılacak bir şey yok, ADC ayarı CubeMX'te yapılmalı
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fdfb 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f8d3 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000822:	f000 fb0d 	bl	8000e40 <MX_DMA_Init>
  MX_GPIO_Init();
 8000826:	f000 fb2b 	bl	8000e80 <MX_GPIO_Init>
  MX_ADC1_Init();
 800082a:	f000 f937 	bl	8000a9c <MX_ADC1_Init>
  MX_TIM3_Init();
 800082e:	f000 f9f5 	bl	8000c1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000832:	f000 fa69 	bl	8000d08 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000836:	f000 fad9 	bl	8000dec <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800083a:	f000 f98f 	bl	8000b5c <MX_ADC2_Init>
  MX_TIM14_Init();
 800083e:	f000 fab1 	bl	8000da4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  GYRO_Init();
 8000842:	f7ff ffdf 	bl	8000804 <GYRO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint32_t time_ms = __HAL_TIM_GET_COUNTER(&htim14);
 8000846:	4b52      	ldr	r3, [pc, #328]	@ (8000990 <main+0x17c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800084c:	607b      	str	r3, [r7, #4]

      // döngü içinde:
      rtd_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800084e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000852:	4850      	ldr	r0, [pc, #320]	@ (8000994 <main+0x180>)
 8000854:	f002 f972 	bl	8002b3c <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b4e      	ldr	r3, [pc, #312]	@ (8000998 <main+0x184>)
 800085e:	701a      	strb	r2, [r3, #0]
      GPIO_PinState brake_pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000860:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000864:	484b      	ldr	r0, [pc, #300]	@ (8000994 <main+0x180>)
 8000866:	f002 f969 	bl	8002b3c <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	70fb      	strb	r3, [r7, #3]

      // RTD toggle: sadece buton düşen kenarda (HIGH ➝ LOW)
      if (prev_rtd_button == GPIO_PIN_SET && rtd_button == GPIO_PIN_RESET)
 800086e:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <main+0x188>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d138      	bne.n	80008e8 <main+0xd4>
 8000876:	4b48      	ldr	r3, [pc, #288]	@ (8000998 <main+0x184>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d134      	bne.n	80008e8 <main+0xd4>
      {
          if (!rtd_active && brake_pressed == GPIO_PIN_SET) {
 800087e:	4b48      	ldr	r3, [pc, #288]	@ (80009a0 <main+0x18c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	f083 0301 	eor.w	r3, r3, #1
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01b      	beq.n	80008c4 <main+0xb0>
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d118      	bne.n	80008c4 <main+0xb0>
              // RTD aktif ediliyor
              rtd_active = true;
 8000892:	4b43      	ldr	r3, [pc, #268]	@ (80009a0 <main+0x18c>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
              apps_enabled = true;
 8000898:	4b42      	ldr	r3, [pc, #264]	@ (80009a4 <main+0x190>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
              APPS_Init();
 800089e:	f7ff fe85 	bl	80005ac <APPS_Init>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Buzzer ON
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a8:	483a      	ldr	r0, [pc, #232]	@ (8000994 <main+0x180>)
 80008aa:	f002 f95f 	bl	8002b6c <HAL_GPIO_WritePin>
              HAL_Delay(2000);
 80008ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008b2:	f000 fe21 	bl	80014f8 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008bc:	4835      	ldr	r0, [pc, #212]	@ (8000994 <main+0x180>)
 80008be:	f002 f955 	bl	8002b6c <HAL_GPIO_WritePin>
 80008c2:	e011      	b.n	80008e8 <main+0xd4>
          } else if (rtd_active) {
 80008c4:	4b36      	ldr	r3, [pc, #216]	@ (80009a0 <main+0x18c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00d      	beq.n	80008e8 <main+0xd4>
              // RTD devreden çıkarılıyor
              rtd_active = false;
 80008cc:	4b34      	ldr	r3, [pc, #208]	@ (80009a0 <main+0x18c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
              apps_enabled = false;
 80008d2:	4b34      	ldr	r3, [pc, #208]	@ (80009a4 <main+0x190>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
              APPS_Deinit();
 80008d8:	f7ff ff78 	bl	80007cc <APPS_Deinit>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Buzzer OFF
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e2:	482c      	ldr	r0, [pc, #176]	@ (8000994 <main+0x180>)
 80008e4:	f002 f942 	bl	8002b6c <HAL_GPIO_WritePin>
          }
      }

      // butonun önceki durumunu güncelle
      prev_rtd_button = rtd_button;
 80008e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <main+0x184>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <main+0x188>)
 80008ee:	701a      	strb	r2, [r3, #0]


      // Buzzer otomatik kapatma (3 saniye sonra)
      if (buzzer_on && time_ms >= 3000) {
 80008f0:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <main+0x194>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00d      	beq.n	8000914 <main+0x100>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80008fe:	4293      	cmp	r3, r2
 8000900:	d908      	bls.n	8000914 <main+0x100>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000908:	4822      	ldr	r0, [pc, #136]	@ (8000994 <main+0x180>)
 800090a:	f002 f92f 	bl	8002b6c <HAL_GPIO_WritePin>
          buzzer_on = false;
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <main+0x194>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
      }

      if (apps_enabled) {
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <main+0x190>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <main+0x10c>
          APPS_Loop();
 800091c:	f7ff fe5e 	bl	80005dc <APPS_Loop>
      }

      if (brake_pressed == GPIO_PIN_SET)
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <main+0x120>
          HAL_UART_Transmit(&huart2, (uint8_t*)"Brake ON\r\n", 10, HAL_MAX_DELAY);
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	220a      	movs	r2, #10
 800092c:	491f      	ldr	r1, [pc, #124]	@ (80009ac <main+0x198>)
 800092e:	4820      	ldr	r0, [pc, #128]	@ (80009b0 <main+0x19c>)
 8000930:	f003 fd44 	bl	80043bc <HAL_UART_Transmit>
      if (rtd_button == GPIO_PIN_RESET)
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <main+0x184>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d106      	bne.n	800094a <main+0x136>
          HAL_UART_Transmit(&huart2, (uint8_t*)"RTD ON\r\n", 9, HAL_MAX_DELAY);
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	2209      	movs	r2, #9
 8000942:	491c      	ldr	r1, [pc, #112]	@ (80009b4 <main+0x1a0>)
 8000944:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <main+0x19c>)
 8000946:	f003 fd39 	bl	80043bc <HAL_UART_Transmit>

      // 🧠 UART veri gönderimi (her zaman gönderilecek, apps açık olmasa bile)
      snprintf(uart_buf, sizeof(uart_buf),
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <main+0x1a4>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <main+0x1a4>)
 8000950:	685b      	ldr	r3, [r3, #4]
               "APPS: %lu, %lu | GYRO: %lu, %lu\r\n",
               adcdata[0], adcdata[1], gyrodata[0], gyrodata[1]);
 8000952:	491a      	ldr	r1, [pc, #104]	@ (80009bc <main+0x1a8>)
 8000954:	8809      	ldrh	r1, [r1, #0]
      snprintf(uart_buf, sizeof(uart_buf),
 8000956:	4608      	mov	r0, r1
               adcdata[0], adcdata[1], gyrodata[0], gyrodata[1]);
 8000958:	4918      	ldr	r1, [pc, #96]	@ (80009bc <main+0x1a8>)
 800095a:	8849      	ldrh	r1, [r1, #2]
      snprintf(uart_buf, sizeof(uart_buf),
 800095c:	9102      	str	r1, [sp, #8]
 800095e:	9001      	str	r0, [sp, #4]
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4613      	mov	r3, r2
 8000964:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <main+0x1ac>)
 8000966:	2164      	movs	r1, #100	@ 0x64
 8000968:	4816      	ldr	r0, [pc, #88]	@ (80009c4 <main+0x1b0>)
 800096a:	f004 f8e3 	bl	8004b34 <sniprintf>

      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 800096e:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <main+0x1b0>)
 8000970:	f7ff fc2e 	bl	80001d0 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	4911      	ldr	r1, [pc, #68]	@ (80009c4 <main+0x1b0>)
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <main+0x19c>)
 8000980:	f003 fd1c 	bl	80043bc <HAL_UART_Transmit>
      HAL_Delay(300);
 8000984:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000988:	f000 fdb6 	bl	80014f8 <HAL_Delay>
  {
 800098c:	e75b      	b.n	8000846 <main+0x32>
 800098e:	bf00      	nop
 8000990:	2000021c 	.word	0x2000021c
 8000994:	40020000 	.word	0x40020000
 8000998:	200002ac 	.word	0x200002ac
 800099c:	20000008 	.word	0x20000008
 80009a0:	200002ad 	.word	0x200002ad
 80009a4:	200002ae 	.word	0x200002ae
 80009a8:	200002af 	.word	0x200002af
 80009ac:	080054b4 	.word	0x080054b4
 80009b0:	20000264 	.word	0x20000264
 80009b4:	080054c0 	.word	0x080054c0
 80009b8:	20000084 	.word	0x20000084
 80009bc:	20000098 	.word	0x20000098
 80009c0:	080054cc 	.word	0x080054cc
 80009c4:	200002b0 	.word	0x200002b0

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	@ 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	@ 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 f8e2 	bl	8004ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	4a27      	ldr	r2, [pc, #156]	@ (8000a94 <SystemClock_Config+0xcc>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <SystemClock_Config+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a21      	ldr	r2, [pc, #132]	@ (8000a98 <SystemClock_Config+0xd0>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a3c:	23a8      	movs	r3, #168	@ 0xa8
 8000a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f8a7 	bl	8002ba0 <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a58:	f000 fa64 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2105      	movs	r1, #5
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fb08 	bl	8003090 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a86:	f000 fa4d 	bl	8000f24 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	@ 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aae:	4b28      	ldr	r3, [pc, #160]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000ab0:	4a28      	ldr	r2, [pc, #160]	@ (8000b54 <MX_ADC1_Init+0xb8>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000ab6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000abc:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000ade:	4a1e      	ldr	r2, [pc, #120]	@ (8000b58 <MX_ADC1_Init+0xbc>)
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000afc:	4814      	ldr	r0, [pc, #80]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000afe:	f000 fd1f 	bl	8001540 <HAL_ADC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b08:	f000 fa0c 	bl	8000f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000b1e:	f000 fedf 	bl	80018e0 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b28:	f000 f9fc 	bl	8000f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_ADC1_Init+0xb4>)
 8000b3a:	f000 fed1 	bl	80018e0 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b44:	f000 f9ee 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000009c 	.word	0x2000009c
 8000b54:	40012000 	.word	0x40012000
 8000b58:	0f000001 	.word	0x0f000001

08000b5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b70:	4a28      	ldr	r2, [pc, #160]	@ (8000c14 <MX_ADC2_Init+0xb8>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7c:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000b82:	4b23      	ldr	r3, [pc, #140]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <MX_ADC2_Init+0xbc>)
 8000ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bbc:	4814      	ldr	r0, [pc, #80]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000bbe:	f000 fcbf 	bl	8001540 <HAL_ADC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000bc8:	f000 f9ac 	bl	8000f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000bde:	f000 fe7f 	bl	80018e0 <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000be8:	f000 f99c 	bl	8000f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bec:	2305      	movs	r3, #5
 8000bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_ADC2_Init+0xb4>)
 8000bfa:	f000 fe71 	bl	80018e0 <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000c04:	f000 f98e 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000e4 	.word	0x200000e4
 8000c14:	40012100 	.word	0x40012100
 8000c18:	0f000001 	.word	0x0f000001

08000c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	@ 0x38
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]
 8000c4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d04 <MX_TIM3_Init+0xe8>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000c52:	4b2b      	ldr	r3, [pc, #172]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c54:	2253      	movs	r2, #83	@ 0x53
 8000c56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c60:	2231      	movs	r2, #49	@ 0x31
 8000c62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c64:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c70:	4823      	ldr	r0, [pc, #140]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c72:	f002 fbed 	bl	8003450 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c7c:	f000 f952 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	481c      	ldr	r0, [pc, #112]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c8e:	f002 feeb 	bl	8003a68 <HAL_TIM_ConfigClockSource>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c98:	f000 f944 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c9c:	4818      	ldr	r0, [pc, #96]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000c9e:	f002 fc8f 	bl	80035c0 <HAL_TIM_PWM_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000ca8:	f000 f93c 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000cbc:	f003 fab2 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000cc6:	f000 f92d 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cca:	2360      	movs	r3, #96	@ 0x60
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000ce2:	f002 fdff 	bl	80038e4 <HAL_TIM_PWM_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000cec:	f000 f91a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <MX_TIM3_Init+0xe4>)
 8000cf2:	f000 fa61 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000cf6:	bf00      	nop
 8000cf8:	3738      	adds	r7, #56	@ 0x38
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000018c 	.word	0x2000018c
 8000d04:	40000400 	.word	0x40000400

08000d08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <MX_TIM4_Init+0x98>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d2c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d4c:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d4e:	f002 fb7f 	bl	8003450 <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d58:	f000 f8e4 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d6a:	f002 fe7d 	bl	8003a68 <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d74:	f000 f8d6 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_TIM4_Init+0x94>)
 8000d86:	f003 fa4d 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f000 f8c8 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200001d4 	.word	0x200001d4
 8000da0:	40000800 	.word	0x40000800

08000da4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_TIM14_Init+0x40>)
 8000daa:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <MX_TIM14_Init+0x44>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16799;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_TIM14_Init+0x40>)
 8000db0:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000db4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_TIM14_Init+0x40>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 3000;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_TIM14_Init+0x40>)
 8000dbe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000dc2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <MX_TIM14_Init+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_TIM14_Init+0x40>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_TIM14_Init+0x40>)
 8000dd2:	f002 fb3d 	bl	8003450 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000ddc:	f000 f8a2 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000021c 	.word	0x2000021c
 8000de8:	40002000 	.word	0x40002000

08000dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <MX_USART2_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f003 fa7a 	bl	800431c <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 f879 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000264 	.word	0x20000264
 8000e3c:	40004400 	.word	0x40004400

08000e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <MX_DMA_Init+0x3c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <MX_DMA_Init+0x3c>)
 8000e50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <MX_DMA_Init+0x3c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	203c      	movs	r0, #60	@ 0x3c
 8000e68:	f001 f8b5 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e6c:	203c      	movs	r0, #60	@ 0x3c
 8000e6e:	f001 f8ce 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <MX_GPIO_Init+0x9c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f1c <MX_GPIO_Init+0x9c>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_GPIO_Init+0x9c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <MX_GPIO_Init+0x9c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <MX_GPIO_Init+0x9c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_GPIO_Init+0x9c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ed4:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <MX_GPIO_Init+0xa0>)
 8000ed6:	f001 fe49 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <MX_GPIO_Init+0xa0>)
 8000ef4:	f001 fc86 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ef8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <MX_GPIO_Init+0xa0>)
 8000f0e:	f001 fc79 	bl	8002804 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	@ 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a46      	ldr	r2, [pc, #280]	@ (80010b8 <HAL_ADC_MspInit+0x138>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d159      	bne.n	8001056 <HAL_ADC_MspInit+0xd6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	4b45      	ldr	r3, [pc, #276]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a44      	ldr	r2, [pc, #272]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b42      	ldr	r3, [pc, #264]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4834      	ldr	r0, [pc, #208]	@ (80010c0 <HAL_ADC_MspInit+0x140>)
 8000fee:	f001 fc09 	bl	8002804 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000ff2:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8000ff4:	4a34      	ldr	r2, [pc, #208]	@ (80010c8 <HAL_ADC_MspInit+0x148>)
 8000ff6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffe:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800100a:	4b2e      	ldr	r3, [pc, #184]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 800100c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001010:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001012:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8001014:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001018:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 800101c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001020:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001022:	4b28      	ldr	r3, [pc, #160]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8001024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001028:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 800102c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001030:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001038:	4822      	ldr	r0, [pc, #136]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 800103a:	f001 f803 	bl	8002044 <HAL_DMA_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001044:	f7ff ff6e 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a1e      	ldr	r2, [pc, #120]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 800104c:	639a      	str	r2, [r3, #56]	@ 0x38
 800104e:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <HAL_ADC_MspInit+0x144>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001054:	e02c      	b.n	80010b0 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <HAL_ADC_MspInit+0x14c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d127      	bne.n	80010b0 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8001066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800106e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8001072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_ADC_MspInit+0x13c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001098:	2330      	movs	r3, #48	@ 0x30
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <HAL_ADC_MspInit+0x140>)
 80010ac:	f001 fbaa 	bl	8002804 <HAL_GPIO_Init>
}
 80010b0:	bf00      	nop
 80010b2:	3730      	adds	r7, #48	@ 0x30
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	2000012c 	.word	0x2000012c
 80010c8:	40026470 	.word	0x40026470
 80010cc:	40012100 	.word	0x40012100

080010d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	@ 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <HAL_TIM_Base_MspInit+0xd4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10e      	bne.n	8001110 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a2b      	ldr	r2, [pc, #172]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800110e:	e044      	b.n	800119a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a25      	ldr	r2, [pc, #148]	@ (80011ac <HAL_TIM_Base_MspInit+0xdc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10e      	bne.n	8001138 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
}
 8001136:	e030      	b.n	800119a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM14)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1c      	ldr	r2, [pc, #112]	@ (80011b0 <HAL_TIM_Base_MspInit+0xe0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12b      	bne.n	800119a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800118a:	2309      	movs	r3, #9
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <HAL_TIM_Base_MspInit+0xe4>)
 8001196:	f001 fb35 	bl	8002804 <HAL_GPIO_Init>
}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	@ 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40000400 	.word	0x40000400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40000800 	.word	0x40000800
 80011b0:	40002000 	.word	0x40002000
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <HAL_TIM_MspPostInit+0x68>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d11d      	bne.n	8001216 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_TIM_MspPostInit+0x6c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <HAL_TIM_MspPostInit+0x6c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_TIM_MspPostInit+0x6c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f6:	2340      	movs	r3, #64	@ 0x40
 80011f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001206:	2302      	movs	r3, #2
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_TIM_MspPostInit+0x70>)
 8001212:	f001 faf7 	bl	8002804 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40000400 	.word	0x40000400
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <HAL_UART_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_UART_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001296:	2307      	movs	r3, #7
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <HAL_UART_MspInit+0x8c>)
 80012a2:	f001 faaf 	bl	8002804 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f8d1 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <DMA2_Stream4_IRQHandler+0x10>)
 8001322:	f001 f805 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000012c 	.word	0x2000012c

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f003 fc26 	bl	8004bb0 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20020000 	.word	0x20020000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000314 	.word	0x20000314
 8001398:	20000468 	.word	0x20000468

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013c4:	f7ff ffea 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f003 fbe5 	bl	8004bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f2:	f7ff fa0f 	bl	8000814 <main>
  bx  lr    
 80013f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001404:	08005554 	.word	0x08005554
  ldr r2, =_sbss
 8001408:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800140c:	20000464 	.word	0x20000464

08001410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <HAL_Init+0x40>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <HAL_Init+0x40>)
 800142a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800142e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <HAL_Init+0x40>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 fdbf 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f808 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff fd72 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_InitTick+0x54>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_InitTick+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fdd7 	bl	800202a <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 fd9f 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	@ (80014b4 <HAL_InitTick+0x5c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000000c 	.word	0x2000000c
 80014b0:	20000014 	.word	0x20000014
 80014b4:	20000010 	.word	0x20000010

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000014 	.word	0x20000014
 80014dc:	20000318 	.word	0x20000318

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000318 	.word	0x20000318

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000014 	.word	0x20000014

08001540 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e033      	b.n	80015be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fd0e 	bl	8000f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	d118      	bne.n	80015b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001586:	f023 0302 	bic.w	r3, r3, #2
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fac6 	bl	8001b24 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f023 0303 	bic.w	r3, r3, #3
 80015a6:	f043 0201 	orr.w	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ae:	e001      	b.n	80015b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Start_DMA+0x22>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e0eb      	b.n	80017c2 <HAL_ADC_Start_DMA+0x1fa>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d018      	beq.n	8001632 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001610:	4b6e      	ldr	r3, [pc, #440]	@ (80017cc <HAL_ADC_Start_DMA+0x204>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6e      	ldr	r2, [pc, #440]	@ (80017d0 <HAL_ADC_Start_DMA+0x208>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9a      	lsrs	r2, r3, #18
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001624:	e002      	b.n	800162c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3b01      	subs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001640:	d107      	bne.n	8001652 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001650:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	f040 80a3 	bne.w	80017a8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800168c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f023 0206 	bic.w	r2, r3, #6
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80016ae:	e002      	b.n	80016b6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016be:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <HAL_ADC_Start_DMA+0x20c>)
 80016c0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c6:	4a44      	ldr	r2, [pc, #272]	@ (80017d8 <HAL_ADC_Start_DMA+0x210>)
 80016c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ce:	4a43      	ldr	r2, [pc, #268]	@ (80017dc <HAL_ADC_Start_DMA+0x214>)
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d6:	4a42      	ldr	r2, [pc, #264]	@ (80017e0 <HAL_ADC_Start_DMA+0x218>)
 80016d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80016f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001702:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	334c      	adds	r3, #76	@ 0x4c
 800170e:	4619      	mov	r1, r3
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f000 fd44 	bl	80021a0 <HAL_DMA_Start_IT>
 8001718:	4603      	mov	r3, r0
 800171a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2b00      	cmp	r3, #0
 8001726:	d12a      	bne.n	800177e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2d      	ldr	r2, [pc, #180]	@ (80017e4 <HAL_ADC_Start_DMA+0x21c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d015      	beq.n	800175e <HAL_ADC_Start_DMA+0x196>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2c      	ldr	r2, [pc, #176]	@ (80017e8 <HAL_ADC_Start_DMA+0x220>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d105      	bne.n	8001748 <HAL_ADC_Start_DMA+0x180>
 800173c:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <HAL_ADC_Start_DMA+0x20c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00a      	beq.n	800175e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a27      	ldr	r2, [pc, #156]	@ (80017ec <HAL_ADC_Start_DMA+0x224>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d136      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f8>
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <HAL_ADC_Start_DMA+0x20c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b00      	cmp	r3, #0
 800175c:	d130      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d129      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e020      	b.n	80017c0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_ADC_Start_DMA+0x21c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d11b      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f8>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d114      	bne.n	80017c0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	e00b      	b.n	80017c0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f043 0210 	orr.w	r2, r3, #16
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80017c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	40012300 	.word	0x40012300
 80017d8:	08001d1d 	.word	0x08001d1d
 80017dc:	08001dd7 	.word	0x08001dd7
 80017e0:	08001df3 	.word	0x08001df3
 80017e4:	40012000 	.word	0x40012000
 80017e8:	40012100 	.word	0x40012100
 80017ec:	40012200 	.word	0x40012200

080017f0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ADC_Stop_DMA+0x1a>
 8001806:	2302      	movs	r3, #2
 8001808:	e048      	b.n	800189c <HAL_ADC_Stop_DMA+0xac>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d130      	bne.n	8001892 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800183e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d10f      	bne.n	800186e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fcfc 	bl	8002250 <HAL_DMA_Abort>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800187c:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1c>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e105      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x228>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b09      	cmp	r3, #9
 800190a:	d925      	bls.n	8001958 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68d9      	ldr	r1, [r3, #12]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	3b1e      	subs	r3, #30
 8001922:	2207      	movs	r2, #7
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43da      	mvns	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	400a      	ands	r2, r1
 8001930:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68d9      	ldr	r1, [r3, #12]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	4603      	mov	r3, r0
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4403      	add	r3, r0
 800194a:	3b1e      	subs	r3, #30
 800194c:	409a      	lsls	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	e022      	b.n	800199e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6919      	ldr	r1, [r3, #16]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	2207      	movs	r2, #7
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6919      	ldr	r1, [r3, #16]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	4603      	mov	r3, r0
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4403      	add	r3, r0
 8001994:	409a      	lsls	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d824      	bhi.n	80019f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b05      	subs	r3, #5
 80019b8:	221f      	movs	r2, #31
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	400a      	ands	r2, r1
 80019c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	3b05      	subs	r3, #5
 80019e2:	fa00 f203 	lsl.w	r2, r0, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ee:	e04c      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d824      	bhi.n	8001a42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	3b23      	subs	r3, #35	@ 0x23
 8001a0a:	221f      	movs	r2, #31
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43da      	mvns	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	400a      	ands	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	3b23      	subs	r3, #35	@ 0x23
 8001a34:	fa00 f203 	lsl.w	r2, r0, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a40:	e023      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b41      	subs	r3, #65	@ 0x41
 8001a54:	221f      	movs	r2, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	400a      	ands	r2, r1
 8001a62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b41      	subs	r3, #65	@ 0x41
 8001a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a8a:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <HAL_ADC_ConfigChannel+0x234>)
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a21      	ldr	r2, [pc, #132]	@ (8001b18 <HAL_ADC_ConfigChannel+0x238>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d109      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x1cc>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b12      	cmp	r3, #18
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	@ (8001b18 <HAL_ADC_ConfigChannel+0x238>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d123      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x21e>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d003      	beq.n	8001ac6 <HAL_ADC_ConfigChannel+0x1e6>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b11      	cmp	r3, #17
 8001ac4:	d11b      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d111      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_ADC_ConfigChannel+0x23c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <HAL_ADC_ConfigChannel+0x240>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	0c9a      	lsrs	r2, r3, #18
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40012300 	.word	0x40012300
 8001b18:	40012000 	.word	0x40012000
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	431bde83 	.word	0x431bde83

08001b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b2c:	4b79      	ldr	r3, [pc, #484]	@ (8001d14 <ADC_Init+0x1f0>)
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	021a      	lsls	r2, r3, #8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	4a58      	ldr	r2, [pc, #352]	@ (8001d18 <ADC_Init+0x1f4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d022      	beq.n	8001c02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6899      	ldr	r1, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	e00f      	b.n	8001c22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0202 	bic.w	r2, r2, #2
 8001c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6899      	ldr	r1, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e1b      	ldrb	r3, [r3, #24]
 8001c3c:	005a      	lsls	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6859      	ldr	r1, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	035a      	lsls	r2, r3, #13
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	e007      	b.n	8001c98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	051a      	lsls	r2, r3, #20
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cda:	025a      	lsls	r2, r3, #9
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	029a      	lsls	r2, r3, #10
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40012300 	.word	0x40012300
 8001d18:	0f000001 	.word	0x0f000001

08001d1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13c      	bne.n	8001db0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d127      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d119      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0220 	bic.w	r2, r2, #32
 8001d82:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff fd7b 	bl	80018a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dae:	e00e      	b.n	8001dce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff fd85 	bl	80018cc <HAL_ADC_ErrorCallback>
}
 8001dc2:	e004      	b.n	8001dce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff fd67 	bl	80018b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fd5a 	bl	80018cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	@ (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff fa46 	bl	80014e0 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e099      	b.n	8002194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002080:	e00f      	b.n	80020a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002082:	f7ff fa2d 	bl	80014e0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b05      	cmp	r3, #5
 800208e:	d908      	bls.n	80020a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e078      	b.n	8002194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e8      	bne.n	8002082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4b38      	ldr	r3, [pc, #224]	@ (800219c <HAL_DMA_Init+0x158>)
 80020bc:	4013      	ands	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d107      	bne.n	800210c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	4313      	orrs	r3, r2
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0307 	bic.w	r3, r3, #7
 8002122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	2b04      	cmp	r3, #4
 8002134:	d117      	bne.n	8002166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fadf 	bl	800270c <DMA_CheckFifoParam>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002162:	2301      	movs	r3, #1
 8002164:	e016      	b.n	8002194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa96 	bl	80026a0 <DMA_CalcBaseAndBitshift>
 8002174:	4603      	mov	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	223f      	movs	r2, #63	@ 0x3f
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	f010803f 	.word	0xf010803f

080021a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_DMA_Start_IT+0x26>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e040      	b.n	8002248 <HAL_DMA_Start_IT+0xa8>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d12f      	bne.n	800223a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fa28 	bl	8002644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	223f      	movs	r2, #63	@ 0x3f
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0216 	orr.w	r2, r2, #22
 800220e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0208 	orr.w	r2, r2, #8
 8002226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e005      	b.n	8002246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800225e:	f7ff f93f 	bl	80014e0 <HAL_GetTick>
 8002262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d008      	beq.n	8002282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2280      	movs	r2, #128	@ 0x80
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e052      	b.n	8002328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0216 	bic.w	r2, r2, #22
 8002290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <HAL_DMA_Abort+0x62>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0208 	bic.w	r2, r2, #8
 80022c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d2:	e013      	b.n	80022fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d4:	f7ff f904 	bl	80014e0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d90c      	bls.n	80022fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2203      	movs	r2, #3
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e015      	b.n	8002328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e4      	bne.n	80022d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	223f      	movs	r2, #63	@ 0x3f
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800233c:	4b8e      	ldr	r3, [pc, #568]	@ (8002578 <HAL_DMA_IRQHandler+0x248>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a8e      	ldr	r2, [pc, #568]	@ (800257c <HAL_DMA_IRQHandler+0x24c>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	2208      	movs	r2, #8
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01a      	beq.n	800239c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	2208      	movs	r2, #8
 800238a:	409a      	lsls	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a0:	2201      	movs	r2, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	2201      	movs	r2, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	f043 0202 	orr.w	r2, r3, #2
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	2204      	movs	r2, #4
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d012      	beq.n	8002408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00b      	beq.n	8002408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f4:	2204      	movs	r2, #4
 80023f6:	409a      	lsls	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f043 0204 	orr.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	2210      	movs	r2, #16
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d043      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d03c      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	2210      	movs	r2, #16
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d018      	beq.n	8002472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d108      	bne.n	8002460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d024      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
 800245e:	e01f      	b.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01b      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
 8002470:	e016      	b.n	80024a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0208 	bic.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	2220      	movs	r2, #32
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 808f 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8087 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	2220      	movs	r2, #32
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d136      	bne.n	8002548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0216 	bic.w	r2, r2, #22
 80024e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <HAL_DMA_IRQHandler+0x1da>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0208 	bic.w	r2, r2, #8
 8002518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251e:	223f      	movs	r2, #63	@ 0x3f
 8002520:	409a      	lsls	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07e      	beq.n	800263c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
        }
        return;
 8002546:	e079      	b.n	800263c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	2b00      	cmp	r3, #0
 800256a:	d031      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
 8002574:	e02c      	b.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
 8002576:	bf00      	nop
 8002578:	2000000c 	.word	0x2000000c
 800257c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e01e      	b.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d032      	beq.n	800263e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d022      	beq.n	800262a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2205      	movs	r2, #5
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3301      	adds	r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	d307      	bcc.n	8002618 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f2      	bne.n	80025fc <HAL_DMA_IRQHandler+0x2cc>
 8002616:	e000      	b.n	800261a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002618:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
 800263a:	e000      	b.n	800263e <HAL_DMA_IRQHandler+0x30e>
        return;
 800263c:	bf00      	nop
    }
  }
}
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b40      	cmp	r3, #64	@ 0x40
 8002670:	d108      	bne.n	8002684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002682:	e007      	b.n	8002694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	3b10      	subs	r3, #16
 80026b0:	4a14      	ldr	r2, [pc, #80]	@ (8002704 <DMA_CalcBaseAndBitshift+0x64>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ba:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <DMA_CalcBaseAndBitshift+0x68>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d909      	bls.n	80026e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	1d1a      	adds	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	@ 0x58
 80026e0:	e007      	b.n	80026f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	aaaaaaab 	.word	0xaaaaaaab
 8002708:	08005508 	.word	0x08005508

0800270c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11f      	bne.n	8002766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d856      	bhi.n	80027da <DMA_CheckFifoParam+0xce>
 800272c:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <DMA_CheckFifoParam+0x28>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002745 	.word	0x08002745
 8002738:	08002757 	.word	0x08002757
 800273c:	08002745 	.word	0x08002745
 8002740:	080027db 	.word	0x080027db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d046      	beq.n	80027de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002754:	e043      	b.n	80027de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800275e:	d140      	bne.n	80027e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002764:	e03d      	b.n	80027e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800276e:	d121      	bne.n	80027b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d837      	bhi.n	80027e6 <DMA_CheckFifoParam+0xda>
 8002776:	a201      	add	r2, pc, #4	@ (adr r2, 800277c <DMA_CheckFifoParam+0x70>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	0800278d 	.word	0x0800278d
 8002780:	08002793 	.word	0x08002793
 8002784:	0800278d 	.word	0x0800278d
 8002788:	080027a5 	.word	0x080027a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e030      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d025      	beq.n	80027ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a2:	e022      	b.n	80027ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027ac:	d11f      	bne.n	80027ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027b2:	e01c      	b.n	80027ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d903      	bls.n	80027c2 <DMA_CheckFifoParam+0xb6>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d003      	beq.n	80027c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027c0:	e018      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      break;
 80027c6:	e015      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00e      	beq.n	80027f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      break;
 80027d8:	e00b      	b.n	80027f2 <DMA_CheckFifoParam+0xe6>
      break;
 80027da:	bf00      	nop
 80027dc:	e00a      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
 80027e0:	e008      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
 80027e4:	e006      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      break;
 80027e6:	bf00      	nop
 80027e8:	e004      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
    }
  } 
  
  return status; 
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e16b      	b.n	8002af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 815a 	bne.w	8002af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80b4 	beq.w	8002af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b60      	ldr	r3, [pc, #384]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a5f      	ldr	r2, [pc, #380]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b14 <HAL_GPIO_Init+0x310>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a52      	ldr	r2, [pc, #328]	@ (8002b18 <HAL_GPIO_Init+0x314>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02b      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a51      	ldr	r2, [pc, #324]	@ (8002b1c <HAL_GPIO_Init+0x318>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d025      	beq.n	8002a26 <HAL_GPIO_Init+0x222>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a50      	ldr	r2, [pc, #320]	@ (8002b20 <HAL_GPIO_Init+0x31c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01f      	beq.n	8002a22 <HAL_GPIO_Init+0x21e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002b24 <HAL_GPIO_Init+0x320>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x21a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002b28 <HAL_GPIO_Init+0x324>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x216>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b2c <HAL_GPIO_Init+0x328>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x212>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002b30 <HAL_GPIO_Init+0x32c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x20e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	@ (8002b34 <HAL_GPIO_Init+0x330>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x20a>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e00e      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e00c      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a12:	2306      	movs	r3, #6
 8002a14:	e00a      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	@ (8002b14 <HAL_GPIO_Init+0x310>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a32      	ldr	r2, [pc, #200]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a27      	ldr	r2, [pc, #156]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9e:	4b26      	ldr	r3, [pc, #152]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aec:	4a12      	ldr	r2, [pc, #72]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f ae90 	bls.w	8002820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40021400 	.word	0x40021400
 8002b30:	40021800 	.word	0x40021800
 8002b34:	40021c00 	.word	0x40021c00
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e001      	b.n	8002b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e267      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d075      	beq.n	8002caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bbe:	4b88      	ldr	r3, [pc, #544]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d00c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b85      	ldr	r3, [pc, #532]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d112      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b82      	ldr	r3, [pc, #520]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b7e      	ldr	r3, [pc, #504]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x108>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d157      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e242      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x74>
 8002c06:	4b76      	ldr	r3, [pc, #472]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a75      	ldr	r2, [pc, #468]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x98>
 8002c1e:	4b70      	ldr	r3, [pc, #448]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6f      	ldr	r2, [pc, #444]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c38:	4b69      	ldr	r3, [pc, #420]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a68      	ldr	r2, [pc, #416]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b66      	ldr	r3, [pc, #408]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a65      	ldr	r2, [pc, #404]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fc42 	bl	80014e0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fc3e 	bl	80014e0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e207      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b5b      	ldr	r3, [pc, #364]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xc0>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fc2e 	bl	80014e0 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fc2a 	bl	80014e0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1f3      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b51      	ldr	r3, [pc, #324]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0xe8>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1c7      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4937      	ldr	r1, [pc, #220]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e03a      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b34      	ldr	r3, [pc, #208]	@ (8002de4 <HAL_RCC_OscConfig+0x244>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe fbe3 	bl	80014e0 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7fe fbdf 	bl	80014e0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e1a8      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b28      	ldr	r3, [pc, #160]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4925      	ldr	r1, [pc, #148]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b24      	ldr	r3, [pc, #144]	@ (8002de4 <HAL_RCC_OscConfig+0x244>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fbc2 	bl	80014e0 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d60:	f7fe fbbe 	bl	80014e0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e187      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d036      	beq.n	8002df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <HAL_RCC_OscConfig+0x248>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe fba2 	bl	80014e0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe fb9e 	bl	80014e0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e167      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x200>
 8002dbe:	e01b      	b.n	8002df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc0:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_OscConfig+0x248>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fb8b 	bl	80014e0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	e00e      	b.n	8002dec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dce:	f7fe fb87 	bl	80014e0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d907      	bls.n	8002dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e150      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470000 	.word	0x42470000
 8002de8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b88      	ldr	r3, [pc, #544]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ea      	bne.n	8002dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8097 	beq.w	8002f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b81      	ldr	r3, [pc, #516]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e26:	4b7a      	ldr	r3, [pc, #488]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b77      	ldr	r3, [pc, #476]	@ (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d118      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b74      	ldr	r3, [pc, #464]	@ (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a73      	ldr	r2, [pc, #460]	@ (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fb47 	bl	80014e0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7fe fb43 	bl	80014e0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e10c      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b6a      	ldr	r3, [pc, #424]	@ (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2ea>
 8002e7c:	4b64      	ldr	r3, [pc, #400]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	4a63      	ldr	r2, [pc, #396]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e88:	e01c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x324>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x30c>
 8002e92:	4b5f      	ldr	r3, [pc, #380]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a5e      	ldr	r2, [pc, #376]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x324>
 8002eac:	4b58      	ldr	r3, [pc, #352]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a57      	ldr	r2, [pc, #348]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb8:	4b55      	ldr	r3, [pc, #340]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	4a54      	ldr	r2, [pc, #336]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f023 0304 	bic.w	r3, r3, #4
 8002ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fb08 	bl	80014e0 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fb04 	bl	80014e0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0cb      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	4b49      	ldr	r3, [pc, #292]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0ee      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x334>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef8:	f7fe faf2 	bl	80014e0 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7fe faee 	bl	80014e0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0b5      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f16:	4b3e      	ldr	r3, [pc, #248]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ee      	bne.n	8002f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	4a38      	ldr	r2, [pc, #224]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a1 	beq.w	8003080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3e:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d05c      	beq.n	8003004 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d141      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b31      	ldr	r3, [pc, #196]	@ (8003018 <HAL_RCC_OscConfig+0x478>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe fac2 	bl	80014e0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fabe 	bl	80014e0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e087      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	4b27      	ldr	r3, [pc, #156]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	3b01      	subs	r3, #1
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	491b      	ldr	r1, [pc, #108]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_RCC_OscConfig+0x478>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe fa97 	bl	80014e0 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe fa93 	bl	80014e0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e05c      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x416>
 8002fd4:	e054      	b.n	8003080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <HAL_RCC_OscConfig+0x478>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fa80 	bl	80014e0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fa7c 	bl	80014e0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e045      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x444>
 8003002:	e03d      	b.n	8003080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e038      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
 8003010:	40023800 	.word	0x40023800
 8003014:	40007000 	.word	0x40007000
 8003018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_RCC_OscConfig+0x4ec>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d028      	beq.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d121      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d11a      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800304c:	4013      	ands	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003054:	4293      	cmp	r3, r2
 8003056:	d111      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0cc      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b68      	ldr	r3, [pc, #416]	@ (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d90c      	bls.n	80030cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b65      	ldr	r3, [pc, #404]	@ (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	@ (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a58      	ldr	r2, [pc, #352]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a52      	ldr	r2, [pc, #328]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d119      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314e:	4b3f      	ldr	r3, [pc, #252]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e067      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b37      	ldr	r3, [pc, #220]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4934      	ldr	r1, [pc, #208]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003180:	f7fe f9ae 	bl	80014e0 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7fe f9aa 	bl	80014e0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b2b      	ldr	r3, [pc, #172]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b0:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d20c      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	@ (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4b12      	ldr	r3, [pc, #72]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	@ (8003250 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe f90e 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	080054f0 	.word	0x080054f0
 8003254:	2000000c 	.word	0x2000000c
 8003258:	20000010 	.word	0x20000010

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003260:	b090      	sub	sp, #64	@ 0x40
 8003262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003274:	4b59      	ldr	r3, [pc, #356]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d00d      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x40>
 8003280:	2b08      	cmp	r3, #8
 8003282:	f200 80a1 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x34>
 800328a:	2b04      	cmp	r3, #4
 800328c:	d003      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x3a>
 800328e:	e09b      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b53      	ldr	r3, [pc, #332]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003292:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003294:	e09b      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003296:	4b53      	ldr	r3, [pc, #332]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800329a:	e098      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800329c:	4b4f      	ldr	r3, [pc, #316]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a6:	4b4d      	ldr	r3, [pc, #308]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d028      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b4a      	ldr	r3, [pc, #296]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	2200      	movs	r2, #0
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032c4:	2100      	movs	r1, #0
 80032c6:	4b47      	ldr	r3, [pc, #284]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c8:	fb03 f201 	mul.w	r2, r3, r1
 80032cc:	2300      	movs	r3, #0
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	4a43      	ldr	r2, [pc, #268]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d6:	fba0 1202 	umull	r1, r2, r0, r2
 80032da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032dc:	460a      	mov	r2, r1
 80032de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e2:	4413      	add	r3, r2
 80032e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e8:	2200      	movs	r2, #0
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	61fa      	str	r2, [r7, #28]
 80032ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032f6:	f7fc ffc3 	bl	8000280 <__aeabi_uldivmod>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4613      	mov	r3, r2
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003302:	e053      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003304:	4b35      	ldr	r3, [pc, #212]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	2200      	movs	r2, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	617a      	str	r2, [r7, #20]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003316:	f04f 0b00 	mov.w	fp, #0
 800331a:	4652      	mov	r2, sl
 800331c:	465b      	mov	r3, fp
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332c:	0150      	lsls	r0, r2, #5
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	ebb2 080a 	subs.w	r8, r2, sl
 8003336:	eb63 090b 	sbc.w	r9, r3, fp
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003346:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800334a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800334e:	ebb2 0408 	subs.w	r4, r2, r8
 8003352:	eb63 0509 	sbc.w	r5, r3, r9
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	00eb      	lsls	r3, r5, #3
 8003360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003364:	00e2      	lsls	r2, r4, #3
 8003366:	4614      	mov	r4, r2
 8003368:	461d      	mov	r5, r3
 800336a:	eb14 030a 	adds.w	r3, r4, sl
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	eb45 030b 	adc.w	r3, r5, fp
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003382:	4629      	mov	r1, r5
 8003384:	028b      	lsls	r3, r1, #10
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800338c:	4621      	mov	r1, r4
 800338e:	028a      	lsls	r2, r1, #10
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003396:	2200      	movs	r2, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	60fa      	str	r2, [r7, #12]
 800339c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a0:	f7fc ff6e 	bl	8000280 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3740      	adds	r7, #64	@ 0x40
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	017d7840 	.word	0x017d7840

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	2000000c 	.word	0x2000000c

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08005500 	.word	0x08005500

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffdc 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0b5b      	lsrs	r3, r3, #13
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4903      	ldr	r1, [pc, #12]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	08005500 	.word	0x08005500

08003450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e041      	b.n	80034e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fe2a 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f000 fbb2 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e046      	b.n	8003596 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a23      	ldr	r2, [pc, #140]	@ (80035a4 <HAL_TIM_Base_Start+0xb4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d022      	beq.n	8003560 <HAL_TIM_Base_Start+0x70>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003522:	d01d      	beq.n	8003560 <HAL_TIM_Base_Start+0x70>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1f      	ldr	r2, [pc, #124]	@ (80035a8 <HAL_TIM_Base_Start+0xb8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d018      	beq.n	8003560 <HAL_TIM_Base_Start+0x70>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <HAL_TIM_Base_Start+0xbc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <HAL_TIM_Base_Start+0x70>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <HAL_TIM_Base_Start+0xc0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00e      	beq.n	8003560 <HAL_TIM_Base_Start+0x70>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_TIM_Base_Start+0xc4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_TIM_Base_Start+0x70>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <HAL_TIM_Base_Start+0xc8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_TIM_Base_Start+0x70>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a18      	ldr	r2, [pc, #96]	@ (80035bc <HAL_TIM_Base_Start+0xcc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d111      	bne.n	8003584 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d010      	beq.n	8003594 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	e007      	b.n	8003594 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800
 80035b0:	40000c00 	.word	0x40000c00
 80035b4:	40010400 	.word	0x40010400
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40001800 	.word	0x40001800

080035c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e041      	b.n	8003656 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f839 	bl	800365e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f000 fafa 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x24>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e022      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d109      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x3e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e015      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d109      	bne.n	80036cc <HAL_TIM_PWM_Start+0x58>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e008      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07c      	b.n	80037e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0x82>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0x92>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fd56 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2d      	ldr	r2, [pc, #180]	@ (80037e8 <HAL_TIM_PWM_Start+0x174>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_PWM_Start+0xcc>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2c      	ldr	r2, [pc, #176]	@ (80037ec <HAL_TIM_PWM_Start+0x178>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_TIM_PWM_Start+0xd0>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_TIM_PWM_Start+0xd2>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a22      	ldr	r2, [pc, #136]	@ (80037e8 <HAL_TIM_PWM_Start+0x174>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_TIM_PWM_Start+0x136>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376c:	d01d      	beq.n	80037aa <HAL_TIM_PWM_Start+0x136>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <HAL_TIM_PWM_Start+0x17c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_TIM_PWM_Start+0x136>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1d      	ldr	r2, [pc, #116]	@ (80037f4 <HAL_TIM_PWM_Start+0x180>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_TIM_PWM_Start+0x136>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <HAL_TIM_PWM_Start+0x184>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_TIM_PWM_Start+0x136>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_TIM_PWM_Start+0x178>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_TIM_PWM_Start+0x136>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a18      	ldr	r2, [pc, #96]	@ (80037fc <HAL_TIM_PWM_Start+0x188>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_TIM_PWM_Start+0x136>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a16      	ldr	r2, [pc, #88]	@ (8003800 <HAL_TIM_PWM_Start+0x18c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d111      	bne.n	80037ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b06      	cmp	r3, #6
 80037ba:	d010      	beq.n	80037de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037cc:	e007      	b.n	80037de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40010400 	.word	0x40010400
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40014000 	.word	0x40014000
 8003800:	40001800 	.word	0x40001800

08003804 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fcde 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2e      	ldr	r2, [pc, #184]	@ (80038dc <HAL_TIM_PWM_Stop+0xd8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_TIM_PWM_Stop+0x2c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2d      	ldr	r2, [pc, #180]	@ (80038e0 <HAL_TIM_PWM_Stop+0xdc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_TIM_PWM_Stop+0x30>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_TIM_PWM_Stop+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_TIM_PWM_Stop+0x66>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	f240 4344 	movw	r3, #1092	@ 0x444
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d107      	bne.n	800386a <HAL_TIM_PWM_Stop+0x66>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_TIM_PWM_Stop+0x96>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1a      	ldr	r2, [r3, #32]
 8003880:	f240 4344 	movw	r3, #1092	@ 0x444
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_TIM_PWM_Stop+0x96>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_TIM_PWM_Stop+0xa6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038a8:	e013      	b.n	80038d2 <HAL_TIM_PWM_Stop+0xce>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_PWM_Stop+0xb6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b8:	e00b      	b.n	80038d2 <HAL_TIM_PWM_Stop+0xce>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Stop+0xc6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c8:	e003      	b.n	80038d2 <HAL_TIM_PWM_Stop+0xce>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40010400 	.word	0x40010400

080038e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fe:	2302      	movs	r3, #2
 8003900:	e0ae      	b.n	8003a60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	f200 809f 	bhi.w	8003a50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003912:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	0800394d 	.word	0x0800394d
 800391c:	08003a51 	.word	0x08003a51
 8003920:	08003a51 	.word	0x08003a51
 8003924:	08003a51 	.word	0x08003a51
 8003928:	0800398d 	.word	0x0800398d
 800392c:	08003a51 	.word	0x08003a51
 8003930:	08003a51 	.word	0x08003a51
 8003934:	08003a51 	.word	0x08003a51
 8003938:	080039cf 	.word	0x080039cf
 800393c:	08003a51 	.word	0x08003a51
 8003940:	08003a51 	.word	0x08003a51
 8003944:	08003a51 	.word	0x08003a51
 8003948:	08003a0f 	.word	0x08003a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f9f6 	bl	8003d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0208 	orr.w	r2, r2, #8
 8003966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0204 	bic.w	r2, r2, #4
 8003976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6999      	ldr	r1, [r3, #24]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	619a      	str	r2, [r3, #24]
      break;
 800398a:	e064      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fa46 	bl	8003e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6999      	ldr	r1, [r3, #24]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	021a      	lsls	r2, r3, #8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	619a      	str	r2, [r3, #24]
      break;
 80039cc:	e043      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fa9b 	bl	8003f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0208 	orr.w	r2, r2, #8
 80039e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0204 	bic.w	r2, r2, #4
 80039f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69d9      	ldr	r1, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	61da      	str	r2, [r3, #28]
      break;
 8003a0c:	e023      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 faef 	bl	8003ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69d9      	ldr	r1, [r3, #28]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	61da      	str	r2, [r3, #28]
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
      break;
 8003a54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIM_ConfigClockSource+0x1c>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e0b4      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x186>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003abc:	d03e      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0xd4>
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac2:	f200 8087 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	f000 8086 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x172>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	d87f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b70      	cmp	r3, #112	@ 0x70
 8003ad6:	d01a      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0xa6>
 8003ad8:	2b70      	cmp	r3, #112	@ 0x70
 8003ada:	d87b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b60      	cmp	r3, #96	@ 0x60
 8003ade:	d050      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ae0:	2b60      	cmp	r3, #96	@ 0x60
 8003ae2:	d877      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b50      	cmp	r3, #80	@ 0x50
 8003ae6:	d03c      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ae8:	2b50      	cmp	r3, #80	@ 0x50
 8003aea:	d873      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	d058      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d86f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b30      	cmp	r3, #48	@ 0x30
 8003af6:	d064      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	2b30      	cmp	r3, #48	@ 0x30
 8003afa:	d86b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d060      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d867      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d05c      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d05a      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	e062      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b1e:	f000 fb3b 	bl	8004198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
      break;
 8003b3a:	e04f      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	f000 fb24 	bl	8004198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b5e:	609a      	str	r2, [r3, #8]
      break;
 8003b60:	e03c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 fa98 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2150      	movs	r1, #80	@ 0x50
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 faf1 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003b80:	e02c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 fab7 	bl	8004102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2160      	movs	r1, #96	@ 0x60
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fae1 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e01c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fa78 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2140      	movs	r1, #64	@ 0x40
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fad1 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e00c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f000 fac8 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bd2:	e003      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a43      	ldr	r2, [pc, #268]	@ (8003d18 <TIM_Base_SetConfig+0x120>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d013      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c16:	d00f      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a40      	ldr	r2, [pc, #256]	@ (8003d1c <TIM_Base_SetConfig+0x124>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3f      	ldr	r2, [pc, #252]	@ (8003d20 <TIM_Base_SetConfig+0x128>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d24 <TIM_Base_SetConfig+0x12c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3d      	ldr	r2, [pc, #244]	@ (8003d28 <TIM_Base_SetConfig+0x130>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <TIM_Base_SetConfig+0x120>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d02b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c58:	d027      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d1c <TIM_Base_SetConfig+0x124>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d023      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2e      	ldr	r2, [pc, #184]	@ (8003d20 <TIM_Base_SetConfig+0x128>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01f      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d24 <TIM_Base_SetConfig+0x12c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2c      	ldr	r2, [pc, #176]	@ (8003d28 <TIM_Base_SetConfig+0x130>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d017      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d2c <TIM_Base_SetConfig+0x134>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <TIM_Base_SetConfig+0x138>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00f      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	@ (8003d34 <TIM_Base_SetConfig+0x13c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a28      	ldr	r2, [pc, #160]	@ (8003d38 <TIM_Base_SetConfig+0x140>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <TIM_Base_SetConfig+0x144>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d003      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <TIM_Base_SetConfig+0x148>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d108      	bne.n	8003cbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003d18 <TIM_Base_SetConfig+0x120>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_Base_SetConfig+0xf2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a10      	ldr	r2, [pc, #64]	@ (8003d28 <TIM_Base_SetConfig+0x130>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d103      	bne.n	8003cf2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800
 8003d38:	40001800 	.word	0x40001800
 8003d3c:	40001c00 	.word	0x40001c00
 8003d40:	40002000 	.word	0x40002000

08003d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f023 0201 	bic.w	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f023 0302 	bic.w	r3, r3, #2
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a20      	ldr	r2, [pc, #128]	@ (8003e1c <TIM_OC1_SetConfig+0xd8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC1_SetConfig+0x64>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <TIM_OC1_SetConfig+0xdc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10c      	bne.n	8003dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0308 	bic.w	r3, r3, #8
 8003dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a15      	ldr	r2, [pc, #84]	@ (8003e1c <TIM_OC1_SetConfig+0xd8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC1_SetConfig+0x8e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <TIM_OC1_SetConfig+0xdc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d111      	bne.n	8003df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40010400 	.word	0x40010400

08003e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a22      	ldr	r2, [pc, #136]	@ (8003f08 <TIM_OC2_SetConfig+0xe4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC2_SetConfig+0x68>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a21      	ldr	r2, [pc, #132]	@ (8003f0c <TIM_OC2_SetConfig+0xe8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10d      	bne.n	8003ea8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <TIM_OC2_SetConfig+0xe4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC2_SetConfig+0x94>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	@ (8003f0c <TIM_OC2_SetConfig+0xe8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d113      	bne.n	8003ee0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010400 	.word	0x40010400

08003f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <TIM_OC3_SetConfig+0xe0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC3_SetConfig+0x66>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a20      	ldr	r2, [pc, #128]	@ (8003ff4 <TIM_OC3_SetConfig+0xe4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10d      	bne.n	8003f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a16      	ldr	r2, [pc, #88]	@ (8003ff0 <TIM_OC3_SetConfig+0xe0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC3_SetConfig+0x92>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <TIM_OC3_SetConfig+0xe4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	bf00      	nop
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a12      	ldr	r2, [pc, #72]	@ (800409c <TIM_OC4_SetConfig+0xa4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC4_SetConfig+0x68>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <TIM_OC4_SetConfig+0xa8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d109      	bne.n	8004074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800413e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 0307 	orr.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2201      	movs	r2, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1a      	ldr	r2, [r3, #32]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e05a      	b.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a21      	ldr	r2, [pc, #132]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d01d      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1b      	ldr	r2, [pc, #108]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1a      	ldr	r2, [pc, #104]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a18      	ldr	r2, [pc, #96]	@ (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a17      	ldr	r2, [pc, #92]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a15      	ldr	r2, [pc, #84]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10c      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40001800 	.word	0x40001800

0800431c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e042      	b.n	80043b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fc ff72 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2224      	movs	r2, #36	@ 0x24
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800435e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f973 	bl	800464c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	@ 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d175      	bne.n	80044c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_UART_Transmit+0x2c>
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e06e      	b.n	80044ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2221      	movs	r2, #33	@ 0x21
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fa:	f7fd f871 	bl	80014e0 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004414:	d108      	bne.n	8004428 <HAL_UART_Transmit+0x6c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e003      	b.n	8004430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004430:	e02e      	b.n	8004490 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f848 	bl	80044d2 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e03a      	b.n	80044ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3302      	adds	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e007      	b.n	8004482 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1cb      	bne.n	8004432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2140      	movs	r1, #64	@ 0x40
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f814 	bl	80044d2 <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e006      	b.n	80044ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	e03b      	b.n	800455c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d037      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ec:	f7fc fff8 	bl	80014e0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	6a3a      	ldr	r2, [r7, #32]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d302      	bcc.n	8004502 <UART_WaitOnFlagUntilTimeout+0x30>
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e03a      	b.n	800457c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d023      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b80      	cmp	r3, #128	@ 0x80
 8004518:	d020      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x8a>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b40      	cmp	r3, #64	@ 0x40
 800451e:	d01d      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d116      	bne.n	800455c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f81d 	bl	8004584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2208      	movs	r2, #8
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e00f      	b.n	800457c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	429a      	cmp	r2, r3
 8004578:	d0b4      	beq.n	80044e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b095      	sub	sp, #84	@ 0x54
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3314      	adds	r3, #20
 80045de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d119      	bne.n	8004630 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	60bb      	str	r3, [r7, #8]
   return(result);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	647b      	str	r3, [r7, #68]	@ 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800461c:	61ba      	str	r2, [r7, #24]
 800461e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6979      	ldr	r1, [r7, #20]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	613b      	str	r3, [r7, #16]
   return(result);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800463e:	bf00      	nop
 8004640:	3754      	adds	r7, #84	@ 0x54
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b0c0      	sub	sp, #256	@ 0x100
 8004652:	af00      	add	r7, sp, #0
 8004654:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004668:	68d9      	ldr	r1, [r3, #12]
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	ea40 0301 	orr.w	r3, r0, r1
 8004674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	431a      	orrs	r2, r3
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046a4:	f021 010c 	bic.w	r1, r1, #12
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046b2:	430b      	orrs	r3, r1
 80046b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c6:	6999      	ldr	r1, [r3, #24]
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	ea40 0301 	orr.w	r3, r0, r1
 80046d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b8f      	ldr	r3, [pc, #572]	@ (8004918 <UART_SetConfig+0x2cc>)
 80046dc:	429a      	cmp	r2, r3
 80046de:	d005      	beq.n	80046ec <UART_SetConfig+0xa0>
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b8d      	ldr	r3, [pc, #564]	@ (800491c <UART_SetConfig+0x2d0>)
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d104      	bne.n	80046f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046ec:	f7fe fe9c 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 80046f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046f4:	e003      	b.n	80046fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046f6:	f7fe fe83 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80046fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004708:	f040 810c 	bne.w	8004924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800470c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004710:	2200      	movs	r2, #0
 8004712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004716:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800471a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800471e:	4622      	mov	r2, r4
 8004720:	462b      	mov	r3, r5
 8004722:	1891      	adds	r1, r2, r2
 8004724:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004726:	415b      	adcs	r3, r3
 8004728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800472a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800472e:	4621      	mov	r1, r4
 8004730:	eb12 0801 	adds.w	r8, r2, r1
 8004734:	4629      	mov	r1, r5
 8004736:	eb43 0901 	adc.w	r9, r3, r1
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800474a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474e:	4690      	mov	r8, r2
 8004750:	4699      	mov	r9, r3
 8004752:	4623      	mov	r3, r4
 8004754:	eb18 0303 	adds.w	r3, r8, r3
 8004758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800475c:	462b      	mov	r3, r5
 800475e:	eb49 0303 	adc.w	r3, r9, r3
 8004762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004772:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800477a:	460b      	mov	r3, r1
 800477c:	18db      	adds	r3, r3, r3
 800477e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004780:	4613      	mov	r3, r2
 8004782:	eb42 0303 	adc.w	r3, r2, r3
 8004786:	657b      	str	r3, [r7, #84]	@ 0x54
 8004788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800478c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004790:	f7fb fd76 	bl	8000280 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4b61      	ldr	r3, [pc, #388]	@ (8004920 <UART_SetConfig+0x2d4>)
 800479a:	fba3 2302 	umull	r2, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	011c      	lsls	r4, r3, #4
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047bc:	415b      	adcs	r3, r3
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047c4:	4641      	mov	r1, r8
 80047c6:	eb12 0a01 	adds.w	sl, r2, r1
 80047ca:	4649      	mov	r1, r9
 80047cc:	eb43 0b01 	adc.w	fp, r3, r1
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e4:	4692      	mov	sl, r2
 80047e6:	469b      	mov	fp, r3
 80047e8:	4643      	mov	r3, r8
 80047ea:	eb1a 0303 	adds.w	r3, sl, r3
 80047ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047f2:	464b      	mov	r3, r9
 80047f4:	eb4b 0303 	adc.w	r3, fp, r3
 80047f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004808:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800480c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004810:	460b      	mov	r3, r1
 8004812:	18db      	adds	r3, r3, r3
 8004814:	643b      	str	r3, [r7, #64]	@ 0x40
 8004816:	4613      	mov	r3, r2
 8004818:	eb42 0303 	adc.w	r3, r2, r3
 800481c:	647b      	str	r3, [r7, #68]	@ 0x44
 800481e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004826:	f7fb fd2b 	bl	8000280 <__aeabi_uldivmod>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4611      	mov	r1, r2
 8004830:	4b3b      	ldr	r3, [pc, #236]	@ (8004920 <UART_SetConfig+0x2d4>)
 8004832:	fba3 2301 	umull	r2, r3, r3, r1
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2264      	movs	r2, #100	@ 0x64
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	1acb      	subs	r3, r1, r3
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004846:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <UART_SetConfig+0x2d4>)
 8004848:	fba3 2302 	umull	r2, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004854:	441c      	add	r4, r3
 8004856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004860:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	1891      	adds	r1, r2, r2
 800486e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004870:	415b      	adcs	r3, r3
 8004872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004878:	4641      	mov	r1, r8
 800487a:	1851      	adds	r1, r2, r1
 800487c:	6339      	str	r1, [r7, #48]	@ 0x30
 800487e:	4649      	mov	r1, r9
 8004880:	414b      	adcs	r3, r1
 8004882:	637b      	str	r3, [r7, #52]	@ 0x34
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004890:	4659      	mov	r1, fp
 8004892:	00cb      	lsls	r3, r1, #3
 8004894:	4651      	mov	r1, sl
 8004896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489a:	4651      	mov	r1, sl
 800489c:	00ca      	lsls	r2, r1, #3
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	4642      	mov	r2, r8
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048ac:	464b      	mov	r3, r9
 80048ae:	460a      	mov	r2, r1
 80048b0:	eb42 0303 	adc.w	r3, r2, r3
 80048b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048cc:	460b      	mov	r3, r1
 80048ce:	18db      	adds	r3, r3, r3
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d2:	4613      	mov	r3, r2
 80048d4:	eb42 0303 	adc.w	r3, r2, r3
 80048d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048e2:	f7fb fccd 	bl	8000280 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <UART_SetConfig+0x2d4>)
 80048ec:	fba3 1302 	umull	r1, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	2164      	movs	r1, #100	@ 0x64
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	3332      	adds	r3, #50	@ 0x32
 80048fe:	4a08      	ldr	r2, [pc, #32]	@ (8004920 <UART_SetConfig+0x2d4>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	f003 0207 	and.w	r2, r3, #7
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4422      	add	r2, r4
 8004912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004914:	e106      	b.n	8004b24 <UART_SetConfig+0x4d8>
 8004916:	bf00      	nop
 8004918:	40011000 	.word	0x40011000
 800491c:	40011400 	.word	0x40011400
 8004920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004928:	2200      	movs	r2, #0
 800492a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800492e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004936:	4642      	mov	r2, r8
 8004938:	464b      	mov	r3, r9
 800493a:	1891      	adds	r1, r2, r2
 800493c:	6239      	str	r1, [r7, #32]
 800493e:	415b      	adcs	r3, r3
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
 8004942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004946:	4641      	mov	r1, r8
 8004948:	1854      	adds	r4, r2, r1
 800494a:	4649      	mov	r1, r9
 800494c:	eb43 0501 	adc.w	r5, r3, r1
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	00eb      	lsls	r3, r5, #3
 800495a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495e:	00e2      	lsls	r2, r4, #3
 8004960:	4614      	mov	r4, r2
 8004962:	461d      	mov	r5, r3
 8004964:	4643      	mov	r3, r8
 8004966:	18e3      	adds	r3, r4, r3
 8004968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800496c:	464b      	mov	r3, r9
 800496e:	eb45 0303 	adc.w	r3, r5, r3
 8004972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004982:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004992:	4629      	mov	r1, r5
 8004994:	008b      	lsls	r3, r1, #2
 8004996:	4621      	mov	r1, r4
 8004998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499c:	4621      	mov	r1, r4
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049a4:	f7fb fc6c 	bl	8000280 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4b60      	ldr	r3, [pc, #384]	@ (8004b30 <UART_SetConfig+0x4e4>)
 80049ae:	fba3 2302 	umull	r2, r3, r3, r2
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	011c      	lsls	r4, r3, #4
 80049b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	1891      	adds	r1, r2, r2
 80049ce:	61b9      	str	r1, [r7, #24]
 80049d0:	415b      	adcs	r3, r3
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d8:	4641      	mov	r1, r8
 80049da:	1851      	adds	r1, r2, r1
 80049dc:	6139      	str	r1, [r7, #16]
 80049de:	4649      	mov	r1, r9
 80049e0:	414b      	adcs	r3, r1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f0:	4659      	mov	r1, fp
 80049f2:	00cb      	lsls	r3, r1, #3
 80049f4:	4651      	mov	r1, sl
 80049f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fa:	4651      	mov	r1, sl
 80049fc:	00ca      	lsls	r2, r1, #3
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	4642      	mov	r2, r8
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	460a      	mov	r2, r1
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a30:	4649      	mov	r1, r9
 8004a32:	008b      	lsls	r3, r1, #2
 8004a34:	4641      	mov	r1, r8
 8004a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3a:	4641      	mov	r1, r8
 8004a3c:	008a      	lsls	r2, r1, #2
 8004a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a42:	f7fb fc1d 	bl	8000280 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4b38      	ldr	r3, [pc, #224]	@ (8004b30 <UART_SetConfig+0x4e4>)
 8004a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	2264      	movs	r2, #100	@ 0x64
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	1acb      	subs	r3, r1, r3
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	3332      	adds	r3, #50	@ 0x32
 8004a60:	4a33      	ldr	r2, [pc, #204]	@ (8004b30 <UART_SetConfig+0x4e4>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a6c:	441c      	add	r4, r3
 8004a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a72:	2200      	movs	r2, #0
 8004a74:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a76:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	1891      	adds	r1, r2, r2
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	415b      	adcs	r3, r3
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	1851      	adds	r1, r2, r1
 8004a90:	6039      	str	r1, [r7, #0]
 8004a92:	4649      	mov	r1, r9
 8004a94:	414b      	adcs	r3, r1
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	00cb      	lsls	r3, r1, #3
 8004aa8:	4651      	mov	r1, sl
 8004aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aae:	4651      	mov	r1, sl
 8004ab0:	00ca      	lsls	r2, r1, #3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4642      	mov	r2, r8
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004abe:	464b      	mov	r3, r9
 8004ac0:	460a      	mov	r2, r1
 8004ac2:	eb42 0303 	adc.w	r3, r2, r3
 8004ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ad2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	008b      	lsls	r3, r1, #2
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aea:	4641      	mov	r1, r8
 8004aec:	008a      	lsls	r2, r1, #2
 8004aee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004af2:	f7fb fbc5 	bl	8000280 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <UART_SetConfig+0x4e4>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	@ 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	3332      	adds	r3, #50	@ 0x32
 8004b0e:	4a08      	ldr	r2, [pc, #32]	@ (8004b30 <UART_SetConfig+0x4e4>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 020f 	and.w	r2, r3, #15
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4422      	add	r2, r4
 8004b22:	609a      	str	r2, [r3, #8]
}
 8004b24:	bf00      	nop
 8004b26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b30:	51eb851f 	.word	0x51eb851f

08004b34 <sniprintf>:
 8004b34:	b40c      	push	{r2, r3}
 8004b36:	b530      	push	{r4, r5, lr}
 8004b38:	4b18      	ldr	r3, [pc, #96]	@ (8004b9c <sniprintf+0x68>)
 8004b3a:	1e0c      	subs	r4, r1, #0
 8004b3c:	681d      	ldr	r5, [r3, #0]
 8004b3e:	b09d      	sub	sp, #116	@ 0x74
 8004b40:	da08      	bge.n	8004b54 <sniprintf+0x20>
 8004b42:	238b      	movs	r3, #139	@ 0x8b
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4a:	b01d      	add	sp, #116	@ 0x74
 8004b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b50:	b002      	add	sp, #8
 8004b52:	4770      	bx	lr
 8004b54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004b62:	bf14      	ite	ne
 8004b64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b68:	4623      	moveq	r3, r4
 8004b6a:	9304      	str	r3, [sp, #16]
 8004b6c:	9307      	str	r3, [sp, #28]
 8004b6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b72:	9002      	str	r0, [sp, #8]
 8004b74:	9006      	str	r0, [sp, #24]
 8004b76:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004b7c:	ab21      	add	r3, sp, #132	@ 0x84
 8004b7e:	a902      	add	r1, sp, #8
 8004b80:	4628      	mov	r0, r5
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	f000 f994 	bl	8004eb0 <_svfiprintf_r>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	bfbc      	itt	lt
 8004b8c:	238b      	movlt	r3, #139	@ 0x8b
 8004b8e:	602b      	strlt	r3, [r5, #0]
 8004b90:	2c00      	cmp	r4, #0
 8004b92:	d0da      	beq.n	8004b4a <sniprintf+0x16>
 8004b94:	9b02      	ldr	r3, [sp, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e7d6      	b.n	8004b4a <sniprintf+0x16>
 8004b9c:	20000018 	.word	0x20000018

08004ba0 <memset>:
 8004ba0:	4402      	add	r2, r0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d100      	bne.n	8004baa <memset+0xa>
 8004ba8:	4770      	bx	lr
 8004baa:	f803 1b01 	strb.w	r1, [r3], #1
 8004bae:	e7f9      	b.n	8004ba4 <memset+0x4>

08004bb0 <__errno>:
 8004bb0:	4b01      	ldr	r3, [pc, #4]	@ (8004bb8 <__errno+0x8>)
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000018 	.word	0x20000018

08004bbc <__libc_init_array>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004bf4 <__libc_init_array+0x38>)
 8004bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8004bf8 <__libc_init_array+0x3c>)
 8004bc2:	1b64      	subs	r4, r4, r5
 8004bc4:	10a4      	asrs	r4, r4, #2
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	42a6      	cmp	r6, r4
 8004bca:	d109      	bne.n	8004be0 <__libc_init_array+0x24>
 8004bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8004bfc <__libc_init_array+0x40>)
 8004bce:	4c0c      	ldr	r4, [pc, #48]	@ (8004c00 <__libc_init_array+0x44>)
 8004bd0:	f000 fc64 	bl	800549c <_init>
 8004bd4:	1b64      	subs	r4, r4, r5
 8004bd6:	10a4      	asrs	r4, r4, #2
 8004bd8:	2600      	movs	r6, #0
 8004bda:	42a6      	cmp	r6, r4
 8004bdc:	d105      	bne.n	8004bea <__libc_init_array+0x2e>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be4:	4798      	blx	r3
 8004be6:	3601      	adds	r6, #1
 8004be8:	e7ee      	b.n	8004bc8 <__libc_init_array+0xc>
 8004bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bee:	4798      	blx	r3
 8004bf0:	3601      	adds	r6, #1
 8004bf2:	e7f2      	b.n	8004bda <__libc_init_array+0x1e>
 8004bf4:	0800554c 	.word	0x0800554c
 8004bf8:	0800554c 	.word	0x0800554c
 8004bfc:	0800554c 	.word	0x0800554c
 8004c00:	08005550 	.word	0x08005550

08004c04 <__retarget_lock_acquire_recursive>:
 8004c04:	4770      	bx	lr

08004c06 <__retarget_lock_release_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <_free_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	d041      	beq.n	8004c94 <_free_r+0x8c>
 8004c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c14:	1f0c      	subs	r4, r1, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfb8      	it	lt
 8004c1a:	18e4      	addlt	r4, r4, r3
 8004c1c:	f000 f8e0 	bl	8004de0 <__malloc_lock>
 8004c20:	4a1d      	ldr	r2, [pc, #116]	@ (8004c98 <_free_r+0x90>)
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	b933      	cbnz	r3, 8004c34 <_free_r+0x2c>
 8004c26:	6063      	str	r3, [r4, #4]
 8004c28:	6014      	str	r4, [r2, #0]
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c30:	f000 b8dc 	b.w	8004dec <__malloc_unlock>
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d908      	bls.n	8004c4a <_free_r+0x42>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	1821      	adds	r1, r4, r0
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	bf01      	itttt	eq
 8004c40:	6819      	ldreq	r1, [r3, #0]
 8004c42:	685b      	ldreq	r3, [r3, #4]
 8004c44:	1809      	addeq	r1, r1, r0
 8004c46:	6021      	streq	r1, [r4, #0]
 8004c48:	e7ed      	b.n	8004c26 <_free_r+0x1e>
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	b10b      	cbz	r3, 8004c54 <_free_r+0x4c>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d9fa      	bls.n	8004c4a <_free_r+0x42>
 8004c54:	6811      	ldr	r1, [r2, #0]
 8004c56:	1850      	adds	r0, r2, r1
 8004c58:	42a0      	cmp	r0, r4
 8004c5a:	d10b      	bne.n	8004c74 <_free_r+0x6c>
 8004c5c:	6820      	ldr	r0, [r4, #0]
 8004c5e:	4401      	add	r1, r0
 8004c60:	1850      	adds	r0, r2, r1
 8004c62:	4283      	cmp	r3, r0
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	d1e0      	bne.n	8004c2a <_free_r+0x22>
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	6053      	str	r3, [r2, #4]
 8004c6e:	4408      	add	r0, r1
 8004c70:	6010      	str	r0, [r2, #0]
 8004c72:	e7da      	b.n	8004c2a <_free_r+0x22>
 8004c74:	d902      	bls.n	8004c7c <_free_r+0x74>
 8004c76:	230c      	movs	r3, #12
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	e7d6      	b.n	8004c2a <_free_r+0x22>
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	1821      	adds	r1, r4, r0
 8004c80:	428b      	cmp	r3, r1
 8004c82:	bf04      	itt	eq
 8004c84:	6819      	ldreq	r1, [r3, #0]
 8004c86:	685b      	ldreq	r3, [r3, #4]
 8004c88:	6063      	str	r3, [r4, #4]
 8004c8a:	bf04      	itt	eq
 8004c8c:	1809      	addeq	r1, r1, r0
 8004c8e:	6021      	streq	r1, [r4, #0]
 8004c90:	6054      	str	r4, [r2, #4]
 8004c92:	e7ca      	b.n	8004c2a <_free_r+0x22>
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	20000460 	.word	0x20000460

08004c9c <sbrk_aligned>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8004cdc <sbrk_aligned+0x40>)
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	6831      	ldr	r1, [r6, #0]
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b911      	cbnz	r1, 8004cae <sbrk_aligned+0x12>
 8004ca8:	f000 fba4 	bl	80053f4 <_sbrk_r>
 8004cac:	6030      	str	r0, [r6, #0]
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 fb9f 	bl	80053f4 <_sbrk_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d103      	bne.n	8004cc2 <sbrk_aligned+0x26>
 8004cba:	f04f 34ff 	mov.w	r4, #4294967295
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	1cc4      	adds	r4, r0, #3
 8004cc4:	f024 0403 	bic.w	r4, r4, #3
 8004cc8:	42a0      	cmp	r0, r4
 8004cca:	d0f8      	beq.n	8004cbe <sbrk_aligned+0x22>
 8004ccc:	1a21      	subs	r1, r4, r0
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 fb90 	bl	80053f4 <_sbrk_r>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d1f2      	bne.n	8004cbe <sbrk_aligned+0x22>
 8004cd8:	e7ef      	b.n	8004cba <sbrk_aligned+0x1e>
 8004cda:	bf00      	nop
 8004cdc:	2000045c 	.word	0x2000045c

08004ce0 <_malloc_r>:
 8004ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	1ccd      	adds	r5, r1, #3
 8004ce6:	f025 0503 	bic.w	r5, r5, #3
 8004cea:	3508      	adds	r5, #8
 8004cec:	2d0c      	cmp	r5, #12
 8004cee:	bf38      	it	cc
 8004cf0:	250c      	movcc	r5, #12
 8004cf2:	2d00      	cmp	r5, #0
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	db01      	blt.n	8004cfc <_malloc_r+0x1c>
 8004cf8:	42a9      	cmp	r1, r5
 8004cfa:	d904      	bls.n	8004d06 <_malloc_r+0x26>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	6033      	str	r3, [r6, #0]
 8004d00:	2000      	movs	r0, #0
 8004d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ddc <_malloc_r+0xfc>
 8004d0a:	f000 f869 	bl	8004de0 <__malloc_lock>
 8004d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d12:	461c      	mov	r4, r3
 8004d14:	bb44      	cbnz	r4, 8004d68 <_malloc_r+0x88>
 8004d16:	4629      	mov	r1, r5
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff ffbf 	bl	8004c9c <sbrk_aligned>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	4604      	mov	r4, r0
 8004d22:	d158      	bne.n	8004dd6 <_malloc_r+0xf6>
 8004d24:	f8d8 4000 	ldr.w	r4, [r8]
 8004d28:	4627      	mov	r7, r4
 8004d2a:	2f00      	cmp	r7, #0
 8004d2c:	d143      	bne.n	8004db6 <_malloc_r+0xd6>
 8004d2e:	2c00      	cmp	r4, #0
 8004d30:	d04b      	beq.n	8004dca <_malloc_r+0xea>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	4639      	mov	r1, r7
 8004d36:	4630      	mov	r0, r6
 8004d38:	eb04 0903 	add.w	r9, r4, r3
 8004d3c:	f000 fb5a 	bl	80053f4 <_sbrk_r>
 8004d40:	4581      	cmp	r9, r0
 8004d42:	d142      	bne.n	8004dca <_malloc_r+0xea>
 8004d44:	6821      	ldr	r1, [r4, #0]
 8004d46:	1a6d      	subs	r5, r5, r1
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f7ff ffa6 	bl	8004c9c <sbrk_aligned>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d03a      	beq.n	8004dca <_malloc_r+0xea>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	442b      	add	r3, r5
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	bb62      	cbnz	r2, 8004dbc <_malloc_r+0xdc>
 8004d62:	f8c8 7000 	str.w	r7, [r8]
 8004d66:	e00f      	b.n	8004d88 <_malloc_r+0xa8>
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	1b52      	subs	r2, r2, r5
 8004d6c:	d420      	bmi.n	8004db0 <_malloc_r+0xd0>
 8004d6e:	2a0b      	cmp	r2, #11
 8004d70:	d917      	bls.n	8004da2 <_malloc_r+0xc2>
 8004d72:	1961      	adds	r1, r4, r5
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	6025      	str	r5, [r4, #0]
 8004d78:	bf18      	it	ne
 8004d7a:	6059      	strne	r1, [r3, #4]
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	bf08      	it	eq
 8004d80:	f8c8 1000 	streq.w	r1, [r8]
 8004d84:	5162      	str	r2, [r4, r5]
 8004d86:	604b      	str	r3, [r1, #4]
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f000 f82f 	bl	8004dec <__malloc_unlock>
 8004d8e:	f104 000b 	add.w	r0, r4, #11
 8004d92:	1d23      	adds	r3, r4, #4
 8004d94:	f020 0007 	bic.w	r0, r0, #7
 8004d98:	1ac2      	subs	r2, r0, r3
 8004d9a:	bf1c      	itt	ne
 8004d9c:	1a1b      	subne	r3, r3, r0
 8004d9e:	50a3      	strne	r3, [r4, r2]
 8004da0:	e7af      	b.n	8004d02 <_malloc_r+0x22>
 8004da2:	6862      	ldr	r2, [r4, #4]
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	bf0c      	ite	eq
 8004da8:	f8c8 2000 	streq.w	r2, [r8]
 8004dac:	605a      	strne	r2, [r3, #4]
 8004dae:	e7eb      	b.n	8004d88 <_malloc_r+0xa8>
 8004db0:	4623      	mov	r3, r4
 8004db2:	6864      	ldr	r4, [r4, #4]
 8004db4:	e7ae      	b.n	8004d14 <_malloc_r+0x34>
 8004db6:	463c      	mov	r4, r7
 8004db8:	687f      	ldr	r7, [r7, #4]
 8004dba:	e7b6      	b.n	8004d2a <_malloc_r+0x4a>
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d1fb      	bne.n	8004dbc <_malloc_r+0xdc>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6053      	str	r3, [r2, #4]
 8004dc8:	e7de      	b.n	8004d88 <_malloc_r+0xa8>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	6033      	str	r3, [r6, #0]
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 f80c 	bl	8004dec <__malloc_unlock>
 8004dd4:	e794      	b.n	8004d00 <_malloc_r+0x20>
 8004dd6:	6005      	str	r5, [r0, #0]
 8004dd8:	e7d6      	b.n	8004d88 <_malloc_r+0xa8>
 8004dda:	bf00      	nop
 8004ddc:	20000460 	.word	0x20000460

08004de0 <__malloc_lock>:
 8004de0:	4801      	ldr	r0, [pc, #4]	@ (8004de8 <__malloc_lock+0x8>)
 8004de2:	f7ff bf0f 	b.w	8004c04 <__retarget_lock_acquire_recursive>
 8004de6:	bf00      	nop
 8004de8:	20000458 	.word	0x20000458

08004dec <__malloc_unlock>:
 8004dec:	4801      	ldr	r0, [pc, #4]	@ (8004df4 <__malloc_unlock+0x8>)
 8004dee:	f7ff bf0a 	b.w	8004c06 <__retarget_lock_release_recursive>
 8004df2:	bf00      	nop
 8004df4:	20000458 	.word	0x20000458

08004df8 <__ssputs_r>:
 8004df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	688e      	ldr	r6, [r1, #8]
 8004dfe:	461f      	mov	r7, r3
 8004e00:	42be      	cmp	r6, r7
 8004e02:	680b      	ldr	r3, [r1, #0]
 8004e04:	4682      	mov	sl, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4690      	mov	r8, r2
 8004e0a:	d82d      	bhi.n	8004e68 <__ssputs_r+0x70>
 8004e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e14:	d026      	beq.n	8004e64 <__ssputs_r+0x6c>
 8004e16:	6965      	ldr	r5, [r4, #20]
 8004e18:	6909      	ldr	r1, [r1, #16]
 8004e1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e1e:	eba3 0901 	sub.w	r9, r3, r1
 8004e22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e26:	1c7b      	adds	r3, r7, #1
 8004e28:	444b      	add	r3, r9
 8004e2a:	106d      	asrs	r5, r5, #1
 8004e2c:	429d      	cmp	r5, r3
 8004e2e:	bf38      	it	cc
 8004e30:	461d      	movcc	r5, r3
 8004e32:	0553      	lsls	r3, r2, #21
 8004e34:	d527      	bpl.n	8004e86 <__ssputs_r+0x8e>
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7ff ff52 	bl	8004ce0 <_malloc_r>
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	b360      	cbz	r0, 8004e9a <__ssputs_r+0xa2>
 8004e40:	6921      	ldr	r1, [r4, #16]
 8004e42:	464a      	mov	r2, r9
 8004e44:	f000 fae6 	bl	8005414 <memcpy>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	6126      	str	r6, [r4, #16]
 8004e56:	6165      	str	r5, [r4, #20]
 8004e58:	444e      	add	r6, r9
 8004e5a:	eba5 0509 	sub.w	r5, r5, r9
 8004e5e:	6026      	str	r6, [r4, #0]
 8004e60:	60a5      	str	r5, [r4, #8]
 8004e62:	463e      	mov	r6, r7
 8004e64:	42be      	cmp	r6, r7
 8004e66:	d900      	bls.n	8004e6a <__ssputs_r+0x72>
 8004e68:	463e      	mov	r6, r7
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	4632      	mov	r2, r6
 8004e6e:	4641      	mov	r1, r8
 8004e70:	f000 faa6 	bl	80053c0 <memmove>
 8004e74:	68a3      	ldr	r3, [r4, #8]
 8004e76:	1b9b      	subs	r3, r3, r6
 8004e78:	60a3      	str	r3, [r4, #8]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	4433      	add	r3, r6
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	2000      	movs	r0, #0
 8004e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e86:	462a      	mov	r2, r5
 8004e88:	f000 fad2 	bl	8005430 <_realloc_r>
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d1e0      	bne.n	8004e54 <__ssputs_r+0x5c>
 8004e92:	6921      	ldr	r1, [r4, #16]
 8004e94:	4650      	mov	r0, sl
 8004e96:	f7ff feb7 	bl	8004c08 <_free_r>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	f8ca 3000 	str.w	r3, [sl]
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	e7e9      	b.n	8004e82 <__ssputs_r+0x8a>
	...

08004eb0 <_svfiprintf_r>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	4698      	mov	r8, r3
 8004eb6:	898b      	ldrh	r3, [r1, #12]
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	b09d      	sub	sp, #116	@ 0x74
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	460d      	mov	r5, r1
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	d510      	bpl.n	8004ee6 <_svfiprintf_r+0x36>
 8004ec4:	690b      	ldr	r3, [r1, #16]
 8004ec6:	b973      	cbnz	r3, 8004ee6 <_svfiprintf_r+0x36>
 8004ec8:	2140      	movs	r1, #64	@ 0x40
 8004eca:	f7ff ff09 	bl	8004ce0 <_malloc_r>
 8004ece:	6028      	str	r0, [r5, #0]
 8004ed0:	6128      	str	r0, [r5, #16]
 8004ed2:	b930      	cbnz	r0, 8004ee2 <_svfiprintf_r+0x32>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8004edc:	b01d      	add	sp, #116	@ 0x74
 8004ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee2:	2340      	movs	r3, #64	@ 0x40
 8004ee4:	616b      	str	r3, [r5, #20]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eea:	2320      	movs	r3, #32
 8004eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ef4:	2330      	movs	r3, #48	@ 0x30
 8004ef6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005094 <_svfiprintf_r+0x1e4>
 8004efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004efe:	f04f 0901 	mov.w	r9, #1
 8004f02:	4623      	mov	r3, r4
 8004f04:	469a      	mov	sl, r3
 8004f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f0a:	b10a      	cbz	r2, 8004f10 <_svfiprintf_r+0x60>
 8004f0c:	2a25      	cmp	r2, #37	@ 0x25
 8004f0e:	d1f9      	bne.n	8004f04 <_svfiprintf_r+0x54>
 8004f10:	ebba 0b04 	subs.w	fp, sl, r4
 8004f14:	d00b      	beq.n	8004f2e <_svfiprintf_r+0x7e>
 8004f16:	465b      	mov	r3, fp
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f7ff ff6b 	bl	8004df8 <__ssputs_r>
 8004f22:	3001      	adds	r0, #1
 8004f24:	f000 80a7 	beq.w	8005076 <_svfiprintf_r+0x1c6>
 8004f28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f2a:	445a      	add	r2, fp
 8004f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 809f 	beq.w	8005076 <_svfiprintf_r+0x1c6>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f42:	f10a 0a01 	add.w	sl, sl, #1
 8004f46:	9304      	str	r3, [sp, #16]
 8004f48:	9307      	str	r3, [sp, #28]
 8004f4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f50:	4654      	mov	r4, sl
 8004f52:	2205      	movs	r2, #5
 8004f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f58:	484e      	ldr	r0, [pc, #312]	@ (8005094 <_svfiprintf_r+0x1e4>)
 8004f5a:	f7fb f941 	bl	80001e0 <memchr>
 8004f5e:	9a04      	ldr	r2, [sp, #16]
 8004f60:	b9d8      	cbnz	r0, 8004f9a <_svfiprintf_r+0xea>
 8004f62:	06d0      	lsls	r0, r2, #27
 8004f64:	bf44      	itt	mi
 8004f66:	2320      	movmi	r3, #32
 8004f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f6c:	0711      	lsls	r1, r2, #28
 8004f6e:	bf44      	itt	mi
 8004f70:	232b      	movmi	r3, #43	@ 0x2b
 8004f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f76:	f89a 3000 	ldrb.w	r3, [sl]
 8004f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f7c:	d015      	beq.n	8004faa <_svfiprintf_r+0xfa>
 8004f7e:	9a07      	ldr	r2, [sp, #28]
 8004f80:	4654      	mov	r4, sl
 8004f82:	2000      	movs	r0, #0
 8004f84:	f04f 0c0a 	mov.w	ip, #10
 8004f88:	4621      	mov	r1, r4
 8004f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f8e:	3b30      	subs	r3, #48	@ 0x30
 8004f90:	2b09      	cmp	r3, #9
 8004f92:	d94b      	bls.n	800502c <_svfiprintf_r+0x17c>
 8004f94:	b1b0      	cbz	r0, 8004fc4 <_svfiprintf_r+0x114>
 8004f96:	9207      	str	r2, [sp, #28]
 8004f98:	e014      	b.n	8004fc4 <_svfiprintf_r+0x114>
 8004f9a:	eba0 0308 	sub.w	r3, r0, r8
 8004f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	9304      	str	r3, [sp, #16]
 8004fa6:	46a2      	mov	sl, r4
 8004fa8:	e7d2      	b.n	8004f50 <_svfiprintf_r+0xa0>
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	1d19      	adds	r1, r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	9103      	str	r1, [sp, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bfbb      	ittet	lt
 8004fb6:	425b      	neglt	r3, r3
 8004fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fbc:	9307      	strge	r3, [sp, #28]
 8004fbe:	9307      	strlt	r3, [sp, #28]
 8004fc0:	bfb8      	it	lt
 8004fc2:	9204      	strlt	r2, [sp, #16]
 8004fc4:	7823      	ldrb	r3, [r4, #0]
 8004fc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fc8:	d10a      	bne.n	8004fe0 <_svfiprintf_r+0x130>
 8004fca:	7863      	ldrb	r3, [r4, #1]
 8004fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fce:	d132      	bne.n	8005036 <_svfiprintf_r+0x186>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	9203      	str	r2, [sp, #12]
 8004fd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fdc:	3402      	adds	r4, #2
 8004fde:	9305      	str	r3, [sp, #20]
 8004fe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050a4 <_svfiprintf_r+0x1f4>
 8004fe4:	7821      	ldrb	r1, [r4, #0]
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	4650      	mov	r0, sl
 8004fea:	f7fb f8f9 	bl	80001e0 <memchr>
 8004fee:	b138      	cbz	r0, 8005000 <_svfiprintf_r+0x150>
 8004ff0:	9b04      	ldr	r3, [sp, #16]
 8004ff2:	eba0 000a 	sub.w	r0, r0, sl
 8004ff6:	2240      	movs	r2, #64	@ 0x40
 8004ff8:	4082      	lsls	r2, r0
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	3401      	adds	r4, #1
 8004ffe:	9304      	str	r3, [sp, #16]
 8005000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005004:	4824      	ldr	r0, [pc, #144]	@ (8005098 <_svfiprintf_r+0x1e8>)
 8005006:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800500a:	2206      	movs	r2, #6
 800500c:	f7fb f8e8 	bl	80001e0 <memchr>
 8005010:	2800      	cmp	r0, #0
 8005012:	d036      	beq.n	8005082 <_svfiprintf_r+0x1d2>
 8005014:	4b21      	ldr	r3, [pc, #132]	@ (800509c <_svfiprintf_r+0x1ec>)
 8005016:	bb1b      	cbnz	r3, 8005060 <_svfiprintf_r+0x1b0>
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	3307      	adds	r3, #7
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	3308      	adds	r3, #8
 8005022:	9303      	str	r3, [sp, #12]
 8005024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005026:	4433      	add	r3, r6
 8005028:	9309      	str	r3, [sp, #36]	@ 0x24
 800502a:	e76a      	b.n	8004f02 <_svfiprintf_r+0x52>
 800502c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005030:	460c      	mov	r4, r1
 8005032:	2001      	movs	r0, #1
 8005034:	e7a8      	b.n	8004f88 <_svfiprintf_r+0xd8>
 8005036:	2300      	movs	r3, #0
 8005038:	3401      	adds	r4, #1
 800503a:	9305      	str	r3, [sp, #20]
 800503c:	4619      	mov	r1, r3
 800503e:	f04f 0c0a 	mov.w	ip, #10
 8005042:	4620      	mov	r0, r4
 8005044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005048:	3a30      	subs	r2, #48	@ 0x30
 800504a:	2a09      	cmp	r2, #9
 800504c:	d903      	bls.n	8005056 <_svfiprintf_r+0x1a6>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0c6      	beq.n	8004fe0 <_svfiprintf_r+0x130>
 8005052:	9105      	str	r1, [sp, #20]
 8005054:	e7c4      	b.n	8004fe0 <_svfiprintf_r+0x130>
 8005056:	fb0c 2101 	mla	r1, ip, r1, r2
 800505a:	4604      	mov	r4, r0
 800505c:	2301      	movs	r3, #1
 800505e:	e7f0      	b.n	8005042 <_svfiprintf_r+0x192>
 8005060:	ab03      	add	r3, sp, #12
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	462a      	mov	r2, r5
 8005066:	4b0e      	ldr	r3, [pc, #56]	@ (80050a0 <_svfiprintf_r+0x1f0>)
 8005068:	a904      	add	r1, sp, #16
 800506a:	4638      	mov	r0, r7
 800506c:	f3af 8000 	nop.w
 8005070:	1c42      	adds	r2, r0, #1
 8005072:	4606      	mov	r6, r0
 8005074:	d1d6      	bne.n	8005024 <_svfiprintf_r+0x174>
 8005076:	89ab      	ldrh	r3, [r5, #12]
 8005078:	065b      	lsls	r3, r3, #25
 800507a:	f53f af2d 	bmi.w	8004ed8 <_svfiprintf_r+0x28>
 800507e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005080:	e72c      	b.n	8004edc <_svfiprintf_r+0x2c>
 8005082:	ab03      	add	r3, sp, #12
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	462a      	mov	r2, r5
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <_svfiprintf_r+0x1f0>)
 800508a:	a904      	add	r1, sp, #16
 800508c:	4638      	mov	r0, r7
 800508e:	f000 f879 	bl	8005184 <_printf_i>
 8005092:	e7ed      	b.n	8005070 <_svfiprintf_r+0x1c0>
 8005094:	08005510 	.word	0x08005510
 8005098:	0800551a 	.word	0x0800551a
 800509c:	00000000 	.word	0x00000000
 80050a0:	08004df9 	.word	0x08004df9
 80050a4:	08005516 	.word	0x08005516

080050a8 <_printf_common>:
 80050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	4616      	mov	r6, r2
 80050ae:	4698      	mov	r8, r3
 80050b0:	688a      	ldr	r2, [r1, #8]
 80050b2:	690b      	ldr	r3, [r1, #16]
 80050b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050b8:	4293      	cmp	r3, r2
 80050ba:	bfb8      	it	lt
 80050bc:	4613      	movlt	r3, r2
 80050be:	6033      	str	r3, [r6, #0]
 80050c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050c4:	4607      	mov	r7, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	b10a      	cbz	r2, 80050ce <_printf_common+0x26>
 80050ca:	3301      	adds	r3, #1
 80050cc:	6033      	str	r3, [r6, #0]
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	0699      	lsls	r1, r3, #26
 80050d2:	bf42      	ittt	mi
 80050d4:	6833      	ldrmi	r3, [r6, #0]
 80050d6:	3302      	addmi	r3, #2
 80050d8:	6033      	strmi	r3, [r6, #0]
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	f015 0506 	ands.w	r5, r5, #6
 80050e0:	d106      	bne.n	80050f0 <_printf_common+0x48>
 80050e2:	f104 0a19 	add.w	sl, r4, #25
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	6832      	ldr	r2, [r6, #0]
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	42ab      	cmp	r3, r5
 80050ee:	dc26      	bgt.n	800513e <_printf_common+0x96>
 80050f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050f4:	6822      	ldr	r2, [r4, #0]
 80050f6:	3b00      	subs	r3, #0
 80050f8:	bf18      	it	ne
 80050fa:	2301      	movne	r3, #1
 80050fc:	0692      	lsls	r2, r2, #26
 80050fe:	d42b      	bmi.n	8005158 <_printf_common+0xb0>
 8005100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005104:	4641      	mov	r1, r8
 8005106:	4638      	mov	r0, r7
 8005108:	47c8      	blx	r9
 800510a:	3001      	adds	r0, #1
 800510c:	d01e      	beq.n	800514c <_printf_common+0xa4>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	6922      	ldr	r2, [r4, #16]
 8005112:	f003 0306 	and.w	r3, r3, #6
 8005116:	2b04      	cmp	r3, #4
 8005118:	bf02      	ittt	eq
 800511a:	68e5      	ldreq	r5, [r4, #12]
 800511c:	6833      	ldreq	r3, [r6, #0]
 800511e:	1aed      	subeq	r5, r5, r3
 8005120:	68a3      	ldr	r3, [r4, #8]
 8005122:	bf0c      	ite	eq
 8005124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005128:	2500      	movne	r5, #0
 800512a:	4293      	cmp	r3, r2
 800512c:	bfc4      	itt	gt
 800512e:	1a9b      	subgt	r3, r3, r2
 8005130:	18ed      	addgt	r5, r5, r3
 8005132:	2600      	movs	r6, #0
 8005134:	341a      	adds	r4, #26
 8005136:	42b5      	cmp	r5, r6
 8005138:	d11a      	bne.n	8005170 <_printf_common+0xc8>
 800513a:	2000      	movs	r0, #0
 800513c:	e008      	b.n	8005150 <_printf_common+0xa8>
 800513e:	2301      	movs	r3, #1
 8005140:	4652      	mov	r2, sl
 8005142:	4641      	mov	r1, r8
 8005144:	4638      	mov	r0, r7
 8005146:	47c8      	blx	r9
 8005148:	3001      	adds	r0, #1
 800514a:	d103      	bne.n	8005154 <_printf_common+0xac>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005154:	3501      	adds	r5, #1
 8005156:	e7c6      	b.n	80050e6 <_printf_common+0x3e>
 8005158:	18e1      	adds	r1, r4, r3
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	2030      	movs	r0, #48	@ 0x30
 800515e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005162:	4422      	add	r2, r4
 8005164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800516c:	3302      	adds	r3, #2
 800516e:	e7c7      	b.n	8005100 <_printf_common+0x58>
 8005170:	2301      	movs	r3, #1
 8005172:	4622      	mov	r2, r4
 8005174:	4641      	mov	r1, r8
 8005176:	4638      	mov	r0, r7
 8005178:	47c8      	blx	r9
 800517a:	3001      	adds	r0, #1
 800517c:	d0e6      	beq.n	800514c <_printf_common+0xa4>
 800517e:	3601      	adds	r6, #1
 8005180:	e7d9      	b.n	8005136 <_printf_common+0x8e>
	...

08005184 <_printf_i>:
 8005184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	7e0f      	ldrb	r7, [r1, #24]
 800518a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800518c:	2f78      	cmp	r7, #120	@ 0x78
 800518e:	4691      	mov	r9, r2
 8005190:	4680      	mov	r8, r0
 8005192:	460c      	mov	r4, r1
 8005194:	469a      	mov	sl, r3
 8005196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800519a:	d807      	bhi.n	80051ac <_printf_i+0x28>
 800519c:	2f62      	cmp	r7, #98	@ 0x62
 800519e:	d80a      	bhi.n	80051b6 <_printf_i+0x32>
 80051a0:	2f00      	cmp	r7, #0
 80051a2:	f000 80d1 	beq.w	8005348 <_printf_i+0x1c4>
 80051a6:	2f58      	cmp	r7, #88	@ 0x58
 80051a8:	f000 80b8 	beq.w	800531c <_printf_i+0x198>
 80051ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051b4:	e03a      	b.n	800522c <_printf_i+0xa8>
 80051b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051ba:	2b15      	cmp	r3, #21
 80051bc:	d8f6      	bhi.n	80051ac <_printf_i+0x28>
 80051be:	a101      	add	r1, pc, #4	@ (adr r1, 80051c4 <_printf_i+0x40>)
 80051c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c4:	0800521d 	.word	0x0800521d
 80051c8:	08005231 	.word	0x08005231
 80051cc:	080051ad 	.word	0x080051ad
 80051d0:	080051ad 	.word	0x080051ad
 80051d4:	080051ad 	.word	0x080051ad
 80051d8:	080051ad 	.word	0x080051ad
 80051dc:	08005231 	.word	0x08005231
 80051e0:	080051ad 	.word	0x080051ad
 80051e4:	080051ad 	.word	0x080051ad
 80051e8:	080051ad 	.word	0x080051ad
 80051ec:	080051ad 	.word	0x080051ad
 80051f0:	0800532f 	.word	0x0800532f
 80051f4:	0800525b 	.word	0x0800525b
 80051f8:	080052e9 	.word	0x080052e9
 80051fc:	080051ad 	.word	0x080051ad
 8005200:	080051ad 	.word	0x080051ad
 8005204:	08005351 	.word	0x08005351
 8005208:	080051ad 	.word	0x080051ad
 800520c:	0800525b 	.word	0x0800525b
 8005210:	080051ad 	.word	0x080051ad
 8005214:	080051ad 	.word	0x080051ad
 8005218:	080052f1 	.word	0x080052f1
 800521c:	6833      	ldr	r3, [r6, #0]
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6032      	str	r2, [r6, #0]
 8005224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800522c:	2301      	movs	r3, #1
 800522e:	e09c      	b.n	800536a <_printf_i+0x1e6>
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	6820      	ldr	r0, [r4, #0]
 8005234:	1d19      	adds	r1, r3, #4
 8005236:	6031      	str	r1, [r6, #0]
 8005238:	0606      	lsls	r6, r0, #24
 800523a:	d501      	bpl.n	8005240 <_printf_i+0xbc>
 800523c:	681d      	ldr	r5, [r3, #0]
 800523e:	e003      	b.n	8005248 <_printf_i+0xc4>
 8005240:	0645      	lsls	r5, r0, #25
 8005242:	d5fb      	bpl.n	800523c <_printf_i+0xb8>
 8005244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005248:	2d00      	cmp	r5, #0
 800524a:	da03      	bge.n	8005254 <_printf_i+0xd0>
 800524c:	232d      	movs	r3, #45	@ 0x2d
 800524e:	426d      	negs	r5, r5
 8005250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005254:	4858      	ldr	r0, [pc, #352]	@ (80053b8 <_printf_i+0x234>)
 8005256:	230a      	movs	r3, #10
 8005258:	e011      	b.n	800527e <_printf_i+0xfa>
 800525a:	6821      	ldr	r1, [r4, #0]
 800525c:	6833      	ldr	r3, [r6, #0]
 800525e:	0608      	lsls	r0, r1, #24
 8005260:	f853 5b04 	ldr.w	r5, [r3], #4
 8005264:	d402      	bmi.n	800526c <_printf_i+0xe8>
 8005266:	0649      	lsls	r1, r1, #25
 8005268:	bf48      	it	mi
 800526a:	b2ad      	uxthmi	r5, r5
 800526c:	2f6f      	cmp	r7, #111	@ 0x6f
 800526e:	4852      	ldr	r0, [pc, #328]	@ (80053b8 <_printf_i+0x234>)
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	bf14      	ite	ne
 8005274:	230a      	movne	r3, #10
 8005276:	2308      	moveq	r3, #8
 8005278:	2100      	movs	r1, #0
 800527a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800527e:	6866      	ldr	r6, [r4, #4]
 8005280:	60a6      	str	r6, [r4, #8]
 8005282:	2e00      	cmp	r6, #0
 8005284:	db05      	blt.n	8005292 <_printf_i+0x10e>
 8005286:	6821      	ldr	r1, [r4, #0]
 8005288:	432e      	orrs	r6, r5
 800528a:	f021 0104 	bic.w	r1, r1, #4
 800528e:	6021      	str	r1, [r4, #0]
 8005290:	d04b      	beq.n	800532a <_printf_i+0x1a6>
 8005292:	4616      	mov	r6, r2
 8005294:	fbb5 f1f3 	udiv	r1, r5, r3
 8005298:	fb03 5711 	mls	r7, r3, r1, r5
 800529c:	5dc7      	ldrb	r7, [r0, r7]
 800529e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052a2:	462f      	mov	r7, r5
 80052a4:	42bb      	cmp	r3, r7
 80052a6:	460d      	mov	r5, r1
 80052a8:	d9f4      	bls.n	8005294 <_printf_i+0x110>
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d10b      	bne.n	80052c6 <_printf_i+0x142>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	07df      	lsls	r7, r3, #31
 80052b2:	d508      	bpl.n	80052c6 <_printf_i+0x142>
 80052b4:	6923      	ldr	r3, [r4, #16]
 80052b6:	6861      	ldr	r1, [r4, #4]
 80052b8:	4299      	cmp	r1, r3
 80052ba:	bfde      	ittt	le
 80052bc:	2330      	movle	r3, #48	@ 0x30
 80052be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052c6:	1b92      	subs	r2, r2, r6
 80052c8:	6122      	str	r2, [r4, #16]
 80052ca:	f8cd a000 	str.w	sl, [sp]
 80052ce:	464b      	mov	r3, r9
 80052d0:	aa03      	add	r2, sp, #12
 80052d2:	4621      	mov	r1, r4
 80052d4:	4640      	mov	r0, r8
 80052d6:	f7ff fee7 	bl	80050a8 <_printf_common>
 80052da:	3001      	adds	r0, #1
 80052dc:	d14a      	bne.n	8005374 <_printf_i+0x1f0>
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	b004      	add	sp, #16
 80052e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f043 0320 	orr.w	r3, r3, #32
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	4832      	ldr	r0, [pc, #200]	@ (80053bc <_printf_i+0x238>)
 80052f2:	2778      	movs	r7, #120	@ 0x78
 80052f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	6831      	ldr	r1, [r6, #0]
 80052fc:	061f      	lsls	r7, r3, #24
 80052fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005302:	d402      	bmi.n	800530a <_printf_i+0x186>
 8005304:	065f      	lsls	r7, r3, #25
 8005306:	bf48      	it	mi
 8005308:	b2ad      	uxthmi	r5, r5
 800530a:	6031      	str	r1, [r6, #0]
 800530c:	07d9      	lsls	r1, r3, #31
 800530e:	bf44      	itt	mi
 8005310:	f043 0320 	orrmi.w	r3, r3, #32
 8005314:	6023      	strmi	r3, [r4, #0]
 8005316:	b11d      	cbz	r5, 8005320 <_printf_i+0x19c>
 8005318:	2310      	movs	r3, #16
 800531a:	e7ad      	b.n	8005278 <_printf_i+0xf4>
 800531c:	4826      	ldr	r0, [pc, #152]	@ (80053b8 <_printf_i+0x234>)
 800531e:	e7e9      	b.n	80052f4 <_printf_i+0x170>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f023 0320 	bic.w	r3, r3, #32
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	e7f6      	b.n	8005318 <_printf_i+0x194>
 800532a:	4616      	mov	r6, r2
 800532c:	e7bd      	b.n	80052aa <_printf_i+0x126>
 800532e:	6833      	ldr	r3, [r6, #0]
 8005330:	6825      	ldr	r5, [r4, #0]
 8005332:	6961      	ldr	r1, [r4, #20]
 8005334:	1d18      	adds	r0, r3, #4
 8005336:	6030      	str	r0, [r6, #0]
 8005338:	062e      	lsls	r6, r5, #24
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	d501      	bpl.n	8005342 <_printf_i+0x1be>
 800533e:	6019      	str	r1, [r3, #0]
 8005340:	e002      	b.n	8005348 <_printf_i+0x1c4>
 8005342:	0668      	lsls	r0, r5, #25
 8005344:	d5fb      	bpl.n	800533e <_printf_i+0x1ba>
 8005346:	8019      	strh	r1, [r3, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	4616      	mov	r6, r2
 800534e:	e7bc      	b.n	80052ca <_printf_i+0x146>
 8005350:	6833      	ldr	r3, [r6, #0]
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	6032      	str	r2, [r6, #0]
 8005356:	681e      	ldr	r6, [r3, #0]
 8005358:	6862      	ldr	r2, [r4, #4]
 800535a:	2100      	movs	r1, #0
 800535c:	4630      	mov	r0, r6
 800535e:	f7fa ff3f 	bl	80001e0 <memchr>
 8005362:	b108      	cbz	r0, 8005368 <_printf_i+0x1e4>
 8005364:	1b80      	subs	r0, r0, r6
 8005366:	6060      	str	r0, [r4, #4]
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	2300      	movs	r3, #0
 800536e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005372:	e7aa      	b.n	80052ca <_printf_i+0x146>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	4632      	mov	r2, r6
 8005378:	4649      	mov	r1, r9
 800537a:	4640      	mov	r0, r8
 800537c:	47d0      	blx	sl
 800537e:	3001      	adds	r0, #1
 8005380:	d0ad      	beq.n	80052de <_printf_i+0x15a>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	079b      	lsls	r3, r3, #30
 8005386:	d413      	bmi.n	80053b0 <_printf_i+0x22c>
 8005388:	68e0      	ldr	r0, [r4, #12]
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	4298      	cmp	r0, r3
 800538e:	bfb8      	it	lt
 8005390:	4618      	movlt	r0, r3
 8005392:	e7a6      	b.n	80052e2 <_printf_i+0x15e>
 8005394:	2301      	movs	r3, #1
 8005396:	4632      	mov	r2, r6
 8005398:	4649      	mov	r1, r9
 800539a:	4640      	mov	r0, r8
 800539c:	47d0      	blx	sl
 800539e:	3001      	adds	r0, #1
 80053a0:	d09d      	beq.n	80052de <_printf_i+0x15a>
 80053a2:	3501      	adds	r5, #1
 80053a4:	68e3      	ldr	r3, [r4, #12]
 80053a6:	9903      	ldr	r1, [sp, #12]
 80053a8:	1a5b      	subs	r3, r3, r1
 80053aa:	42ab      	cmp	r3, r5
 80053ac:	dcf2      	bgt.n	8005394 <_printf_i+0x210>
 80053ae:	e7eb      	b.n	8005388 <_printf_i+0x204>
 80053b0:	2500      	movs	r5, #0
 80053b2:	f104 0619 	add.w	r6, r4, #25
 80053b6:	e7f5      	b.n	80053a4 <_printf_i+0x220>
 80053b8:	08005521 	.word	0x08005521
 80053bc:	08005532 	.word	0x08005532

080053c0 <memmove>:
 80053c0:	4288      	cmp	r0, r1
 80053c2:	b510      	push	{r4, lr}
 80053c4:	eb01 0402 	add.w	r4, r1, r2
 80053c8:	d902      	bls.n	80053d0 <memmove+0x10>
 80053ca:	4284      	cmp	r4, r0
 80053cc:	4623      	mov	r3, r4
 80053ce:	d807      	bhi.n	80053e0 <memmove+0x20>
 80053d0:	1e43      	subs	r3, r0, #1
 80053d2:	42a1      	cmp	r1, r4
 80053d4:	d008      	beq.n	80053e8 <memmove+0x28>
 80053d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053de:	e7f8      	b.n	80053d2 <memmove+0x12>
 80053e0:	4402      	add	r2, r0
 80053e2:	4601      	mov	r1, r0
 80053e4:	428a      	cmp	r2, r1
 80053e6:	d100      	bne.n	80053ea <memmove+0x2a>
 80053e8:	bd10      	pop	{r4, pc}
 80053ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053f2:	e7f7      	b.n	80053e4 <memmove+0x24>

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d06      	ldr	r5, [pc, #24]	@ (8005410 <_sbrk_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fb ff96 	bl	8001330 <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20000454 	.word	0x20000454

08005414 <memcpy>:
 8005414:	440a      	add	r2, r1
 8005416:	4291      	cmp	r1, r2
 8005418:	f100 33ff 	add.w	r3, r0, #4294967295
 800541c:	d100      	bne.n	8005420 <memcpy+0xc>
 800541e:	4770      	bx	lr
 8005420:	b510      	push	{r4, lr}
 8005422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800542a:	4291      	cmp	r1, r2
 800542c:	d1f9      	bne.n	8005422 <memcpy+0xe>
 800542e:	bd10      	pop	{r4, pc}

08005430 <_realloc_r>:
 8005430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005434:	4607      	mov	r7, r0
 8005436:	4614      	mov	r4, r2
 8005438:	460d      	mov	r5, r1
 800543a:	b921      	cbnz	r1, 8005446 <_realloc_r+0x16>
 800543c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005440:	4611      	mov	r1, r2
 8005442:	f7ff bc4d 	b.w	8004ce0 <_malloc_r>
 8005446:	b92a      	cbnz	r2, 8005454 <_realloc_r+0x24>
 8005448:	f7ff fbde 	bl	8004c08 <_free_r>
 800544c:	4625      	mov	r5, r4
 800544e:	4628      	mov	r0, r5
 8005450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005454:	f000 f81a 	bl	800548c <_malloc_usable_size_r>
 8005458:	4284      	cmp	r4, r0
 800545a:	4606      	mov	r6, r0
 800545c:	d802      	bhi.n	8005464 <_realloc_r+0x34>
 800545e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005462:	d8f4      	bhi.n	800544e <_realloc_r+0x1e>
 8005464:	4621      	mov	r1, r4
 8005466:	4638      	mov	r0, r7
 8005468:	f7ff fc3a 	bl	8004ce0 <_malloc_r>
 800546c:	4680      	mov	r8, r0
 800546e:	b908      	cbnz	r0, 8005474 <_realloc_r+0x44>
 8005470:	4645      	mov	r5, r8
 8005472:	e7ec      	b.n	800544e <_realloc_r+0x1e>
 8005474:	42b4      	cmp	r4, r6
 8005476:	4622      	mov	r2, r4
 8005478:	4629      	mov	r1, r5
 800547a:	bf28      	it	cs
 800547c:	4632      	movcs	r2, r6
 800547e:	f7ff ffc9 	bl	8005414 <memcpy>
 8005482:	4629      	mov	r1, r5
 8005484:	4638      	mov	r0, r7
 8005486:	f7ff fbbf 	bl	8004c08 <_free_r>
 800548a:	e7f1      	b.n	8005470 <_realloc_r+0x40>

0800548c <_malloc_usable_size_r>:
 800548c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005490:	1f18      	subs	r0, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	bfbc      	itt	lt
 8005496:	580b      	ldrlt	r3, [r1, r0]
 8005498:	18c0      	addlt	r0, r0, r3
 800549a:	4770      	bx	lr

0800549c <_init>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr

080054a8 <_fini>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr
