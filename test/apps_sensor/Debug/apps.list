
apps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800578c  0800578c  0000678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005804  08005804  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005804  08005804  00006804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800580c  0800580c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005810  08005810  00006810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005814  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000350  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b8  200003b8  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef9b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f8  00000000  00000000  00016033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00018330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab2  00000000  00000000  000190e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c73  00000000  00000000  00019b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109c4  00000000  00000000  0003c805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d88be  00000000  00000000  0004d1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125a87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e78  00000000  00000000  00125acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00129944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005774 	.word	0x08005774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005774 	.word	0x08005774

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <APPS_Init>:
extern DMA_HandleTypeDef hdma_tim3_ch1;

static uint32_t pwm_buffer[1] = {0}; // PWM Duty Buffer

void APPS_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, adcdata, ADC_CHANNEL_COUNT);
 80005b0:	2202      	movs	r2, #2
 80005b2:	4906      	ldr	r1, [pc, #24]	@ (80005cc <APPS_Init+0x20>)
 80005b4:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <APPS_Init+0x24>)
 80005b6:	f001 f965 	bl	8001884 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <APPS_Init+0x28>)
 80005bc:	f003 f904 	bl	80037c8 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <APPS_Init+0x2c>)
 80005c4:	f003 f9c2 	bl	800394c <HAL_TIM_PWM_Start>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000084 	.word	0x20000084
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	200001d4 	.word	0x200001d4
 80005d8:	2000018c 	.word	0x2000018c

080005dc <APPS_Loop>:

void APPS_Loop(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b089      	sub	sp, #36	@ 0x24
 80005e0:	af00      	add	r7, sp, #0
    if (!apps_enabled)
 80005e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000794 <APPS_Loop+0x1b8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d004      	beq.n	80005fa <APPS_Loop+0x1e>
    {
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // PWM'i de sıfırla
 80005f0:	4b69      	ldr	r3, [pc, #420]	@ (8000798 <APPS_Loop+0x1bc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 80005f8:	e0c6      	b.n	8000788 <APPS_Loop+0x1ac>
    }

    int32_t val1 = adcdata[0];
 80005fa:	4b68      	ldr	r3, [pc, #416]	@ (800079c <APPS_Loop+0x1c0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	617b      	str	r3, [r7, #20]
    int32_t val2 = adcdata[1];
 8000600:	4b66      	ldr	r3, [pc, #408]	@ (800079c <APPS_Loop+0x1c0>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	613b      	str	r3, [r7, #16]

    float norm1 = (val1 - sensor1_min) / (float)(sensor1_max - sensor1_min);
 8000606:	4b66      	ldr	r3, [pc, #408]	@ (80007a0 <APPS_Loop+0x1c4>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000618:	4b62      	ldr	r3, [pc, #392]	@ (80007a4 <APPS_Loop+0x1c8>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b60      	ldr	r3, [pc, #384]	@ (80007a0 <APPS_Loop+0x1c4>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000630:	edc7 7a07 	vstr	s15, [r7, #28]
    float norm2 = (val2 - sensor2_min) / (float)(sensor2_max - sensor2_min);
 8000634:	4b5c      	ldr	r3, [pc, #368]	@ (80007a8 <APPS_Loop+0x1cc>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000646:	4b59      	ldr	r3, [pc, #356]	@ (80007ac <APPS_Loop+0x1d0>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b56      	ldr	r3, [pc, #344]	@ (80007a8 <APPS_Loop+0x1cc>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	ee07 3a90 	vmov	s15, r3
 8000656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800065a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065e:	edc7 7a06 	vstr	s15, [r7, #24]

    if (norm1 < 0.0f) norm1 = 0.0f;
 8000662:	edd7 7a07 	vldr	s15, [r7, #28]
 8000666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	d502      	bpl.n	8000676 <APPS_Loop+0x9a>
 8000670:	f04f 0300 	mov.w	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    if (norm1 > 1.0f) norm1 = 1.0f;
 8000676:	edd7 7a07 	vldr	s15, [r7, #28]
 800067a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800067e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000686:	dd02      	ble.n	800068e <APPS_Loop+0xb2>
 8000688:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800068c:	61fb      	str	r3, [r7, #28]
    if (norm2 < 0.0f) norm2 = 0.0f;
 800068e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d502      	bpl.n	80006a2 <APPS_Loop+0xc6>
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
    if (norm2 > 1.0f) norm2 = 1.0f;
 80006a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80006a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b2:	dd02      	ble.n	80006ba <APPS_Loop+0xde>
 80006b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006b8:	61bb      	str	r3, [r7, #24]

    // İki normalize değer arasındaki fark
    float diff = fabsf(norm1 - norm2);
 80006ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80006be:	edd7 7a06 	vldr	s15, [r7, #24]
 80006c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006c6:	eef0 7ae7 	vabs.f32	s15, s15
 80006ca:	edc7 7a03 	vstr	s15, [r7, #12]

    uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <APPS_Loop+0x1d4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d4:	60bb      	str	r3, [r7, #8]

    // Eğer fark toleransı aşarsa
    if (diff > 0.10f) {
 80006d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80006da:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80007b4 <APPS_Loop+0x1d8>
 80006de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e6:	dd1e      	ble.n	8000726 <APPS_Loop+0x14a>
        if (!diff_flag) {
 80006e8:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <APPS_Loop+0x1dc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f083 0301 	eor.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <APPS_Loop+0x128>
            diff_flag = true;
 80006f6:	4b30      	ldr	r3, [pc, #192]	@ (80007b8 <APPS_Loop+0x1dc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
            diff_start_time = now;  // Takip başlangıcı
 80006fc:	4a2f      	ldr	r2, [pc, #188]	@ (80007bc <APPS_Loop+0x1e0>)
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	e013      	b.n	800072c <APPS_Loop+0x150>
        } else {
            // Süreyi kontrol et
            uint32_t elapsed = (now >= diff_start_time) ? (now - diff_start_time) : (0xFFFFFFFF - diff_start_time + now + 1);
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <APPS_Loop+0x1e0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	607b      	str	r3, [r7, #4]

            if (elapsed >= 1000) { // 100ms geçtiyse
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000714:	d30a      	bcc.n	800072c <APPS_Loop+0x150>
                permanent_fault = true;
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <APPS_Loop+0x1e4>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <APPS_Loop+0x1bc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	@ 0x34
 8000724:	e002      	b.n	800072c <APPS_Loop+0x150>

            }
        }
    } else {
        diff_flag = false;
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <APPS_Loop+0x1dc>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
    }

    // Eğer kalıcı hata yoksa PWM duty güncellenir

        if (!permanent_fault) {
 800072c:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <APPS_Loop+0x1e4>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f083 0301 	eor.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d026      	beq.n	8000788 <APPS_Loop+0x1ac>
            pwm_buffer[0] = (uint32_t)(norm1 * 49);
 800073a:	edd7 7a07 	vldr	s15, [r7, #28]
 800073e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80007c4 <APPS_Loop+0x1e8>
 8000742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074a:	ee17 2a90 	vmov	r2, s15
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000750:	601a      	str	r2, [r3, #0]

            // Duty değeri sınırlandırılır
            if (pwm_buffer[0] < 2) {
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d803      	bhi.n	8000762 <APPS_Loop+0x186>
                pwm_buffer[0] = 0;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <APPS_Loop+0x1ec>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	e006      	b.n	8000770 <APPS_Loop+0x194>
            } else if (pwm_buffer[0] > 47) {
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b2f      	cmp	r3, #47	@ 0x2f
 8000768:	d902      	bls.n	8000770 <APPS_Loop+0x194>
                pwm_buffer[0] = 49;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <APPS_Loop+0x1ec>)
 800076c:	2231      	movs	r2, #49	@ 0x31
 800076e:	601a      	str	r2, [r3, #0]
            }
            if(!permanent_fault){
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <APPS_Loop+0x1e4>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <APPS_Loop+0x1ac>

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_buffer[0]);
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <APPS_Loop+0x1bc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <APPS_Loop+0x1ec>)
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	635a      	str	r2, [r3, #52]	@ 0x34
            }


    }
}
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000264 	.word	0x20000264
 8000798:	2000018c 	.word	0x2000018c
 800079c:	20000084 	.word	0x20000084
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000002 	.word	0x20000002
 80007a8:	20000004 	.word	0x20000004
 80007ac:	20000006 	.word	0x20000006
 80007b0:	200001d4 	.word	0x200001d4
 80007b4:	3dcccccd 	.word	0x3dcccccd
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	20000090 	.word	0x20000090
 80007c0:	2000008d 	.word	0x2000008d
 80007c4:	42440000 	.word	0x42440000
 80007c8:	20000094 	.word	0x20000094

080007cc <APPS_Deinit>:

void APPS_Deinit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc1);
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <APPS_Deinit+0x2c>)
 80007d2:	f001 f96b 	bl	8001aac <HAL_ADC_Stop_DMA>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80007d6:	2100      	movs	r1, #0
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <APPS_Deinit+0x30>)
 80007da:	f003 f97f 	bl	8003adc <HAL_TIM_PWM_Stop>

    adcdata[0] = 0;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <APPS_Deinit+0x34>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
    adcdata[1] = 0;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <APPS_Deinit+0x34>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80007ea:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <APPS_Deinit+0x30>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000009c 	.word	0x2000009c
 80007fc:	2000018c 	.word	0x2000018c
 8000800:	20000084 	.word	0x20000084

08000804 <GYRO_Init>:
ADC_HandleTypeDef* hadc_gyro = &hadc2;

uint16_t gyrodata[2];

void GYRO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
    // Başlangıçta yapılacak bir şey yok, ADC ayarı CubeMX'te yapılmalı
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <GYRO_Loop>:

void GYRO_Loop(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

    // ADC2_IN4 -> PA4
    sConfig.Channel = ADC_CHANNEL_4;
 8000826:	2304      	movs	r3, #4
 8000828:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(hadc_gyro, &sConfig);
 8000832:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <GYRO_Loop+0xb0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	463a      	mov	r2, r7
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f9bc 	bl	8001bb8 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(hadc_gyro);
 8000840:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <GYRO_Loop+0xb0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fe8d 	bl	8001564 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc_gyro, HAL_MAX_DELAY);
 800084a:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <GYRO_Loop+0xb0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f04f 31ff 	mov.w	r1, #4294967295
 8000852:	4618      	mov	r0, r3
 8000854:	f000 ff8b 	bl	800176e <HAL_ADC_PollForConversion>
    gyrodata[0] = HAL_ADC_GetValue(hadc_gyro);
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <GYRO_Loop+0xb0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f97f 	bl	8001b60 <HAL_ADC_GetValue>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <GYRO_Loop+0xb4>)
 8000868:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(hadc_gyro);
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <GYRO_Loop+0xb0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 ff4a 	bl	8001708 <HAL_ADC_Stop>

    // ADC2_IN5 -> PA5
    sConfig.Channel = ADC_CHANNEL_5;
 8000874:	2305      	movs	r3, #5
 8000876:	603b      	str	r3, [r7, #0]
    HAL_ADC_ConfigChannel(hadc_gyro, &sConfig);
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <GYRO_Loop+0xb0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	463a      	mov	r2, r7
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f001 f999 	bl	8001bb8 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(hadc_gyro);
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <GYRO_Loop+0xb0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fe6a 	bl	8001564 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc_gyro, HAL_MAX_DELAY);
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <GYRO_Loop+0xb0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	4618      	mov	r0, r3
 800089a:	f000 ff68 	bl	800176e <HAL_ADC_PollForConversion>
    gyrodata[1] = HAL_ADC_GetValue(hadc_gyro);
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <GYRO_Loop+0xb0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f95c 	bl	8001b60 <HAL_ADC_GetValue>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <GYRO_Loop+0xb4>)
 80008ae:	805a      	strh	r2, [r3, #2]
    HAL_ADC_Stop(hadc_gyro);
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <GYRO_Loop+0xb0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 ff27 	bl	8001708 <HAL_ADC_Stop>
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000098 	.word	0x20000098

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b09f      	sub	sp, #124	@ 0x7c
 80008d0:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	char uart_buf[100];  // snprintf için
	bool led_shown = false;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fd6a 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f896 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80008e0:	f000 faac 	bl	8000e3c <MX_DMA_Init>
  MX_GPIO_Init();
 80008e4:	f000 faca 	bl	8000e7c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008e8:	f000 f8fa 	bl	8000ae0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008ec:	f000 f9b8 	bl	8000c60 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008f0:	f000 fa2c 	bl	8000d4c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008f4:	f000 fa78 	bl	8000de8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80008f8:	f000 f952 	bl	8000ba0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  GYRO_Init();
 80008fc:	f7ff ff82 	bl	8000804 <GYRO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GYRO_Loop(); // GYRO her zaman çalışır
 8000900:	f7ff ff88 	bl	8000814 <GYRO_Loop>

	    GPIO_PinState brake_pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000904:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000908:	483a      	ldr	r0, [pc, #232]	@ (80009f4 <main+0x128>)
 800090a:	f002 fa83 	bl	8002e14 <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	    GPIO_PinState rtd_button    = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000918:	4836      	ldr	r0, [pc, #216]	@ (80009f4 <main+0x128>)
 800091a:	f002 fa7b 	bl	8002e14 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // RTD butonuna basıldı ve fren de basılıysa APPS aktif edilir
	    if (brake_pressed == GPIO_PIN_SET && rtd_button == GPIO_PIN_SET && !apps_enabled)
 8000924:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000928:	2b01      	cmp	r3, #1
 800092a:	d129      	bne.n	8000980 <main+0xb4>
 800092c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000930:	2b01      	cmp	r3, #1
 8000932:	d125      	bne.n	8000980 <main+0xb4>
 8000934:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <main+0x12c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01e      	beq.n	8000980 <main+0xb4>
	    {
	        apps_enabled = true;
 8000942:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <main+0x12c>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
	        APPS_Init();
 8000948:	f7ff fe30 	bl	80005ac <APPS_Init>

	        if (!led_shown)
 800094c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000950:	f083 0301 	eor.w	r3, r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d012      	beq.n	8000980 <main+0xb4>
	        {
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // LED aç
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000960:	4824      	ldr	r0, [pc, #144]	@ (80009f4 <main+0x128>)
 8000962:	f002 fa6f 	bl	8002e44 <HAL_GPIO_WritePin>
	            HAL_Delay(3000);
 8000966:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800096a:	f000 fd93 	bl	8001494 <HAL_Delay>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // LED kapa
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000974:	481f      	ldr	r0, [pc, #124]	@ (80009f4 <main+0x128>)
 8000976:	f002 fa65 	bl	8002e44 <HAL_GPIO_WritePin>
	            led_shown = true;
 800097a:	2301      	movs	r3, #1
 800097c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	        }
	    }

	    // RTD butonu tekrar kapatılırsa APPS'i devreden çıkar
	    if (apps_enabled && rtd_button == GPIO_PIN_RESET)
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <main+0x12c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00b      	beq.n	80009a0 <main+0xd4>
 8000988:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <main+0xd4>
	    {
	        apps_enabled = false;
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <main+0x12c>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
	        led_shown = false;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	        APPS_Deinit(); // Hem ADC hem PWM durur
 800099c:	f7ff ff16 	bl	80007cc <APPS_Deinit>
	    }

	    if (apps_enabled)
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <main+0x12c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <main+0xe0>
	    {
	        APPS_Loop();  // Sadece APPS aktifse çalışsın
 80009a8:	f7ff fe18 	bl	80005dc <APPS_Loop>
	    }

	    snprintf(uart_buf, sizeof(uart_buf),
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <main+0x130>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <main+0x130>)
 80009b2:	685b      	ldr	r3, [r3, #4]
	             "APPS: %lu, %lu | GYRO: %lu, %lu\r\n",
	             adcdata[0], adcdata[1], gyrodata[0], gyrodata[1]);
 80009b4:	4912      	ldr	r1, [pc, #72]	@ (8000a00 <main+0x134>)
 80009b6:	8809      	ldrh	r1, [r1, #0]
	    snprintf(uart_buf, sizeof(uart_buf),
 80009b8:	460c      	mov	r4, r1
	             adcdata[0], adcdata[1], gyrodata[0], gyrodata[1]);
 80009ba:	4911      	ldr	r1, [pc, #68]	@ (8000a00 <main+0x134>)
 80009bc:	8849      	ldrh	r1, [r1, #2]
	    snprintf(uart_buf, sizeof(uart_buf),
 80009be:	4638      	mov	r0, r7
 80009c0:	9102      	str	r1, [sp, #8]
 80009c2:	9401      	str	r4, [sp, #4]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4613      	mov	r3, r2
 80009c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <main+0x138>)
 80009ca:	2164      	movs	r1, #100	@ 0x64
 80009cc:	f004 fa1e 	bl	8004e0c <sniprintf>

	    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80009d0:	463b      	mov	r3, r7
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fbfc 	bl	80001d0 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4639      	mov	r1, r7
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <main+0x13c>)
 80009e4:	f003 fe56 	bl	8004694 <HAL_UART_Transmit>
	    HAL_Delay(300);
 80009e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009ec:	f000 fd52 	bl	8001494 <HAL_Delay>
  {
 80009f0:	e786      	b.n	8000900 <main+0x34>
 80009f2:	bf00      	nop
 80009f4:	40020000 	.word	0x40020000
 80009f8:	20000264 	.word	0x20000264
 80009fc:	20000084 	.word	0x20000084
 8000a00:	20000098 	.word	0x20000098
 8000a04:	0800578c 	.word	0x0800578c
 8000a08:	2000021c 	.word	0x2000021c

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	@ 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	2230      	movs	r2, #48	@ 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fa2c 	bl	8004e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <SystemClock_Config+0xcc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	4a27      	ldr	r2, [pc, #156]	@ (8000ad8 <SystemClock_Config+0xcc>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <SystemClock_Config+0xd0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a21      	ldr	r2, [pc, #132]	@ (8000adc <SystemClock_Config+0xd0>)
 8000a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a70:	2310      	movs	r3, #16
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a80:	23a8      	movs	r3, #168	@ 0xa8
 8000a82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f9f1 	bl	8002e78 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a9c:	f000 fa4c 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2105      	movs	r1, #5
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fc52 	bl	8003368 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aca:	f000 fa35 	bl	8000f38 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3750      	adds	r7, #80	@ 0x50
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000af2:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000af4:	4a28      	ldr	r2, [pc, #160]	@ (8000b98 <MX_ADC1_Init+0xb8>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af8:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000afa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000afe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b12:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <MX_ADC1_Init+0xbc>)
 8000b24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b40:	4814      	ldr	r0, [pc, #80]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b42:	f000 fccb 	bl	80014dc <HAL_ADC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b4c:	f000 f9f4 	bl	8000f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b62:	f001 f829 	bl	8001bb8 <HAL_ADC_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b6c:	f000 f9e4 	bl	8000f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_ADC1_Init+0xb4>)
 8000b7e:	f001 f81b 	bl	8001bb8 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b88:	f000 f9d6 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000009c 	.word	0x2000009c
 8000b98:	40012000 	.word	0x40012000
 8000b9c:	0f000001 	.word	0x0f000001

08000ba0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000bb2:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bb4:	4a28      	ldr	r2, [pc, #160]	@ (8000c58 <MX_ADC2_Init+0xb8>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bbe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc0:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000be2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c5c <MX_ADC2_Init+0xbc>)
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000c02:	f000 fc6b 	bl	80014dc <HAL_ADC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f000 f994 	bl	8000f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000c22:	f000 ffc9 	bl	8001bb8 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000c2c:	f000 f984 	bl	8000f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c30:	2305      	movs	r3, #5
 8000c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_ADC2_Init+0xb4>)
 8000c3e:	f000 ffbb 	bl	8001bb8 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000c48:	f000 f976 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200000e4 	.word	0x200000e4
 8000c58:	40012100 	.word	0x40012100
 8000c5c:	0f000001 	.word	0x0f000001

08000c60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	@ 0x38
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c90:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000c92:	4a2d      	ldr	r2, [pc, #180]	@ (8000d48 <MX_TIM3_Init+0xe8>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000c96:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000c98:	2253      	movs	r2, #83	@ 0x53
 8000c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000ca2:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000ca4:	2231      	movs	r2, #49	@ 0x31
 8000ca6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb4:	4823      	ldr	r0, [pc, #140]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000cb6:	f002 fd37 	bl	8003728 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000cc0:	f000 f93a 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481c      	ldr	r0, [pc, #112]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000cd2:	f003 f835 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000cdc:	f000 f92c 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce0:	4818      	ldr	r0, [pc, #96]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000ce2:	f002 fdd9 	bl	8003898 <HAL_TIM_PWM_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000cec:	f000 f924 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000d00:	f003 fbfc 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000d0a:	f000 f915 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0e:	2360      	movs	r3, #96	@ 0x60
 8000d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000d26:	f002 ff49 	bl	8003bbc <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000d30:	f000 f902 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <MX_TIM3_Init+0xe4>)
 8000d36:	f000 fa0d 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	@ 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000018c 	.word	0x2000018c
 8000d48:	40000400 	.word	0x40000400

08000d4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <MX_TIM4_Init+0x98>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000d70:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d90:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000d92:	f002 fcc9 	bl	8003728 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d9c:	f000 f8cc 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000dae:	f002 ffc7 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000db8:	f000 f8be 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_TIM4_Init+0x94>)
 8000dca:	f003 fb97 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 f8b0 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001d4 	.word	0x200001d4
 8000de4:	40000800 	.word	0x40000800

08000de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <MX_USART2_UART_Init+0x50>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e20:	f003 fbe8 	bl	80045f4 <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e2a:	f000 f885 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000021c 	.word	0x2000021c
 8000e38:	40004400 	.word	0x40004400

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_DMA_Init+0x3c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <MX_DMA_Init+0x3c>)
 8000e4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_DMA_Init+0x3c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	203c      	movs	r0, #60	@ 0x3c
 8000e64:	f001 fa23 	bl	80022ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e68:	203c      	movs	r0, #60	@ 0x3c
 8000e6a:	f001 fa3c 	bl	80022e6 <HAL_NVIC_EnableIRQ>

}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <MX_GPIO_Init+0xb4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a25      	ldr	r2, [pc, #148]	@ (8000f30 <MX_GPIO_Init+0xb4>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <MX_GPIO_Init+0xb4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <MX_GPIO_Init+0xb4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f30 <MX_GPIO_Init+0xb4>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_GPIO_Init+0xb4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ed0:	4818      	ldr	r0, [pc, #96]	@ (8000f34 <MX_GPIO_Init+0xb8>)
 8000ed2:	f001 ffb7 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <MX_GPIO_Init+0xb8>)
 8000ef0:	f001 fdf4 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <MX_GPIO_Init+0xb8>)
 8000f0a:	f001 fde7 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_GPIO_Init+0xb8>)
 8000f24:	f001 fdda 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <Error_Handler+0x8>

08000f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a46      	ldr	r2, [pc, #280]	@ (80010cc <HAL_ADC_MspInit+0x138>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d159      	bne.n	800106a <HAL_ADC_MspInit+0xd6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	4b45      	ldr	r3, [pc, #276]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a44      	ldr	r2, [pc, #272]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b42      	ldr	r3, [pc, #264]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a3d      	ldr	r2, [pc, #244]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4834      	ldr	r0, [pc, #208]	@ (80010d4 <HAL_ADC_MspInit+0x140>)
 8001002:	f001 fd6b 	bl	8002adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001006:	4b34      	ldr	r3, [pc, #208]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001008:	4a34      	ldr	r2, [pc, #208]	@ (80010dc <HAL_ADC_MspInit+0x148>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800100c:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001012:	4b31      	ldr	r3, [pc, #196]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001018:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	4b2e      	ldr	r3, [pc, #184]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001020:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001024:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001026:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001028:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800102c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800102e:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001030:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001034:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001036:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001038:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800103c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001040:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001044:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800104c:	4822      	ldr	r0, [pc, #136]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 800104e:	f001 f965 	bl	800231c <HAL_DMA_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001058:	f7ff ff6e 	bl	8000f38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1e      	ldr	r2, [pc, #120]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001060:	639a      	str	r2, [r3, #56]	@ 0x38
 8001062:	4a1d      	ldr	r2, [pc, #116]	@ (80010d8 <HAL_ADC_MspInit+0x144>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001068:	e02c      	b.n	80010c4 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1c      	ldr	r2, [pc, #112]	@ (80010e0 <HAL_ADC_MspInit+0x14c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d127      	bne.n	80010c4 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107c:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001082:	6453      	str	r3, [r2, #68]	@ 0x44
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8001086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <HAL_ADC_MspInit+0x13c>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010ac:	2330      	movs	r3, #48	@ 0x30
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_ADC_MspInit+0x140>)
 80010c0:	f001 fd0c 	bl	8002adc <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3730      	adds	r7, #48	@ 0x30
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40012000 	.word	0x40012000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	2000012c 	.word	0x2000012c
 80010dc:	40026470 	.word	0x40026470
 80010e0:	40012100 	.word	0x40012100

080010e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a15      	ldr	r2, [pc, #84]	@ (8001148 <HAL_TIM_Base_MspInit+0x64>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10e      	bne.n	8001114 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_TIM_Base_MspInit+0x68>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <HAL_TIM_Base_MspInit+0x68>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_TIM_Base_MspInit+0x68>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001112:	e012      	b.n	800113a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_TIM_Base_MspInit+0x6c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10d      	bne.n	800113a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_TIM_Base_MspInit+0x68>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	4a09      	ldr	r2, [pc, #36]	@ (800114c <HAL_TIM_Base_MspInit+0x68>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6413      	str	r3, [r2, #64]	@ 0x40
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <HAL_TIM_Base_MspInit+0x68>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40000400 	.word	0x40000400
 800114c:	40023800 	.word	0x40023800
 8001150:	40000800 	.word	0x40000800

08001154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <HAL_TIM_MspPostInit+0x68>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d11d      	bne.n	80011b2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_TIM_MspPostInit+0x6c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_TIM_MspPostInit+0x6c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_TIM_MspPostInit+0x6c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001192:	2340      	movs	r3, #64	@ 0x40
 8001194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_TIM_MspPostInit+0x70>)
 80011ae:	f001 fc95 	bl	8002adc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40000400 	.word	0x40000400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	@ (800124c <HAL_UART_MspInit+0x84>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12b      	bne.n	8001242 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_UART_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <HAL_UART_MspInit+0x88>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_UART_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_UART_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a10      	ldr	r2, [pc, #64]	@ (8001250 <HAL_UART_MspInit+0x88>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_UART_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001222:	230c      	movs	r3, #12
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001232:	2307      	movs	r3, #7
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_UART_MspInit+0x8c>)
 800123e:	f001 fc4d 	bl	8002adc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40004400 	.word	0x40004400
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <NMI_Handler+0x4>

08001260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <MemManage_Handler+0x4>

08001270 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <UsageFault_Handler+0x4>

08001280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ae:	f000 f8d1 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <DMA2_Stream4_IRQHandler+0x10>)
 80012be:	f001 f9a3 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000012c 	.word	0x2000012c

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f003 fdc4 	bl	8004e88 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20020000 	.word	0x20020000
 800132c:	00000400 	.word	0x00000400
 8001330:	20000268 	.word	0x20000268
 8001334:	200003b8 	.word	0x200003b8

08001338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001360:	f7ff ffea 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f003 fd83 	bl	8004e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fa9d 	bl	80008cc <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013a0:	08005814 	.word	0x08005814
  ldr r2, =_sbss
 80013a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013a8:	200003b8 	.word	0x200003b8

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 ff5d 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fdae 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 ff75 	bl	8002302 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 ff3d 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000000c 	.word	0x2000000c
 800144c:	20000014 	.word	0x20000014
 8001450:	20000010 	.word	0x20000010

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000014 	.word	0x20000014
 8001478:	2000026c 	.word	0x2000026c

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000026c 	.word	0x2000026c

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000014 	.word	0x20000014

080014dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e033      	b.n	800155a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fd4a 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001522:	f023 0302 	bic.w	r3, r3, #2
 8001526:	f043 0202 	orr.w	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fc64 	bl	8001dfc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40
 800154a:	e001      	b.n	8001550 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_Start+0x1a>
 800157a:	2302      	movs	r3, #2
 800157c:	e0b2      	b.n	80016e4 <HAL_ADC_Start+0x180>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d018      	beq.n	80015c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a4:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <HAL_ADC_Start+0x18c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a52      	ldr	r2, [pc, #328]	@ (80016f4 <HAL_ADC_Start+0x190>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9a      	lsrs	r2, r3, #18
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d17a      	bne.n	80016ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001612:	d106      	bne.n	8001622 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001618:	f023 0206 	bic.w	r2, r3, #6
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001620:	e002      	b.n	8001628 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001630:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <HAL_ADC_Start+0x194>)
 8001632:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800163c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	2b00      	cmp	r3, #0
 8001648:	d12a      	bne.n	80016a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a2b      	ldr	r2, [pc, #172]	@ (80016fc <HAL_ADC_Start+0x198>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d015      	beq.n	8001680 <HAL_ADC_Start+0x11c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <HAL_ADC_Start+0x19c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d105      	bne.n	800166a <HAL_ADC_Start+0x106>
 800165e:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <HAL_ADC_Start+0x194>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00a      	beq.n	8001680 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a25      	ldr	r2, [pc, #148]	@ (8001704 <HAL_ADC_Start+0x1a0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d136      	bne.n	80016e2 <HAL_ADC_Start+0x17e>
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_ADC_Start+0x194>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d130      	bne.n	80016e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d129      	bne.n	80016e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	e020      	b.n	80016e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a15      	ldr	r2, [pc, #84]	@ (80016fc <HAL_ADC_Start+0x198>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d11b      	bne.n	80016e2 <HAL_ADC_Start+0x17e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d114      	bne.n	80016e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e00b      	b.n	80016e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	40012300 	.word	0x40012300
 80016fc:	40012000 	.word	0x40012000
 8001700:	40012100 	.word	0x40012100
 8001704:	40012200 	.word	0x40012200

08001708 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADC_Stop+0x16>
 800171a:	2302      	movs	r3, #2
 800171c:	e021      	b.n	8001762 <HAL_ADC_Stop+0x5a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178a:	d113      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800179a:	d10b      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e063      	b.n	800187c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff fe62 	bl	800147c <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017ba:	e021      	b.n	8001800 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c2:	d01d      	beq.n	8001800 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_ADC_PollForConversion+0x6c>
 80017ca:	f7ff fe57 	bl	800147c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d212      	bcs.n	8001800 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d00b      	beq.n	8001800 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f043 0204 	orr.w	r2, r3, #4
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e03d      	b.n	800187c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d1d6      	bne.n	80017bc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f06f 0212 	mvn.w	r2, #18
 8001816:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d123      	bne.n	800187a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001836:	2b00      	cmp	r3, #0
 8001838:	d11f      	bne.n	800187a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001852:	2b00      	cmp	r3, #0
 8001854:	d111      	bne.n	800187a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Start_DMA+0x22>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0eb      	b.n	8001a7e <HAL_ADC_Start_DMA+0x1fa>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d018      	beq.n	80018ee <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001a88 <HAL_ADC_Start_DMA+0x204>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a8c <HAL_ADC_Start_DMA+0x208>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9a      	lsrs	r2, r3, #18
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018fc:	d107      	bne.n	800190e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800190c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	f040 80a3 	bne.w	8001a64 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001948:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800195c:	d106      	bne.n	800196c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f023 0206 	bic.w	r2, r3, #6
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	645a      	str	r2, [r3, #68]	@ 0x44
 800196a:	e002      	b.n	8001972 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800197a:	4b45      	ldr	r3, [pc, #276]	@ (8001a90 <HAL_ADC_Start_DMA+0x20c>)
 800197c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001982:	4a44      	ldr	r2, [pc, #272]	@ (8001a94 <HAL_ADC_Start_DMA+0x210>)
 8001984:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800198a:	4a43      	ldr	r2, [pc, #268]	@ (8001a98 <HAL_ADC_Start_DMA+0x214>)
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001992:	4a42      	ldr	r2, [pc, #264]	@ (8001a9c <HAL_ADC_Start_DMA+0x218>)
 8001994:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800199e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80019ae:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019be:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	334c      	adds	r3, #76	@ 0x4c
 80019ca:	4619      	mov	r1, r3
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f000 fd52 	bl	8002478 <HAL_DMA_Start_IT>
 80019d4:	4603      	mov	r3, r0
 80019d6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d12a      	bne.n	8001a3a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa0 <HAL_ADC_Start_DMA+0x21c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d015      	beq.n	8001a1a <HAL_ADC_Start_DMA+0x196>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa4 <HAL_ADC_Start_DMA+0x220>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_Start_DMA+0x180>
 80019f8:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <HAL_ADC_Start_DMA+0x20c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a27      	ldr	r2, [pc, #156]	@ (8001aa8 <HAL_ADC_Start_DMA+0x224>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d136      	bne.n	8001a7c <HAL_ADC_Start_DMA+0x1f8>
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <HAL_ADC_Start_DMA+0x20c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d130      	bne.n	8001a7c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d129      	bne.n	8001a7c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	e020      	b.n	8001a7c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <HAL_ADC_Start_DMA+0x21c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d11b      	bne.n	8001a7c <HAL_ADC_Start_DMA+0x1f8>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d114      	bne.n	8001a7c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	e00b      	b.n	8001a7c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	f043 0210 	orr.w	r2, r3, #16
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001a7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	431bde83 	.word	0x431bde83
 8001a90:	40012300 	.word	0x40012300
 8001a94:	08001ff5 	.word	0x08001ff5
 8001a98:	080020af 	.word	0x080020af
 8001a9c:	080020cb 	.word	0x080020cb
 8001aa0:	40012000 	.word	0x40012000
 8001aa4:	40012100 	.word	0x40012100
 8001aa8:	40012200 	.word	0x40012200

08001aac <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Stop_DMA+0x1a>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e048      	b.n	8001b58 <HAL_ADC_Stop_DMA+0xac>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d130      	bne.n	8001b4e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001afa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d10f      	bne.n	8001b2a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fd0a 	bl	8002528 <HAL_DMA_Abort>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001b38:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x1c>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e105      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x228>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	d925      	bls.n	8001c30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68d9      	ldr	r1, [r3, #12]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b1e      	subs	r3, #30
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43da      	mvns	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	400a      	ands	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68d9      	ldr	r1, [r3, #12]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4403      	add	r3, r0
 8001c22:	3b1e      	subs	r3, #30
 8001c24:	409a      	lsls	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	e022      	b.n	8001c76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6919      	ldr	r1, [r3, #16]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	2207      	movs	r2, #7
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	400a      	ands	r2, r1
 8001c52:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6919      	ldr	r1, [r3, #16]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	4603      	mov	r3, r0
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4403      	add	r3, r0
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d824      	bhi.n	8001cc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b05      	subs	r3, #5
 8001c90:	221f      	movs	r2, #31
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b05      	subs	r3, #5
 8001cba:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cc6:	e04c      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d824      	bhi.n	8001d1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b23      	subs	r3, #35	@ 0x23
 8001ce2:	221f      	movs	r2, #31
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	400a      	ands	r2, r1
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b23      	subs	r3, #35	@ 0x23
 8001d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d18:	e023      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b41      	subs	r3, #65	@ 0x41
 8001d2c:	221f      	movs	r2, #31
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	400a      	ands	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b41      	subs	r3, #65	@ 0x41
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d62:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <HAL_ADC_ConfigChannel+0x234>)
 8001d64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a21      	ldr	r2, [pc, #132]	@ (8001df0 <HAL_ADC_ConfigChannel+0x238>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d109      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1cc>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b12      	cmp	r3, #18
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a19      	ldr	r2, [pc, #100]	@ (8001df0 <HAL_ADC_ConfigChannel+0x238>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d123      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x21e>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d003      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x1e6>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d111      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <HAL_ADC_ConfigChannel+0x23c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_ADC_ConfigChannel+0x240>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	0c9a      	lsrs	r2, r3, #18
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f9      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40012300 	.word	0x40012300
 8001df0:	40012000 	.word	0x40012000
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	431bde83 	.word	0x431bde83

08001dfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e04:	4b79      	ldr	r3, [pc, #484]	@ (8001fec <ADC_Init+0x1f0>)
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	021a      	lsls	r2, r3, #8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	4a58      	ldr	r2, [pc, #352]	@ (8001ff0 <ADC_Init+0x1f4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d022      	beq.n	8001eda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ea2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6899      	ldr	r1, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	e00f      	b.n	8001efa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ef8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0202 	bic.w	r2, r2, #2
 8001f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7e1b      	ldrb	r3, [r3, #24]
 8001f14:	005a      	lsls	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	3b01      	subs	r3, #1
 8001f54:	035a      	lsls	r2, r3, #13
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	e007      	b.n	8001f70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	051a      	lsls	r2, r3, #20
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fb2:	025a      	lsls	r2, r3, #9
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6899      	ldr	r1, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	029a      	lsls	r2, r3, #10
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40012300 	.word	0x40012300
 8001ff0:	0f000001 	.word	0x0f000001

08001ff4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002000:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800200a:	2b00      	cmp	r3, #0
 800200c:	d13c      	bne.n	8002088 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12b      	bne.n	8002080 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202c:	2b00      	cmp	r3, #0
 800202e:	d127      	bne.n	8002080 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002048:	2b00      	cmp	r3, #0
 800204a:	d119      	bne.n	8002080 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0220 	bic.w	r2, r2, #32
 800205a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fd7a 	bl	8001b7a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002086:	e00e      	b.n	80020a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff fd84 	bl	8001ba2 <HAL_ADC_ErrorCallback>
}
 800209a:	e004      	b.n	80020a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fd66 	bl	8001b8e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2240      	movs	r2, #64	@ 0x40
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f043 0204 	orr.w	r2, r3, #4
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff fd59 	bl	8001ba2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4907      	ldr	r1, [pc, #28]	@ (8002194 <__NVIC_EnableIRQ+0x38>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	@ (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	@ (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	@ 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
         );
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	@ 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f7ff ff8e 	bl	8002198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff29 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff3e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff8e 	bl	80021ec <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5d 	bl	8002198 <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff31 	bl	800215c <__NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffa2 	bl	8002254 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff f8a8 	bl	800147c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e099      	b.n	800246c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002358:	e00f      	b.n	800237a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800235a:	f7ff f88f 	bl	800147c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b05      	cmp	r3, #5
 8002366:	d908      	bls.n	800237a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e078      	b.n	800246c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e8      	bne.n	800235a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <HAL_DMA_Init+0x158>)
 8002394:	4013      	ands	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d107      	bne.n	80023e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	4313      	orrs	r3, r2
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f023 0307 	bic.w	r3, r3, #7
 80023fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	2b04      	cmp	r3, #4
 800240c:	d117      	bne.n	800243e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00e      	beq.n	800243e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fadf 	bl	80029e4 <DMA_CheckFifoParam>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2240      	movs	r2, #64	@ 0x40
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800243a:	2301      	movs	r3, #1
 800243c:	e016      	b.n	800246c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa96 	bl	8002978 <DMA_CalcBaseAndBitshift>
 800244c:	4603      	mov	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	223f      	movs	r2, #63	@ 0x3f
 8002456:	409a      	lsls	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	f010803f 	.word	0xf010803f

08002478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_DMA_Start_IT+0x26>
 800249a:	2302      	movs	r3, #2
 800249c:	e040      	b.n	8002520 <HAL_DMA_Start_IT+0xa8>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d12f      	bne.n	8002512 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fa28 	bl	800291c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	223f      	movs	r2, #63	@ 0x3f
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0216 	orr.w	r2, r2, #22
 80024e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0208 	orr.w	r2, r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e005      	b.n	800251e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002536:	f7fe ffa1 	bl	800147c <HAL_GetTick>
 800253a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d008      	beq.n	800255a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2280      	movs	r2, #128	@ 0x80
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e052      	b.n	8002600 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0216 	bic.w	r2, r2, #22
 8002568:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002578:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <HAL_DMA_Abort+0x62>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0208 	bic.w	r2, r2, #8
 8002598:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025aa:	e013      	b.n	80025d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ac:	f7fe ff66 	bl	800147c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d90c      	bls.n	80025d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2203      	movs	r2, #3
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e015      	b.n	8002600 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1e4      	bne.n	80025ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	223f      	movs	r2, #63	@ 0x3f
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002614:	4b8e      	ldr	r3, [pc, #568]	@ (8002850 <HAL_DMA_IRQHandler+0x248>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a8e      	ldr	r2, [pc, #568]	@ (8002854 <HAL_DMA_IRQHandler+0x24c>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0a9b      	lsrs	r3, r3, #10
 8002620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	2208      	movs	r2, #8
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01a      	beq.n	8002674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	2208      	movs	r2, #8
 8002662:	409a      	lsls	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	2201      	movs	r2, #1
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2204      	movs	r2, #4
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d012      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2204      	movs	r2, #4
 80026ce:	409a      	lsls	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	f043 0204 	orr.w	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	2210      	movs	r2, #16
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d043      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03c      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	2210      	movs	r2, #16
 8002704:	409a      	lsls	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d018      	beq.n	800274a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d108      	bne.n	8002738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d024      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
 8002736:	e01f      	b.n	8002778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01b      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
 8002748:	e016      	b.n	8002778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0208 	bic.w	r2, r2, #8
 8002766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	2220      	movs	r2, #32
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 808f 	beq.w	80028a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8087 	beq.w	80028a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	2220      	movs	r2, #32
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d136      	bne.n	8002820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0216 	bic.w	r2, r2, #22
 80027c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x1da>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	223f      	movs	r2, #63	@ 0x3f
 80027f8:	409a      	lsls	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002812:	2b00      	cmp	r3, #0
 8002814:	d07e      	beq.n	8002914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
        }
        return;
 800281e:	e079      	b.n	8002914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01d      	beq.n	800286a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	2b00      	cmp	r3, #0
 8002842:	d031      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e02c      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
 800284e:	bf00      	nop
 8002850:	2000000c 	.word	0x2000000c
 8002854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d023      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e01e      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10f      	bne.n	8002898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0210 	bic.w	r2, r2, #16
 8002886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d032      	beq.n	8002916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d022      	beq.n	8002902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2205      	movs	r2, #5
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3301      	adds	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d307      	bcc.n	80028f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f2      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x2cc>
 80028ee:	e000      	b.n	80028f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
 8002912:	e000      	b.n	8002916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002914:	bf00      	nop
    }
  }
}
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002938:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b40      	cmp	r3, #64	@ 0x40
 8002948:	d108      	bne.n	800295c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800295a:	e007      	b.n	800296c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3b10      	subs	r3, #16
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <DMA_CalcBaseAndBitshift+0x64>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002992:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d909      	bls.n	80029ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	1d1a      	adds	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b8:	e007      	b.n	80029ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	aaaaaaab 	.word	0xaaaaaaab
 80029e0:	080057c8 	.word	0x080057c8

080029e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d11f      	bne.n	8002a3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d856      	bhi.n	8002ab2 <DMA_CheckFifoParam+0xce>
 8002a04:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <DMA_CheckFifoParam+0x28>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a2f 	.word	0x08002a2f
 8002a14:	08002a1d 	.word	0x08002a1d
 8002a18:	08002ab3 	.word	0x08002ab3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d046      	beq.n	8002ab6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2c:	e043      	b.n	8002ab6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a36:	d140      	bne.n	8002aba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e03d      	b.n	8002aba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a46:	d121      	bne.n	8002a8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d837      	bhi.n	8002abe <DMA_CheckFifoParam+0xda>
 8002a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <DMA_CheckFifoParam+0x70>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a6b 	.word	0x08002a6b
 8002a5c:	08002a65 	.word	0x08002a65
 8002a60:	08002a7d 	.word	0x08002a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      break;
 8002a68:	e030      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d025      	beq.n	8002ac2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7a:	e022      	b.n	8002ac2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a84:	d11f      	bne.n	8002ac6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a8a:	e01c      	b.n	8002ac6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d903      	bls.n	8002a9a <DMA_CheckFifoParam+0xb6>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d003      	beq.n	8002aa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a98:	e018      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9e:	e015      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00e      	beq.n	8002aca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e00b      	b.n	8002aca <DMA_CheckFifoParam+0xe6>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e00a      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e008      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e006      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e004      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
    }
  } 
  
  return status; 
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	@ 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e16b      	b.n	8002dd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 815a 	bne.w	8002dca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80b4 	beq.w	8002dca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b60      	ldr	r3, [pc, #384]	@ (8002de8 <HAL_GPIO_Init+0x30c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	4a5f      	ldr	r2, [pc, #380]	@ (8002de8 <HAL_GPIO_Init+0x30c>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c72:	4b5d      	ldr	r3, [pc, #372]	@ (8002de8 <HAL_GPIO_Init+0x30c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dec <HAL_GPIO_Init+0x310>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	@ (8002df0 <HAL_GPIO_Init+0x314>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02b      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a51      	ldr	r2, [pc, #324]	@ (8002df4 <HAL_GPIO_Init+0x318>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d025      	beq.n	8002cfe <HAL_GPIO_Init+0x222>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a50      	ldr	r2, [pc, #320]	@ (8002df8 <HAL_GPIO_Init+0x31c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <HAL_GPIO_Init+0x21e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8002dfc <HAL_GPIO_Init+0x320>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x216>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	@ (8002e04 <HAL_GPIO_Init+0x328>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x212>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002e08 <HAL_GPIO_Init+0x32c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x20e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8002e0c <HAL_GPIO_Init+0x330>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x20a>
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	e00e      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	e00c      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cea:	2306      	movs	r3, #6
 8002cec:	e00a      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	@ (8002dec <HAL_GPIO_Init+0x310>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b3b      	ldr	r3, [pc, #236]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a32      	ldr	r2, [pc, #200]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b30      	ldr	r3, [pc, #192]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a27      	ldr	r2, [pc, #156]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b26      	ldr	r3, [pc, #152]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a12      	ldr	r2, [pc, #72]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f ae90 	bls.w	8002af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	@ 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40021c00 	.word	0x40021c00
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e001      	b.n	8002e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e267      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d075      	beq.n	8002f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e96:	4b88      	ldr	r3, [pc, #544]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d00c      	beq.n	8002ebc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b85      	ldr	r3, [pc, #532]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d112      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eae:	4b82      	ldr	r3, [pc, #520]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eba:	d10b      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d05b      	beq.n	8002f80 <HAL_RCC_OscConfig+0x108>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d157      	bne.n	8002f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e242      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002edc:	d106      	bne.n	8002eec <HAL_RCC_OscConfig+0x74>
 8002ede:	4b76      	ldr	r3, [pc, #472]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a75      	ldr	r2, [pc, #468]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e01d      	b.n	8002f28 <HAL_RCC_OscConfig+0xb0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x98>
 8002ef6:	4b70      	ldr	r3, [pc, #448]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6f      	ldr	r2, [pc, #444]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b6d      	ldr	r3, [pc, #436]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6c      	ldr	r2, [pc, #432]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0xb0>
 8002f10:	4b69      	ldr	r3, [pc, #420]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a68      	ldr	r2, [pc, #416]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b66      	ldr	r3, [pc, #408]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a65      	ldr	r2, [pc, #404]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe faa4 	bl	800147c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe faa0 	bl	800147c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	@ 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e207      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0xc0>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe fa90 	bl	800147c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe fa8c 	bl	800147c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	@ 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e1f3      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	4b51      	ldr	r3, [pc, #324]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0xe8>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d063      	beq.n	8003056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b47      	ldr	r3, [pc, #284]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b44      	ldr	r3, [pc, #272]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d116      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	4b41      	ldr	r3, [pc, #260]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x152>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e1c7      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fca:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4937      	ldr	r1, [pc, #220]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	e03a      	b.n	8003056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe8:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe fa45 	bl	800147c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fe fa41 	bl	800147c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1a8      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	4b2b      	ldr	r3, [pc, #172]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4b28      	ldr	r3, [pc, #160]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4925      	ldr	r1, [pc, #148]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
 8003028:	e015      	b.n	8003056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fa24 	bl	800147c <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003038:	f7fe fa20 	bl	800147c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e187      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d036      	beq.n	80030d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <HAL_RCC_OscConfig+0x248>)
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fa04 	bl	800147c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003078:	f7fe fa00 	bl	800147c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e167      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x200>
 8003096:	e01b      	b.n	80030d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_OscConfig+0x248>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7fe f9ed 	bl	800147c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	e00e      	b.n	80030c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a6:	f7fe f9e9 	bl	800147c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d907      	bls.n	80030c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e150      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
 80030b8:	40023800 	.word	0x40023800
 80030bc:	42470000 	.word	0x42470000
 80030c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	4b88      	ldr	r3, [pc, #544]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ea      	bne.n	80030a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8097 	beq.w	800320c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b81      	ldr	r3, [pc, #516]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	4b7d      	ldr	r3, [pc, #500]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	4a7c      	ldr	r2, [pc, #496]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fe:	4b7a      	ldr	r3, [pc, #488]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b77      	ldr	r3, [pc, #476]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b74      	ldr	r3, [pc, #464]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a73      	ldr	r2, [pc, #460]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fe f9a9 	bl	800147c <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe f9a5 	bl	800147c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e10c      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b6a      	ldr	r3, [pc, #424]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x2ea>
 8003154:	4b64      	ldr	r3, [pc, #400]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003158:	4a63      	ldr	r2, [pc, #396]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003160:	e01c      	b.n	800319c <HAL_RCC_OscConfig+0x324>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x30c>
 800316a:	4b5f      	ldr	r3, [pc, #380]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	4a5e      	ldr	r2, [pc, #376]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	6713      	str	r3, [r2, #112]	@ 0x70
 8003176:	4b5c      	ldr	r3, [pc, #368]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	4a5b      	ldr	r2, [pc, #364]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6713      	str	r3, [r2, #112]	@ 0x70
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0x324>
 8003184:	4b58      	ldr	r3, [pc, #352]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	4a57      	ldr	r2, [pc, #348]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003190:	4b55      	ldr	r3, [pc, #340]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003194:	4a54      	ldr	r2, [pc, #336]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d015      	beq.n	80031d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe f96a 	bl	800147c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fe f966 	bl	800147c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0cb      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c2:	4b49      	ldr	r3, [pc, #292]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0ee      	beq.n	80031ac <HAL_RCC_OscConfig+0x334>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d0:	f7fe f954 	bl	800147c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fe f950 	bl	800147c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0b5      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ee:	4b3e      	ldr	r3, [pc, #248]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ee      	bne.n	80031d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	4a38      	ldr	r2, [pc, #224]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a1 	beq.w	8003358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b08      	cmp	r3, #8
 8003220:	d05c      	beq.n	80032dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d141      	bne.n	80032ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <HAL_RCC_OscConfig+0x478>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe f924 	bl	800147c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe f920 	bl	800147c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e087      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	019b      	lsls	r3, r3, #6
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	3b01      	subs	r3, #1
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	491b      	ldr	r1, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003280:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_RCC_OscConfig+0x478>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fe f8f9 	bl	800147c <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328e:	f7fe f8f5 	bl	800147c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e05c      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x416>
 80032ac:	e054      	b.n	8003358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCC_OscConfig+0x478>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe f8e2 	bl	800147c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe f8de 	bl	800147c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e045      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x444>
 80032da:	e03d      	b.n	8003358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e038      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <HAL_RCC_OscConfig+0x4ec>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d028      	beq.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d121      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d11a      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800332c:	4293      	cmp	r3, r2
 800332e:	d111      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	3b01      	subs	r3, #1
 800333e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800

08003368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0cc      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800337c:	4b68      	ldr	r3, [pc, #416]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d90c      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b65      	ldr	r3, [pc, #404]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b63      	ldr	r3, [pc, #396]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0b8      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033bc:	4b59      	ldr	r3, [pc, #356]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a58      	ldr	r2, [pc, #352]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d4:	4b53      	ldr	r3, [pc, #332]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a52      	ldr	r2, [pc, #328]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	4b50      	ldr	r3, [pc, #320]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	494d      	ldr	r1, [pc, #308]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d044      	beq.n	8003488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b47      	ldr	r3, [pc, #284]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d119      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d003      	beq.n	8003426 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	2b03      	cmp	r3, #3
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	4b3f      	ldr	r3, [pc, #252]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e06f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e067      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003446:	4b37      	ldr	r3, [pc, #220]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4934      	ldr	r1, [pc, #208]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003458:	f7fe f810 	bl	800147c <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	e00a      	b.n	8003476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fe f80c 	bl	800147c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e04f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 020c 	and.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	429a      	cmp	r2, r3
 8003486:	d1eb      	bne.n	8003460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d20c      	bcs.n	80034b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b22      	ldr	r3, [pc, #136]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e032      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034bc:	4b19      	ldr	r3, [pc, #100]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4916      	ldr	r1, [pc, #88]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034da:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	490e      	ldr	r1, [pc, #56]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ee:	f000 f821 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034f2:	4602      	mov	r2, r0
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	490a      	ldr	r1, [pc, #40]	@ (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	5ccb      	ldrb	r3, [r1, r3]
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	4a09      	ldr	r2, [pc, #36]	@ (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd ff70 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023c00 	.word	0x40023c00
 8003524:	40023800 	.word	0x40023800
 8003528:	080057b0 	.word	0x080057b0
 800352c:	2000000c 	.word	0x2000000c
 8003530:	20000010 	.word	0x20000010

08003534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003538:	b090      	sub	sp, #64	@ 0x40
 800353a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800354c:	4b59      	ldr	r3, [pc, #356]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d00d      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x40>
 8003558:	2b08      	cmp	r3, #8
 800355a:	f200 80a1 	bhi.w	80036a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x34>
 8003562:	2b04      	cmp	r3, #4
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x3a>
 8003566:	e09b      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003568:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800356a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800356c:	e09b      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800356e:	4b53      	ldr	r3, [pc, #332]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x188>)
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003572:	e098      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003574:	4b4f      	ldr	r3, [pc, #316]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800357c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800357e:	4b4d      	ldr	r3, [pc, #308]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d028      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358a:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	2200      	movs	r2, #0
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	627a      	str	r2, [r7, #36]	@ 0x24
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800359c:	2100      	movs	r1, #0
 800359e:	4b47      	ldr	r3, [pc, #284]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x188>)
 80035a0:	fb03 f201 	mul.w	r2, r3, r1
 80035a4:	2300      	movs	r3, #0
 80035a6:	fb00 f303 	mul.w	r3, r0, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	4a43      	ldr	r2, [pc, #268]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x188>)
 80035ae:	fba0 1202 	umull	r1, r2, r0, r2
 80035b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035b4:	460a      	mov	r2, r1
 80035b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ba:	4413      	add	r3, r2
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	2200      	movs	r2, #0
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	61fa      	str	r2, [r7, #28]
 80035c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035ce:	f7fc fe57 	bl	8000280 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4613      	mov	r3, r2
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035da:	e053      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035dc:	4b35      	ldr	r3, [pc, #212]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	2200      	movs	r2, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	617a      	str	r2, [r7, #20]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ee:	f04f 0b00 	mov.w	fp, #0
 80035f2:	4652      	mov	r2, sl
 80035f4:	465b      	mov	r3, fp
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003604:	0150      	lsls	r0, r2, #5
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	ebb2 080a 	subs.w	r8, r2, sl
 800360e:	eb63 090b 	sbc.w	r9, r3, fp
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800361e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003622:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003626:	ebb2 0408 	subs.w	r4, r2, r8
 800362a:	eb63 0509 	sbc.w	r5, r3, r9
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	00eb      	lsls	r3, r5, #3
 8003638:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800363c:	00e2      	lsls	r2, r4, #3
 800363e:	4614      	mov	r4, r2
 8003640:	461d      	mov	r5, r3
 8003642:	eb14 030a 	adds.w	r3, r4, sl
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	eb45 030b 	adc.w	r3, r5, fp
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800365a:	4629      	mov	r1, r5
 800365c:	028b      	lsls	r3, r1, #10
 800365e:	4621      	mov	r1, r4
 8003660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003664:	4621      	mov	r1, r4
 8003666:	028a      	lsls	r2, r1, #10
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	2200      	movs	r2, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	60fa      	str	r2, [r7, #12]
 8003674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003678:	f7fc fe02 	bl	8000280 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	3301      	adds	r3, #1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003694:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800369e:	e002      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80036a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3740      	adds	r7, #64	@ 0x40
 80036ac:	46bd      	mov	sp, r7
 80036ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	00f42400 	.word	0x00f42400
 80036bc:	017d7840 	.word	0x017d7840

080036c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	2000000c 	.word	0x2000000c

080036d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036dc:	f7ff fff0 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0a9b      	lsrs	r3, r3, #10
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4903      	ldr	r1, [pc, #12]	@ (80036fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	080057c0 	.word	0x080057c0

08003700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003704:	f7ff ffdc 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0b5b      	lsrs	r3, r3, #13
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	@ (8003724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	080057c0 	.word	0x080057c0

08003728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e041      	b.n	80037be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fcc8 	bl	80010e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f000 fbb2 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e046      	b.n	800386e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a23      	ldr	r2, [pc, #140]	@ (800387c <HAL_TIM_Base_Start+0xb4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d01d      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <HAL_TIM_Base_Start+0xb8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <HAL_TIM_Base_Start+0xbc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1c      	ldr	r2, [pc, #112]	@ (8003888 <HAL_TIM_Base_Start+0xc0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_TIM_Base_Start+0xc4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a19      	ldr	r2, [pc, #100]	@ (8003890 <HAL_TIM_Base_Start+0xc8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_TIM_Base_Start+0xcc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d010      	beq.n	800386c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	e007      	b.n	800386c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40010400 	.word	0x40010400
 8003890:	40014000 	.word	0x40014000
 8003894:	40001800 	.word	0x40001800

08003898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e041      	b.n	800392e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f839 	bl	8003936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 fafa 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_TIM_PWM_Start+0x24>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e022      	b.n	80039b6 <HAL_TIM_PWM_Start+0x6a>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b04      	cmp	r3, #4
 8003974:	d109      	bne.n	800398a <HAL_TIM_PWM_Start+0x3e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e015      	b.n	80039b6 <HAL_TIM_PWM_Start+0x6a>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d109      	bne.n	80039a4 <HAL_TIM_PWM_Start+0x58>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e008      	b.n	80039b6 <HAL_TIM_PWM_Start+0x6a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07c      	b.n	8003ab8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0x82>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039cc:	e013      	b.n	80039f6 <HAL_TIM_PWM_Start+0xaa>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start+0x92>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039dc:	e00b      	b.n	80039f6 <HAL_TIM_PWM_Start+0xaa>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0xa2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ec:	e003      	b.n	80039f6 <HAL_TIM_PWM_Start+0xaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2201      	movs	r2, #1
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd56 	bl	80044b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac0 <HAL_TIM_PWM_Start+0x174>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_TIM_PWM_Start+0xcc>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac4 <HAL_TIM_PWM_Start+0x178>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_TIM_PWM_Start+0xd0>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_TIM_PWM_Start+0xd2>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a22      	ldr	r2, [pc, #136]	@ (8003ac0 <HAL_TIM_PWM_Start+0x174>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d022      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a44:	d01d      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <HAL_TIM_PWM_Start+0x17c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d018      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <HAL_TIM_PWM_Start+0x180>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <HAL_TIM_PWM_Start+0x184>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a16      	ldr	r2, [pc, #88]	@ (8003ac4 <HAL_TIM_PWM_Start+0x178>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_TIM_PWM_Start+0x188>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ad8 <HAL_TIM_PWM_Start+0x18c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d111      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d010      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	e007      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800

08003adc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fcde 	bl	80044b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb4 <HAL_TIM_PWM_Stop+0xd8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_PWM_Stop+0x2c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb8 <HAL_TIM_PWM_Stop+0xdc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_PWM_Stop+0x30>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_TIM_PWM_Stop+0x32>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0x66>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0x66>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_TIM_PWM_Stop+0x96>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_PWM_Stop+0x96>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Stop+0xa6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b80:	e013      	b.n	8003baa <HAL_TIM_PWM_Stop+0xce>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0xb6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b90:	e00b      	b.n	8003baa <HAL_TIM_PWM_Stop+0xce>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0xc6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba0:	e003      	b.n	8003baa <HAL_TIM_PWM_Stop+0xce>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40010400 	.word	0x40010400

08003bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e0ae      	b.n	8003d38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	f200 809f 	bhi.w	8003d28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bea:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003d29 	.word	0x08003d29
 8003bf8:	08003d29 	.word	0x08003d29
 8003bfc:	08003d29 	.word	0x08003d29
 8003c00:	08003c65 	.word	0x08003c65
 8003c04:	08003d29 	.word	0x08003d29
 8003c08:	08003d29 	.word	0x08003d29
 8003c0c:	08003d29 	.word	0x08003d29
 8003c10:	08003ca7 	.word	0x08003ca7
 8003c14:	08003d29 	.word	0x08003d29
 8003c18:	08003d29 	.word	0x08003d29
 8003c1c:	08003d29 	.word	0x08003d29
 8003c20:	08003ce7 	.word	0x08003ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f9f6 	bl	800401c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]
      break;
 8003c62:	e064      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fa46 	bl	80040fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
      break;
 8003ca4:	e043      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fa9b 	bl	80041e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0208 	orr.w	r2, r2, #8
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0204 	bic.w	r2, r2, #4
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	61da      	str	r2, [r3, #28]
      break;
 8003ce4:	e023      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 faef 	bl	80042d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	61da      	str	r2, [r3, #28]
      break;
 8003d26:	e002      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_ConfigClockSource+0x1c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0b4      	b.n	8003ec6 <HAL_TIM_ConfigClockSource+0x186>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d94:	d03e      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0xd4>
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d9a:	f200 8087 	bhi.w	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da2:	f000 8086 	beq.w	8003eb2 <HAL_TIM_ConfigClockSource+0x172>
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003daa:	d87f      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b70      	cmp	r3, #112	@ 0x70
 8003dae:	d01a      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0xa6>
 8003db0:	2b70      	cmp	r3, #112	@ 0x70
 8003db2:	d87b      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b60      	cmp	r3, #96	@ 0x60
 8003db6:	d050      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x11a>
 8003db8:	2b60      	cmp	r3, #96	@ 0x60
 8003dba:	d877      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b50      	cmp	r3, #80	@ 0x50
 8003dbe:	d03c      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0xfa>
 8003dc0:	2b50      	cmp	r3, #80	@ 0x50
 8003dc2:	d873      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d058      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x13a>
 8003dc8:	2b40      	cmp	r3, #64	@ 0x40
 8003dca:	d86f      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b30      	cmp	r3, #48	@ 0x30
 8003dce:	d064      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x15a>
 8003dd0:	2b30      	cmp	r3, #48	@ 0x30
 8003dd2:	d86b      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d060      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x15a>
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d867      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d05c      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x15a>
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d05a      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	e062      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003df6:	f000 fb3b 	bl	8004470 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	609a      	str	r2, [r3, #8]
      break;
 8003e12:	e04f      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e24:	f000 fb24 	bl	8004470 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e36:	609a      	str	r2, [r3, #8]
      break;
 8003e38:	e03c      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 fa98 	bl	800437c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2150      	movs	r1, #80	@ 0x50
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 faf1 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003e58:	e02c      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	461a      	mov	r2, r3
 8003e68:	f000 fab7 	bl	80043da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2160      	movs	r1, #96	@ 0x60
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fae1 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003e78:	e01c      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	461a      	mov	r2, r3
 8003e88:	f000 fa78 	bl	800437c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2140      	movs	r1, #64	@ 0x40
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fad1 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003e98:	e00c      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f000 fac8 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003eaa:	e003      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb0:	e000      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a43      	ldr	r2, [pc, #268]	@ (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a40      	ldr	r2, [pc, #256]	@ (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3e      	ldr	r2, [pc, #248]	@ (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8004000 <TIM_Base_SetConfig+0x130>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a32      	ldr	r2, [pc, #200]	@ (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f30:	d027      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d023      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2d      	ldr	r2, [pc, #180]	@ (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <TIM_Base_SetConfig+0x130>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d017      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2b      	ldr	r2, [pc, #172]	@ (8004004 <TIM_Base_SetConfig+0x134>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004008 <TIM_Base_SetConfig+0x138>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a29      	ldr	r2, [pc, #164]	@ (800400c <TIM_Base_SetConfig+0x13c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	@ (8004010 <TIM_Base_SetConfig+0x140>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a27      	ldr	r2, [pc, #156]	@ (8004014 <TIM_Base_SetConfig+0x144>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	@ (8004018 <TIM_Base_SetConfig+0x148>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d108      	bne.n	8003f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0xf2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a10      	ldr	r2, [pc, #64]	@ (8004000 <TIM_Base_SetConfig+0x130>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d103      	bne.n	8003fca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40001800 	.word	0x40001800
 8004014:	40001c00 	.word	0x40001c00
 8004018:	40002000 	.word	0x40002000

0800401c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 0201 	bic.w	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 0302 	bic.w	r3, r3, #2
 8004064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <TIM_OC1_SetConfig+0xd8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC1_SetConfig+0x64>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <TIM_OC1_SetConfig+0xdc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10c      	bne.n	800409a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0308 	bic.w	r3, r3, #8
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a15      	ldr	r2, [pc, #84]	@ (80040f4 <TIM_OC1_SetConfig+0xd8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_OC1_SetConfig+0x8e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <TIM_OC1_SetConfig+0xdc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d111      	bne.n	80040ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40010400 	.word	0x40010400

080040fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f023 0210 	bic.w	r2, r3, #16
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0320 	bic.w	r3, r3, #32
 8004146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a22      	ldr	r2, [pc, #136]	@ (80041e0 <TIM_OC2_SetConfig+0xe4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC2_SetConfig+0x68>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <TIM_OC2_SetConfig+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10d      	bne.n	8004180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a17      	ldr	r2, [pc, #92]	@ (80041e0 <TIM_OC2_SetConfig+0xe4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC2_SetConfig+0x94>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a16      	ldr	r2, [pc, #88]	@ (80041e4 <TIM_OC2_SetConfig+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d113      	bne.n	80041b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40010400 	.word	0x40010400

080041e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a21      	ldr	r2, [pc, #132]	@ (80042c8 <TIM_OC3_SetConfig+0xe0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC3_SetConfig+0x66>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a20      	ldr	r2, [pc, #128]	@ (80042cc <TIM_OC3_SetConfig+0xe4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10d      	bne.n	800426a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a16      	ldr	r2, [pc, #88]	@ (80042c8 <TIM_OC3_SetConfig+0xe0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC3_SetConfig+0x92>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a15      	ldr	r2, [pc, #84]	@ (80042cc <TIM_OC3_SetConfig+0xe4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d113      	bne.n	80042a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40010400 	.word	0x40010400

080042d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800431a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <TIM_OC4_SetConfig+0xa4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <TIM_OC4_SetConfig+0x68>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a11      	ldr	r2, [pc, #68]	@ (8004378 <TIM_OC4_SetConfig+0xa8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d109      	bne.n	800434c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800433e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	019b      	lsls	r3, r3, #6
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40010000 	.word	0x40010000
 8004378:	40010400 	.word	0x40010400

0800437c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0201 	bic.w	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 030a 	bic.w	r3, r3, #10
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f023 0210 	bic.w	r2, r3, #16
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	031b      	lsls	r3, r3, #12
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004416:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	f043 0307 	orr.w	r3, r3, #7
 800445c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800448a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	431a      	orrs	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2201      	movs	r2, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	401a      	ands	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1a      	ldr	r2, [r3, #32]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	fa01 f303 	lsl.w	r3, r1, r3
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e05a      	b.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	@ (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d022      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004560:	d01d      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d018      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1b      	ldr	r2, [pc, #108]	@ (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1a      	ldr	r2, [pc, #104]	@ (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a18      	ldr	r2, [pc, #96]	@ (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a17      	ldr	r2, [pc, #92]	@ (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a15      	ldr	r2, [pc, #84]	@ (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10c      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40010400 	.word	0x40010400
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40001800 	.word	0x40001800

080045f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e042      	b.n	800468c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fdd4 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	@ 0x24
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f973 	bl	8004924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800464c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800465c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800466c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	@ 0x28
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d175      	bne.n	80047a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_UART_Transmit+0x2c>
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e06e      	b.n	80047a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2221      	movs	r2, #33	@ 0x21
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046d2:	f7fc fed3 	bl	800147c <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ec:	d108      	bne.n	8004700 <HAL_UART_Transmit+0x6c>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e003      	b.n	8004708 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004708:	e02e      	b.n	8004768 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f848 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e03a      	b.n	80047a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3302      	adds	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e007      	b.n	800475a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1cb      	bne.n	800470a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2140      	movs	r1, #64	@ 0x40
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f814 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e006      	b.n	80047a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	e03b      	b.n	8004834 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d037      	beq.n	8004834 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c4:	f7fc fe5a 	bl	800147c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e03a      	b.n	8004854 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d023      	beq.n	8004834 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b80      	cmp	r3, #128	@ 0x80
 80047f0:	d020      	beq.n	8004834 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b40      	cmp	r3, #64	@ 0x40
 80047f6:	d01d      	beq.n	8004834 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d116      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f81d 	bl	800485c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2208      	movs	r2, #8
 8004826:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e00f      	b.n	8004854 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	429a      	cmp	r2, r3
 8004850:	d0b4      	beq.n	80047bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b095      	sub	sp, #84	@ 0x54
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800487a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004884:	643a      	str	r2, [r7, #64]	@ 0x40
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800488a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3314      	adds	r3, #20
 80048b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d119      	bne.n	8004908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f4:	61ba      	str	r2, [r7, #24]
 80048f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6979      	ldr	r1, [r7, #20]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	613b      	str	r3, [r7, #16]
   return(result);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004916:	bf00      	nop
 8004918:	3754      	adds	r7, #84	@ 0x54
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b0c0      	sub	sp, #256	@ 0x100
 800492a:	af00      	add	r7, sp, #0
 800492c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	ea40 0301 	orr.w	r3, r0, r1
 800494c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800497c:	f021 010c 	bic.w	r1, r1, #12
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800498a:	430b      	orrs	r3, r1
 800498c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	6999      	ldr	r1, [r3, #24]
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	ea40 0301 	orr.w	r3, r0, r1
 80049aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b8f      	ldr	r3, [pc, #572]	@ (8004bf0 <UART_SetConfig+0x2cc>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d005      	beq.n	80049c4 <UART_SetConfig+0xa0>
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b8d      	ldr	r3, [pc, #564]	@ (8004bf4 <UART_SetConfig+0x2d0>)
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d104      	bne.n	80049ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7fe fe9c 	bl	8003700 <HAL_RCC_GetPCLK2Freq>
 80049c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049cc:	e003      	b.n	80049d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ce:	f7fe fe83 	bl	80036d8 <HAL_RCC_GetPCLK1Freq>
 80049d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e0:	f040 810c 	bne.w	8004bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049f6:	4622      	mov	r2, r4
 80049f8:	462b      	mov	r3, r5
 80049fa:	1891      	adds	r1, r2, r2
 80049fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049fe:	415b      	adcs	r3, r3
 8004a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a06:	4621      	mov	r1, r4
 8004a08:	eb12 0801 	adds.w	r8, r2, r1
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb43 0901 	adc.w	r9, r3, r1
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a26:	4690      	mov	r8, r2
 8004a28:	4699      	mov	r9, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	eb18 0303 	adds.w	r3, r8, r3
 8004a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a34:	462b      	mov	r3, r5
 8004a36:	eb49 0303 	adc.w	r3, r9, r3
 8004a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a52:	460b      	mov	r3, r1
 8004a54:	18db      	adds	r3, r3, r3
 8004a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a58:	4613      	mov	r3, r2
 8004a5a:	eb42 0303 	adc.w	r3, r2, r3
 8004a5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a68:	f7fb fc0a 	bl	8000280 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b61      	ldr	r3, [pc, #388]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004a72:	fba3 2302 	umull	r2, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	011c      	lsls	r4, r3, #4
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a94:	415b      	adcs	r3, r3
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004abc:	4692      	mov	sl, r2
 8004abe:	469b      	mov	fp, r3
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	18db      	adds	r3, r3, r3
 8004aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aee:	4613      	mov	r3, r2
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004afe:	f7fb fbbf 	bl	8000280 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2264      	movs	r2, #100	@ 0x64
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	1acb      	subs	r3, r1, r3
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b1e:	4b36      	ldr	r3, [pc, #216]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004b20:	fba3 2302 	umull	r2, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b2c:	441c      	add	r4, r3
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	18db      	adds	r3, r3, r3
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004baa:	4613      	mov	r3, r2
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bba:	f7fb fb61 	bl	8000280 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2164      	movs	r1, #100	@ 0x64
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	3332      	adds	r3, #50	@ 0x32
 8004bd6:	4a08      	ldr	r2, [pc, #32]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 0207 	and.w	r2, r3, #7
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4422      	add	r2, r4
 8004bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bec:	e106      	b.n	8004dfc <UART_SetConfig+0x4d8>
 8004bee:	bf00      	nop
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	40011400 	.word	0x40011400
 8004bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c0e:	4642      	mov	r2, r8
 8004c10:	464b      	mov	r3, r9
 8004c12:	1891      	adds	r1, r2, r2
 8004c14:	6239      	str	r1, [r7, #32]
 8004c16:	415b      	adcs	r3, r3
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1e:	4641      	mov	r1, r8
 8004c20:	1854      	adds	r4, r2, r1
 8004c22:	4649      	mov	r1, r9
 8004c24:	eb43 0501 	adc.w	r5, r3, r1
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	00eb      	lsls	r3, r5, #3
 8004c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c44:	464b      	mov	r3, r9
 8004c46:	eb45 0303 	adc.w	r3, r5, r3
 8004c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	008b      	lsls	r3, r1, #2
 8004c6e:	4621      	mov	r1, r4
 8004c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c74:	4621      	mov	r1, r4
 8004c76:	008a      	lsls	r2, r1, #2
 8004c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c7c:	f7fb fb00 	bl	8000280 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4b60      	ldr	r3, [pc, #384]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004c86:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	011c      	lsls	r4, r3, #4
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	61b9      	str	r1, [r7, #24]
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6139      	str	r1, [r7, #16]
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d08:	4649      	mov	r1, r9
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d12:	4641      	mov	r1, r8
 8004d14:	008a      	lsls	r2, r1, #2
 8004d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d1a:	f7fb fab1 	bl	8000280 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	4b38      	ldr	r3, [pc, #224]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2301 	umull	r2, r3, r3, r1
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2264      	movs	r2, #100	@ 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	1acb      	subs	r3, r1, r3
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	3332      	adds	r3, #50	@ 0x32
 8004d38:	4a33      	ldr	r2, [pc, #204]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d44:	441c      	add	r4, r3
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d64:	4641      	mov	r1, r8
 8004d66:	1851      	adds	r1, r2, r1
 8004d68:	6039      	str	r1, [r7, #0]
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	414b      	adcs	r3, r1
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	00cb      	lsls	r3, r1, #3
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d86:	4651      	mov	r1, sl
 8004d88:	00ca      	lsls	r2, r1, #3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4642      	mov	r2, r8
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d96:	464b      	mov	r3, r9
 8004d98:	460a      	mov	r2, r1
 8004d9a:	eb42 0303 	adc.w	r3, r2, r3
 8004d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004daa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004db8:	4649      	mov	r1, r9
 8004dba:	008b      	lsls	r3, r1, #2
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	008a      	lsls	r2, r1, #2
 8004dc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dca:	f7fb fa59 	bl	8000280 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	2164      	movs	r1, #100	@ 0x64
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	3332      	adds	r3, #50	@ 0x32
 8004de6:	4a08      	ldr	r2, [pc, #32]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4422      	add	r2, r4
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e02:	46bd      	mov	sp, r7
 8004e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e08:	51eb851f 	.word	0x51eb851f

08004e0c <sniprintf>:
 8004e0c:	b40c      	push	{r2, r3}
 8004e0e:	b530      	push	{r4, r5, lr}
 8004e10:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <sniprintf+0x68>)
 8004e12:	1e0c      	subs	r4, r1, #0
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	b09d      	sub	sp, #116	@ 0x74
 8004e18:	da08      	bge.n	8004e2c <sniprintf+0x20>
 8004e1a:	238b      	movs	r3, #139	@ 0x8b
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e22:	b01d      	add	sp, #116	@ 0x74
 8004e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e28:	b002      	add	sp, #8
 8004e2a:	4770      	bx	lr
 8004e2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004e30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004e3a:	bf14      	ite	ne
 8004e3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e40:	4623      	moveq	r3, r4
 8004e42:	9304      	str	r3, [sp, #16]
 8004e44:	9307      	str	r3, [sp, #28]
 8004e46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e4a:	9002      	str	r0, [sp, #8]
 8004e4c:	9006      	str	r0, [sp, #24]
 8004e4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e54:	ab21      	add	r3, sp, #132	@ 0x84
 8004e56:	a902      	add	r1, sp, #8
 8004e58:	4628      	mov	r0, r5
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	f000 f994 	bl	8005188 <_svfiprintf_r>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	bfbc      	itt	lt
 8004e64:	238b      	movlt	r3, #139	@ 0x8b
 8004e66:	602b      	strlt	r3, [r5, #0]
 8004e68:	2c00      	cmp	r4, #0
 8004e6a:	d0da      	beq.n	8004e22 <sniprintf+0x16>
 8004e6c:	9b02      	ldr	r3, [sp, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e7d6      	b.n	8004e22 <sniprintf+0x16>
 8004e74:	20000018 	.word	0x20000018

08004e78 <memset>:
 8004e78:	4402      	add	r2, r0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <memset+0xa>
 8004e80:	4770      	bx	lr
 8004e82:	f803 1b01 	strb.w	r1, [r3], #1
 8004e86:	e7f9      	b.n	8004e7c <memset+0x4>

08004e88 <__errno>:
 8004e88:	4b01      	ldr	r3, [pc, #4]	@ (8004e90 <__errno+0x8>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000018 	.word	0x20000018

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	@ (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f000 fc64 	bl	8005774 <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	0800580c 	.word	0x0800580c
 8004ed0:	0800580c 	.word	0x0800580c
 8004ed4:	0800580c 	.word	0x0800580c
 8004ed8:	08005810 	.word	0x08005810

08004edc <__retarget_lock_acquire_recursive>:
 8004edc:	4770      	bx	lr

08004ede <__retarget_lock_release_recursive>:
 8004ede:	4770      	bx	lr

08004ee0 <_free_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	2900      	cmp	r1, #0
 8004ee6:	d041      	beq.n	8004f6c <_free_r+0x8c>
 8004ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eec:	1f0c      	subs	r4, r1, #4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bfb8      	it	lt
 8004ef2:	18e4      	addlt	r4, r4, r3
 8004ef4:	f000 f8e0 	bl	80050b8 <__malloc_lock>
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <_free_r+0x90>)
 8004efa:	6813      	ldr	r3, [r2, #0]
 8004efc:	b933      	cbnz	r3, 8004f0c <_free_r+0x2c>
 8004efe:	6063      	str	r3, [r4, #4]
 8004f00:	6014      	str	r4, [r2, #0]
 8004f02:	4628      	mov	r0, r5
 8004f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f08:	f000 b8dc 	b.w	80050c4 <__malloc_unlock>
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	d908      	bls.n	8004f22 <_free_r+0x42>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	1821      	adds	r1, r4, r0
 8004f14:	428b      	cmp	r3, r1
 8004f16:	bf01      	itttt	eq
 8004f18:	6819      	ldreq	r1, [r3, #0]
 8004f1a:	685b      	ldreq	r3, [r3, #4]
 8004f1c:	1809      	addeq	r1, r1, r0
 8004f1e:	6021      	streq	r1, [r4, #0]
 8004f20:	e7ed      	b.n	8004efe <_free_r+0x1e>
 8004f22:	461a      	mov	r2, r3
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	b10b      	cbz	r3, 8004f2c <_free_r+0x4c>
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	d9fa      	bls.n	8004f22 <_free_r+0x42>
 8004f2c:	6811      	ldr	r1, [r2, #0]
 8004f2e:	1850      	adds	r0, r2, r1
 8004f30:	42a0      	cmp	r0, r4
 8004f32:	d10b      	bne.n	8004f4c <_free_r+0x6c>
 8004f34:	6820      	ldr	r0, [r4, #0]
 8004f36:	4401      	add	r1, r0
 8004f38:	1850      	adds	r0, r2, r1
 8004f3a:	4283      	cmp	r3, r0
 8004f3c:	6011      	str	r1, [r2, #0]
 8004f3e:	d1e0      	bne.n	8004f02 <_free_r+0x22>
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	6053      	str	r3, [r2, #4]
 8004f46:	4408      	add	r0, r1
 8004f48:	6010      	str	r0, [r2, #0]
 8004f4a:	e7da      	b.n	8004f02 <_free_r+0x22>
 8004f4c:	d902      	bls.n	8004f54 <_free_r+0x74>
 8004f4e:	230c      	movs	r3, #12
 8004f50:	602b      	str	r3, [r5, #0]
 8004f52:	e7d6      	b.n	8004f02 <_free_r+0x22>
 8004f54:	6820      	ldr	r0, [r4, #0]
 8004f56:	1821      	adds	r1, r4, r0
 8004f58:	428b      	cmp	r3, r1
 8004f5a:	bf04      	itt	eq
 8004f5c:	6819      	ldreq	r1, [r3, #0]
 8004f5e:	685b      	ldreq	r3, [r3, #4]
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	bf04      	itt	eq
 8004f64:	1809      	addeq	r1, r1, r0
 8004f66:	6021      	streq	r1, [r4, #0]
 8004f68:	6054      	str	r4, [r2, #4]
 8004f6a:	e7ca      	b.n	8004f02 <_free_r+0x22>
 8004f6c:	bd38      	pop	{r3, r4, r5, pc}
 8004f6e:	bf00      	nop
 8004f70:	200003b4 	.word	0x200003b4

08004f74 <sbrk_aligned>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	4e0f      	ldr	r6, [pc, #60]	@ (8004fb4 <sbrk_aligned+0x40>)
 8004f78:	460c      	mov	r4, r1
 8004f7a:	6831      	ldr	r1, [r6, #0]
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	b911      	cbnz	r1, 8004f86 <sbrk_aligned+0x12>
 8004f80:	f000 fba4 	bl	80056cc <_sbrk_r>
 8004f84:	6030      	str	r0, [r6, #0]
 8004f86:	4621      	mov	r1, r4
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f000 fb9f 	bl	80056cc <_sbrk_r>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	d103      	bne.n	8004f9a <sbrk_aligned+0x26>
 8004f92:	f04f 34ff 	mov.w	r4, #4294967295
 8004f96:	4620      	mov	r0, r4
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
 8004f9a:	1cc4      	adds	r4, r0, #3
 8004f9c:	f024 0403 	bic.w	r4, r4, #3
 8004fa0:	42a0      	cmp	r0, r4
 8004fa2:	d0f8      	beq.n	8004f96 <sbrk_aligned+0x22>
 8004fa4:	1a21      	subs	r1, r4, r0
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 fb90 	bl	80056cc <_sbrk_r>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d1f2      	bne.n	8004f96 <sbrk_aligned+0x22>
 8004fb0:	e7ef      	b.n	8004f92 <sbrk_aligned+0x1e>
 8004fb2:	bf00      	nop
 8004fb4:	200003b0 	.word	0x200003b0

08004fb8 <_malloc_r>:
 8004fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fbc:	1ccd      	adds	r5, r1, #3
 8004fbe:	f025 0503 	bic.w	r5, r5, #3
 8004fc2:	3508      	adds	r5, #8
 8004fc4:	2d0c      	cmp	r5, #12
 8004fc6:	bf38      	it	cc
 8004fc8:	250c      	movcc	r5, #12
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	4606      	mov	r6, r0
 8004fce:	db01      	blt.n	8004fd4 <_malloc_r+0x1c>
 8004fd0:	42a9      	cmp	r1, r5
 8004fd2:	d904      	bls.n	8004fde <_malloc_r+0x26>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	6033      	str	r3, [r6, #0]
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050b4 <_malloc_r+0xfc>
 8004fe2:	f000 f869 	bl	80050b8 <__malloc_lock>
 8004fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8004fea:	461c      	mov	r4, r3
 8004fec:	bb44      	cbnz	r4, 8005040 <_malloc_r+0x88>
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f7ff ffbf 	bl	8004f74 <sbrk_aligned>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	d158      	bne.n	80050ae <_malloc_r+0xf6>
 8004ffc:	f8d8 4000 	ldr.w	r4, [r8]
 8005000:	4627      	mov	r7, r4
 8005002:	2f00      	cmp	r7, #0
 8005004:	d143      	bne.n	800508e <_malloc_r+0xd6>
 8005006:	2c00      	cmp	r4, #0
 8005008:	d04b      	beq.n	80050a2 <_malloc_r+0xea>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	4639      	mov	r1, r7
 800500e:	4630      	mov	r0, r6
 8005010:	eb04 0903 	add.w	r9, r4, r3
 8005014:	f000 fb5a 	bl	80056cc <_sbrk_r>
 8005018:	4581      	cmp	r9, r0
 800501a:	d142      	bne.n	80050a2 <_malloc_r+0xea>
 800501c:	6821      	ldr	r1, [r4, #0]
 800501e:	1a6d      	subs	r5, r5, r1
 8005020:	4629      	mov	r1, r5
 8005022:	4630      	mov	r0, r6
 8005024:	f7ff ffa6 	bl	8004f74 <sbrk_aligned>
 8005028:	3001      	adds	r0, #1
 800502a:	d03a      	beq.n	80050a2 <_malloc_r+0xea>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	442b      	add	r3, r5
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	f8d8 3000 	ldr.w	r3, [r8]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	bb62      	cbnz	r2, 8005094 <_malloc_r+0xdc>
 800503a:	f8c8 7000 	str.w	r7, [r8]
 800503e:	e00f      	b.n	8005060 <_malloc_r+0xa8>
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	1b52      	subs	r2, r2, r5
 8005044:	d420      	bmi.n	8005088 <_malloc_r+0xd0>
 8005046:	2a0b      	cmp	r2, #11
 8005048:	d917      	bls.n	800507a <_malloc_r+0xc2>
 800504a:	1961      	adds	r1, r4, r5
 800504c:	42a3      	cmp	r3, r4
 800504e:	6025      	str	r5, [r4, #0]
 8005050:	bf18      	it	ne
 8005052:	6059      	strne	r1, [r3, #4]
 8005054:	6863      	ldr	r3, [r4, #4]
 8005056:	bf08      	it	eq
 8005058:	f8c8 1000 	streq.w	r1, [r8]
 800505c:	5162      	str	r2, [r4, r5]
 800505e:	604b      	str	r3, [r1, #4]
 8005060:	4630      	mov	r0, r6
 8005062:	f000 f82f 	bl	80050c4 <__malloc_unlock>
 8005066:	f104 000b 	add.w	r0, r4, #11
 800506a:	1d23      	adds	r3, r4, #4
 800506c:	f020 0007 	bic.w	r0, r0, #7
 8005070:	1ac2      	subs	r2, r0, r3
 8005072:	bf1c      	itt	ne
 8005074:	1a1b      	subne	r3, r3, r0
 8005076:	50a3      	strne	r3, [r4, r2]
 8005078:	e7af      	b.n	8004fda <_malloc_r+0x22>
 800507a:	6862      	ldr	r2, [r4, #4]
 800507c:	42a3      	cmp	r3, r4
 800507e:	bf0c      	ite	eq
 8005080:	f8c8 2000 	streq.w	r2, [r8]
 8005084:	605a      	strne	r2, [r3, #4]
 8005086:	e7eb      	b.n	8005060 <_malloc_r+0xa8>
 8005088:	4623      	mov	r3, r4
 800508a:	6864      	ldr	r4, [r4, #4]
 800508c:	e7ae      	b.n	8004fec <_malloc_r+0x34>
 800508e:	463c      	mov	r4, r7
 8005090:	687f      	ldr	r7, [r7, #4]
 8005092:	e7b6      	b.n	8005002 <_malloc_r+0x4a>
 8005094:	461a      	mov	r2, r3
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	42a3      	cmp	r3, r4
 800509a:	d1fb      	bne.n	8005094 <_malloc_r+0xdc>
 800509c:	2300      	movs	r3, #0
 800509e:	6053      	str	r3, [r2, #4]
 80050a0:	e7de      	b.n	8005060 <_malloc_r+0xa8>
 80050a2:	230c      	movs	r3, #12
 80050a4:	6033      	str	r3, [r6, #0]
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 f80c 	bl	80050c4 <__malloc_unlock>
 80050ac:	e794      	b.n	8004fd8 <_malloc_r+0x20>
 80050ae:	6005      	str	r5, [r0, #0]
 80050b0:	e7d6      	b.n	8005060 <_malloc_r+0xa8>
 80050b2:	bf00      	nop
 80050b4:	200003b4 	.word	0x200003b4

080050b8 <__malloc_lock>:
 80050b8:	4801      	ldr	r0, [pc, #4]	@ (80050c0 <__malloc_lock+0x8>)
 80050ba:	f7ff bf0f 	b.w	8004edc <__retarget_lock_acquire_recursive>
 80050be:	bf00      	nop
 80050c0:	200003ac 	.word	0x200003ac

080050c4 <__malloc_unlock>:
 80050c4:	4801      	ldr	r0, [pc, #4]	@ (80050cc <__malloc_unlock+0x8>)
 80050c6:	f7ff bf0a 	b.w	8004ede <__retarget_lock_release_recursive>
 80050ca:	bf00      	nop
 80050cc:	200003ac 	.word	0x200003ac

080050d0 <__ssputs_r>:
 80050d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d4:	688e      	ldr	r6, [r1, #8]
 80050d6:	461f      	mov	r7, r3
 80050d8:	42be      	cmp	r6, r7
 80050da:	680b      	ldr	r3, [r1, #0]
 80050dc:	4682      	mov	sl, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	4690      	mov	r8, r2
 80050e2:	d82d      	bhi.n	8005140 <__ssputs_r+0x70>
 80050e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050ec:	d026      	beq.n	800513c <__ssputs_r+0x6c>
 80050ee:	6965      	ldr	r5, [r4, #20]
 80050f0:	6909      	ldr	r1, [r1, #16]
 80050f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f6:	eba3 0901 	sub.w	r9, r3, r1
 80050fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050fe:	1c7b      	adds	r3, r7, #1
 8005100:	444b      	add	r3, r9
 8005102:	106d      	asrs	r5, r5, #1
 8005104:	429d      	cmp	r5, r3
 8005106:	bf38      	it	cc
 8005108:	461d      	movcc	r5, r3
 800510a:	0553      	lsls	r3, r2, #21
 800510c:	d527      	bpl.n	800515e <__ssputs_r+0x8e>
 800510e:	4629      	mov	r1, r5
 8005110:	f7ff ff52 	bl	8004fb8 <_malloc_r>
 8005114:	4606      	mov	r6, r0
 8005116:	b360      	cbz	r0, 8005172 <__ssputs_r+0xa2>
 8005118:	6921      	ldr	r1, [r4, #16]
 800511a:	464a      	mov	r2, r9
 800511c:	f000 fae6 	bl	80056ec <memcpy>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	6126      	str	r6, [r4, #16]
 800512e:	6165      	str	r5, [r4, #20]
 8005130:	444e      	add	r6, r9
 8005132:	eba5 0509 	sub.w	r5, r5, r9
 8005136:	6026      	str	r6, [r4, #0]
 8005138:	60a5      	str	r5, [r4, #8]
 800513a:	463e      	mov	r6, r7
 800513c:	42be      	cmp	r6, r7
 800513e:	d900      	bls.n	8005142 <__ssputs_r+0x72>
 8005140:	463e      	mov	r6, r7
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	4632      	mov	r2, r6
 8005146:	4641      	mov	r1, r8
 8005148:	f000 faa6 	bl	8005698 <memmove>
 800514c:	68a3      	ldr	r3, [r4, #8]
 800514e:	1b9b      	subs	r3, r3, r6
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	4433      	add	r3, r6
 8005156:	6023      	str	r3, [r4, #0]
 8005158:	2000      	movs	r0, #0
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	462a      	mov	r2, r5
 8005160:	f000 fad2 	bl	8005708 <_realloc_r>
 8005164:	4606      	mov	r6, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	d1e0      	bne.n	800512c <__ssputs_r+0x5c>
 800516a:	6921      	ldr	r1, [r4, #16]
 800516c:	4650      	mov	r0, sl
 800516e:	f7ff feb7 	bl	8004ee0 <_free_r>
 8005172:	230c      	movs	r3, #12
 8005174:	f8ca 3000 	str.w	r3, [sl]
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	e7e9      	b.n	800515a <__ssputs_r+0x8a>
	...

08005188 <_svfiprintf_r>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	4698      	mov	r8, r3
 800518e:	898b      	ldrh	r3, [r1, #12]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	b09d      	sub	sp, #116	@ 0x74
 8005194:	4607      	mov	r7, r0
 8005196:	460d      	mov	r5, r1
 8005198:	4614      	mov	r4, r2
 800519a:	d510      	bpl.n	80051be <_svfiprintf_r+0x36>
 800519c:	690b      	ldr	r3, [r1, #16]
 800519e:	b973      	cbnz	r3, 80051be <_svfiprintf_r+0x36>
 80051a0:	2140      	movs	r1, #64	@ 0x40
 80051a2:	f7ff ff09 	bl	8004fb8 <_malloc_r>
 80051a6:	6028      	str	r0, [r5, #0]
 80051a8:	6128      	str	r0, [r5, #16]
 80051aa:	b930      	cbnz	r0, 80051ba <_svfiprintf_r+0x32>
 80051ac:	230c      	movs	r3, #12
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	b01d      	add	sp, #116	@ 0x74
 80051b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ba:	2340      	movs	r3, #64	@ 0x40
 80051bc:	616b      	str	r3, [r5, #20]
 80051be:	2300      	movs	r3, #0
 80051c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c2:	2320      	movs	r3, #32
 80051c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80051cc:	2330      	movs	r3, #48	@ 0x30
 80051ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800536c <_svfiprintf_r+0x1e4>
 80051d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051d6:	f04f 0901 	mov.w	r9, #1
 80051da:	4623      	mov	r3, r4
 80051dc:	469a      	mov	sl, r3
 80051de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e2:	b10a      	cbz	r2, 80051e8 <_svfiprintf_r+0x60>
 80051e4:	2a25      	cmp	r2, #37	@ 0x25
 80051e6:	d1f9      	bne.n	80051dc <_svfiprintf_r+0x54>
 80051e8:	ebba 0b04 	subs.w	fp, sl, r4
 80051ec:	d00b      	beq.n	8005206 <_svfiprintf_r+0x7e>
 80051ee:	465b      	mov	r3, fp
 80051f0:	4622      	mov	r2, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ff6b 	bl	80050d0 <__ssputs_r>
 80051fa:	3001      	adds	r0, #1
 80051fc:	f000 80a7 	beq.w	800534e <_svfiprintf_r+0x1c6>
 8005200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005202:	445a      	add	r2, fp
 8005204:	9209      	str	r2, [sp, #36]	@ 0x24
 8005206:	f89a 3000 	ldrb.w	r3, [sl]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 809f 	beq.w	800534e <_svfiprintf_r+0x1c6>
 8005210:	2300      	movs	r3, #0
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800521a:	f10a 0a01 	add.w	sl, sl, #1
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	9307      	str	r3, [sp, #28]
 8005222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005226:	931a      	str	r3, [sp, #104]	@ 0x68
 8005228:	4654      	mov	r4, sl
 800522a:	2205      	movs	r2, #5
 800522c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005230:	484e      	ldr	r0, [pc, #312]	@ (800536c <_svfiprintf_r+0x1e4>)
 8005232:	f7fa ffd5 	bl	80001e0 <memchr>
 8005236:	9a04      	ldr	r2, [sp, #16]
 8005238:	b9d8      	cbnz	r0, 8005272 <_svfiprintf_r+0xea>
 800523a:	06d0      	lsls	r0, r2, #27
 800523c:	bf44      	itt	mi
 800523e:	2320      	movmi	r3, #32
 8005240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005244:	0711      	lsls	r1, r2, #28
 8005246:	bf44      	itt	mi
 8005248:	232b      	movmi	r3, #43	@ 0x2b
 800524a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800524e:	f89a 3000 	ldrb.w	r3, [sl]
 8005252:	2b2a      	cmp	r3, #42	@ 0x2a
 8005254:	d015      	beq.n	8005282 <_svfiprintf_r+0xfa>
 8005256:	9a07      	ldr	r2, [sp, #28]
 8005258:	4654      	mov	r4, sl
 800525a:	2000      	movs	r0, #0
 800525c:	f04f 0c0a 	mov.w	ip, #10
 8005260:	4621      	mov	r1, r4
 8005262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005266:	3b30      	subs	r3, #48	@ 0x30
 8005268:	2b09      	cmp	r3, #9
 800526a:	d94b      	bls.n	8005304 <_svfiprintf_r+0x17c>
 800526c:	b1b0      	cbz	r0, 800529c <_svfiprintf_r+0x114>
 800526e:	9207      	str	r2, [sp, #28]
 8005270:	e014      	b.n	800529c <_svfiprintf_r+0x114>
 8005272:	eba0 0308 	sub.w	r3, r0, r8
 8005276:	fa09 f303 	lsl.w	r3, r9, r3
 800527a:	4313      	orrs	r3, r2
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	46a2      	mov	sl, r4
 8005280:	e7d2      	b.n	8005228 <_svfiprintf_r+0xa0>
 8005282:	9b03      	ldr	r3, [sp, #12]
 8005284:	1d19      	adds	r1, r3, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	9103      	str	r1, [sp, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbb      	ittet	lt
 800528e:	425b      	neglt	r3, r3
 8005290:	f042 0202 	orrlt.w	r2, r2, #2
 8005294:	9307      	strge	r3, [sp, #28]
 8005296:	9307      	strlt	r3, [sp, #28]
 8005298:	bfb8      	it	lt
 800529a:	9204      	strlt	r2, [sp, #16]
 800529c:	7823      	ldrb	r3, [r4, #0]
 800529e:	2b2e      	cmp	r3, #46	@ 0x2e
 80052a0:	d10a      	bne.n	80052b8 <_svfiprintf_r+0x130>
 80052a2:	7863      	ldrb	r3, [r4, #1]
 80052a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80052a6:	d132      	bne.n	800530e <_svfiprintf_r+0x186>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	9203      	str	r2, [sp, #12]
 80052b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052b4:	3402      	adds	r4, #2
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800537c <_svfiprintf_r+0x1f4>
 80052bc:	7821      	ldrb	r1, [r4, #0]
 80052be:	2203      	movs	r2, #3
 80052c0:	4650      	mov	r0, sl
 80052c2:	f7fa ff8d 	bl	80001e0 <memchr>
 80052c6:	b138      	cbz	r0, 80052d8 <_svfiprintf_r+0x150>
 80052c8:	9b04      	ldr	r3, [sp, #16]
 80052ca:	eba0 000a 	sub.w	r0, r0, sl
 80052ce:	2240      	movs	r2, #64	@ 0x40
 80052d0:	4082      	lsls	r2, r0
 80052d2:	4313      	orrs	r3, r2
 80052d4:	3401      	adds	r4, #1
 80052d6:	9304      	str	r3, [sp, #16]
 80052d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052dc:	4824      	ldr	r0, [pc, #144]	@ (8005370 <_svfiprintf_r+0x1e8>)
 80052de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052e2:	2206      	movs	r2, #6
 80052e4:	f7fa ff7c 	bl	80001e0 <memchr>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d036      	beq.n	800535a <_svfiprintf_r+0x1d2>
 80052ec:	4b21      	ldr	r3, [pc, #132]	@ (8005374 <_svfiprintf_r+0x1ec>)
 80052ee:	bb1b      	cbnz	r3, 8005338 <_svfiprintf_r+0x1b0>
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	3307      	adds	r3, #7
 80052f4:	f023 0307 	bic.w	r3, r3, #7
 80052f8:	3308      	adds	r3, #8
 80052fa:	9303      	str	r3, [sp, #12]
 80052fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052fe:	4433      	add	r3, r6
 8005300:	9309      	str	r3, [sp, #36]	@ 0x24
 8005302:	e76a      	b.n	80051da <_svfiprintf_r+0x52>
 8005304:	fb0c 3202 	mla	r2, ip, r2, r3
 8005308:	460c      	mov	r4, r1
 800530a:	2001      	movs	r0, #1
 800530c:	e7a8      	b.n	8005260 <_svfiprintf_r+0xd8>
 800530e:	2300      	movs	r3, #0
 8005310:	3401      	adds	r4, #1
 8005312:	9305      	str	r3, [sp, #20]
 8005314:	4619      	mov	r1, r3
 8005316:	f04f 0c0a 	mov.w	ip, #10
 800531a:	4620      	mov	r0, r4
 800531c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005320:	3a30      	subs	r2, #48	@ 0x30
 8005322:	2a09      	cmp	r2, #9
 8005324:	d903      	bls.n	800532e <_svfiprintf_r+0x1a6>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0c6      	beq.n	80052b8 <_svfiprintf_r+0x130>
 800532a:	9105      	str	r1, [sp, #20]
 800532c:	e7c4      	b.n	80052b8 <_svfiprintf_r+0x130>
 800532e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005332:	4604      	mov	r4, r0
 8005334:	2301      	movs	r3, #1
 8005336:	e7f0      	b.n	800531a <_svfiprintf_r+0x192>
 8005338:	ab03      	add	r3, sp, #12
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	462a      	mov	r2, r5
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <_svfiprintf_r+0x1f0>)
 8005340:	a904      	add	r1, sp, #16
 8005342:	4638      	mov	r0, r7
 8005344:	f3af 8000 	nop.w
 8005348:	1c42      	adds	r2, r0, #1
 800534a:	4606      	mov	r6, r0
 800534c:	d1d6      	bne.n	80052fc <_svfiprintf_r+0x174>
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	065b      	lsls	r3, r3, #25
 8005352:	f53f af2d 	bmi.w	80051b0 <_svfiprintf_r+0x28>
 8005356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005358:	e72c      	b.n	80051b4 <_svfiprintf_r+0x2c>
 800535a:	ab03      	add	r3, sp, #12
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	462a      	mov	r2, r5
 8005360:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <_svfiprintf_r+0x1f0>)
 8005362:	a904      	add	r1, sp, #16
 8005364:	4638      	mov	r0, r7
 8005366:	f000 f879 	bl	800545c <_printf_i>
 800536a:	e7ed      	b.n	8005348 <_svfiprintf_r+0x1c0>
 800536c:	080057d0 	.word	0x080057d0
 8005370:	080057da 	.word	0x080057da
 8005374:	00000000 	.word	0x00000000
 8005378:	080050d1 	.word	0x080050d1
 800537c:	080057d6 	.word	0x080057d6

08005380 <_printf_common>:
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	4616      	mov	r6, r2
 8005386:	4698      	mov	r8, r3
 8005388:	688a      	ldr	r2, [r1, #8]
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005390:	4293      	cmp	r3, r2
 8005392:	bfb8      	it	lt
 8005394:	4613      	movlt	r3, r2
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800539c:	4607      	mov	r7, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	b10a      	cbz	r2, 80053a6 <_printf_common+0x26>
 80053a2:	3301      	adds	r3, #1
 80053a4:	6033      	str	r3, [r6, #0]
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	0699      	lsls	r1, r3, #26
 80053aa:	bf42      	ittt	mi
 80053ac:	6833      	ldrmi	r3, [r6, #0]
 80053ae:	3302      	addmi	r3, #2
 80053b0:	6033      	strmi	r3, [r6, #0]
 80053b2:	6825      	ldr	r5, [r4, #0]
 80053b4:	f015 0506 	ands.w	r5, r5, #6
 80053b8:	d106      	bne.n	80053c8 <_printf_common+0x48>
 80053ba:	f104 0a19 	add.w	sl, r4, #25
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	6832      	ldr	r2, [r6, #0]
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dc26      	bgt.n	8005416 <_printf_common+0x96>
 80053c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	3b00      	subs	r3, #0
 80053d0:	bf18      	it	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	0692      	lsls	r2, r2, #26
 80053d6:	d42b      	bmi.n	8005430 <_printf_common+0xb0>
 80053d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053dc:	4641      	mov	r1, r8
 80053de:	4638      	mov	r0, r7
 80053e0:	47c8      	blx	r9
 80053e2:	3001      	adds	r0, #1
 80053e4:	d01e      	beq.n	8005424 <_printf_common+0xa4>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	6922      	ldr	r2, [r4, #16]
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	bf02      	ittt	eq
 80053f2:	68e5      	ldreq	r5, [r4, #12]
 80053f4:	6833      	ldreq	r3, [r6, #0]
 80053f6:	1aed      	subeq	r5, r5, r3
 80053f8:	68a3      	ldr	r3, [r4, #8]
 80053fa:	bf0c      	ite	eq
 80053fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005400:	2500      	movne	r5, #0
 8005402:	4293      	cmp	r3, r2
 8005404:	bfc4      	itt	gt
 8005406:	1a9b      	subgt	r3, r3, r2
 8005408:	18ed      	addgt	r5, r5, r3
 800540a:	2600      	movs	r6, #0
 800540c:	341a      	adds	r4, #26
 800540e:	42b5      	cmp	r5, r6
 8005410:	d11a      	bne.n	8005448 <_printf_common+0xc8>
 8005412:	2000      	movs	r0, #0
 8005414:	e008      	b.n	8005428 <_printf_common+0xa8>
 8005416:	2301      	movs	r3, #1
 8005418:	4652      	mov	r2, sl
 800541a:	4641      	mov	r1, r8
 800541c:	4638      	mov	r0, r7
 800541e:	47c8      	blx	r9
 8005420:	3001      	adds	r0, #1
 8005422:	d103      	bne.n	800542c <_printf_common+0xac>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	3501      	adds	r5, #1
 800542e:	e7c6      	b.n	80053be <_printf_common+0x3e>
 8005430:	18e1      	adds	r1, r4, r3
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	2030      	movs	r0, #48	@ 0x30
 8005436:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800543a:	4422      	add	r2, r4
 800543c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005440:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005444:	3302      	adds	r3, #2
 8005446:	e7c7      	b.n	80053d8 <_printf_common+0x58>
 8005448:	2301      	movs	r3, #1
 800544a:	4622      	mov	r2, r4
 800544c:	4641      	mov	r1, r8
 800544e:	4638      	mov	r0, r7
 8005450:	47c8      	blx	r9
 8005452:	3001      	adds	r0, #1
 8005454:	d0e6      	beq.n	8005424 <_printf_common+0xa4>
 8005456:	3601      	adds	r6, #1
 8005458:	e7d9      	b.n	800540e <_printf_common+0x8e>
	...

0800545c <_printf_i>:
 800545c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	7e0f      	ldrb	r7, [r1, #24]
 8005462:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005464:	2f78      	cmp	r7, #120	@ 0x78
 8005466:	4691      	mov	r9, r2
 8005468:	4680      	mov	r8, r0
 800546a:	460c      	mov	r4, r1
 800546c:	469a      	mov	sl, r3
 800546e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005472:	d807      	bhi.n	8005484 <_printf_i+0x28>
 8005474:	2f62      	cmp	r7, #98	@ 0x62
 8005476:	d80a      	bhi.n	800548e <_printf_i+0x32>
 8005478:	2f00      	cmp	r7, #0
 800547a:	f000 80d1 	beq.w	8005620 <_printf_i+0x1c4>
 800547e:	2f58      	cmp	r7, #88	@ 0x58
 8005480:	f000 80b8 	beq.w	80055f4 <_printf_i+0x198>
 8005484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005488:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800548c:	e03a      	b.n	8005504 <_printf_i+0xa8>
 800548e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005492:	2b15      	cmp	r3, #21
 8005494:	d8f6      	bhi.n	8005484 <_printf_i+0x28>
 8005496:	a101      	add	r1, pc, #4	@ (adr r1, 800549c <_printf_i+0x40>)
 8005498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800549c:	080054f5 	.word	0x080054f5
 80054a0:	08005509 	.word	0x08005509
 80054a4:	08005485 	.word	0x08005485
 80054a8:	08005485 	.word	0x08005485
 80054ac:	08005485 	.word	0x08005485
 80054b0:	08005485 	.word	0x08005485
 80054b4:	08005509 	.word	0x08005509
 80054b8:	08005485 	.word	0x08005485
 80054bc:	08005485 	.word	0x08005485
 80054c0:	08005485 	.word	0x08005485
 80054c4:	08005485 	.word	0x08005485
 80054c8:	08005607 	.word	0x08005607
 80054cc:	08005533 	.word	0x08005533
 80054d0:	080055c1 	.word	0x080055c1
 80054d4:	08005485 	.word	0x08005485
 80054d8:	08005485 	.word	0x08005485
 80054dc:	08005629 	.word	0x08005629
 80054e0:	08005485 	.word	0x08005485
 80054e4:	08005533 	.word	0x08005533
 80054e8:	08005485 	.word	0x08005485
 80054ec:	08005485 	.word	0x08005485
 80054f0:	080055c9 	.word	0x080055c9
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6032      	str	r2, [r6, #0]
 80054fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005500:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005504:	2301      	movs	r3, #1
 8005506:	e09c      	b.n	8005642 <_printf_i+0x1e6>
 8005508:	6833      	ldr	r3, [r6, #0]
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	1d19      	adds	r1, r3, #4
 800550e:	6031      	str	r1, [r6, #0]
 8005510:	0606      	lsls	r6, r0, #24
 8005512:	d501      	bpl.n	8005518 <_printf_i+0xbc>
 8005514:	681d      	ldr	r5, [r3, #0]
 8005516:	e003      	b.n	8005520 <_printf_i+0xc4>
 8005518:	0645      	lsls	r5, r0, #25
 800551a:	d5fb      	bpl.n	8005514 <_printf_i+0xb8>
 800551c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005520:	2d00      	cmp	r5, #0
 8005522:	da03      	bge.n	800552c <_printf_i+0xd0>
 8005524:	232d      	movs	r3, #45	@ 0x2d
 8005526:	426d      	negs	r5, r5
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800552c:	4858      	ldr	r0, [pc, #352]	@ (8005690 <_printf_i+0x234>)
 800552e:	230a      	movs	r3, #10
 8005530:	e011      	b.n	8005556 <_printf_i+0xfa>
 8005532:	6821      	ldr	r1, [r4, #0]
 8005534:	6833      	ldr	r3, [r6, #0]
 8005536:	0608      	lsls	r0, r1, #24
 8005538:	f853 5b04 	ldr.w	r5, [r3], #4
 800553c:	d402      	bmi.n	8005544 <_printf_i+0xe8>
 800553e:	0649      	lsls	r1, r1, #25
 8005540:	bf48      	it	mi
 8005542:	b2ad      	uxthmi	r5, r5
 8005544:	2f6f      	cmp	r7, #111	@ 0x6f
 8005546:	4852      	ldr	r0, [pc, #328]	@ (8005690 <_printf_i+0x234>)
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	bf14      	ite	ne
 800554c:	230a      	movne	r3, #10
 800554e:	2308      	moveq	r3, #8
 8005550:	2100      	movs	r1, #0
 8005552:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005556:	6866      	ldr	r6, [r4, #4]
 8005558:	60a6      	str	r6, [r4, #8]
 800555a:	2e00      	cmp	r6, #0
 800555c:	db05      	blt.n	800556a <_printf_i+0x10e>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	432e      	orrs	r6, r5
 8005562:	f021 0104 	bic.w	r1, r1, #4
 8005566:	6021      	str	r1, [r4, #0]
 8005568:	d04b      	beq.n	8005602 <_printf_i+0x1a6>
 800556a:	4616      	mov	r6, r2
 800556c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005570:	fb03 5711 	mls	r7, r3, r1, r5
 8005574:	5dc7      	ldrb	r7, [r0, r7]
 8005576:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800557a:	462f      	mov	r7, r5
 800557c:	42bb      	cmp	r3, r7
 800557e:	460d      	mov	r5, r1
 8005580:	d9f4      	bls.n	800556c <_printf_i+0x110>
 8005582:	2b08      	cmp	r3, #8
 8005584:	d10b      	bne.n	800559e <_printf_i+0x142>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	07df      	lsls	r7, r3, #31
 800558a:	d508      	bpl.n	800559e <_printf_i+0x142>
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	6861      	ldr	r1, [r4, #4]
 8005590:	4299      	cmp	r1, r3
 8005592:	bfde      	ittt	le
 8005594:	2330      	movle	r3, #48	@ 0x30
 8005596:	f806 3c01 	strble.w	r3, [r6, #-1]
 800559a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800559e:	1b92      	subs	r2, r2, r6
 80055a0:	6122      	str	r2, [r4, #16]
 80055a2:	f8cd a000 	str.w	sl, [sp]
 80055a6:	464b      	mov	r3, r9
 80055a8:	aa03      	add	r2, sp, #12
 80055aa:	4621      	mov	r1, r4
 80055ac:	4640      	mov	r0, r8
 80055ae:	f7ff fee7 	bl	8005380 <_printf_common>
 80055b2:	3001      	adds	r0, #1
 80055b4:	d14a      	bne.n	800564c <_printf_i+0x1f0>
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	b004      	add	sp, #16
 80055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	f043 0320 	orr.w	r3, r3, #32
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	4832      	ldr	r0, [pc, #200]	@ (8005694 <_printf_i+0x238>)
 80055ca:	2778      	movs	r7, #120	@ 0x78
 80055cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	6831      	ldr	r1, [r6, #0]
 80055d4:	061f      	lsls	r7, r3, #24
 80055d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80055da:	d402      	bmi.n	80055e2 <_printf_i+0x186>
 80055dc:	065f      	lsls	r7, r3, #25
 80055de:	bf48      	it	mi
 80055e0:	b2ad      	uxthmi	r5, r5
 80055e2:	6031      	str	r1, [r6, #0]
 80055e4:	07d9      	lsls	r1, r3, #31
 80055e6:	bf44      	itt	mi
 80055e8:	f043 0320 	orrmi.w	r3, r3, #32
 80055ec:	6023      	strmi	r3, [r4, #0]
 80055ee:	b11d      	cbz	r5, 80055f8 <_printf_i+0x19c>
 80055f0:	2310      	movs	r3, #16
 80055f2:	e7ad      	b.n	8005550 <_printf_i+0xf4>
 80055f4:	4826      	ldr	r0, [pc, #152]	@ (8005690 <_printf_i+0x234>)
 80055f6:	e7e9      	b.n	80055cc <_printf_i+0x170>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	f023 0320 	bic.w	r3, r3, #32
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	e7f6      	b.n	80055f0 <_printf_i+0x194>
 8005602:	4616      	mov	r6, r2
 8005604:	e7bd      	b.n	8005582 <_printf_i+0x126>
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	6825      	ldr	r5, [r4, #0]
 800560a:	6961      	ldr	r1, [r4, #20]
 800560c:	1d18      	adds	r0, r3, #4
 800560e:	6030      	str	r0, [r6, #0]
 8005610:	062e      	lsls	r6, r5, #24
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	d501      	bpl.n	800561a <_printf_i+0x1be>
 8005616:	6019      	str	r1, [r3, #0]
 8005618:	e002      	b.n	8005620 <_printf_i+0x1c4>
 800561a:	0668      	lsls	r0, r5, #25
 800561c:	d5fb      	bpl.n	8005616 <_printf_i+0x1ba>
 800561e:	8019      	strh	r1, [r3, #0]
 8005620:	2300      	movs	r3, #0
 8005622:	6123      	str	r3, [r4, #16]
 8005624:	4616      	mov	r6, r2
 8005626:	e7bc      	b.n	80055a2 <_printf_i+0x146>
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	1d1a      	adds	r2, r3, #4
 800562c:	6032      	str	r2, [r6, #0]
 800562e:	681e      	ldr	r6, [r3, #0]
 8005630:	6862      	ldr	r2, [r4, #4]
 8005632:	2100      	movs	r1, #0
 8005634:	4630      	mov	r0, r6
 8005636:	f7fa fdd3 	bl	80001e0 <memchr>
 800563a:	b108      	cbz	r0, 8005640 <_printf_i+0x1e4>
 800563c:	1b80      	subs	r0, r0, r6
 800563e:	6060      	str	r0, [r4, #4]
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	2300      	movs	r3, #0
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800564a:	e7aa      	b.n	80055a2 <_printf_i+0x146>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	4632      	mov	r2, r6
 8005650:	4649      	mov	r1, r9
 8005652:	4640      	mov	r0, r8
 8005654:	47d0      	blx	sl
 8005656:	3001      	adds	r0, #1
 8005658:	d0ad      	beq.n	80055b6 <_printf_i+0x15a>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	079b      	lsls	r3, r3, #30
 800565e:	d413      	bmi.n	8005688 <_printf_i+0x22c>
 8005660:	68e0      	ldr	r0, [r4, #12]
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	4298      	cmp	r0, r3
 8005666:	bfb8      	it	lt
 8005668:	4618      	movlt	r0, r3
 800566a:	e7a6      	b.n	80055ba <_printf_i+0x15e>
 800566c:	2301      	movs	r3, #1
 800566e:	4632      	mov	r2, r6
 8005670:	4649      	mov	r1, r9
 8005672:	4640      	mov	r0, r8
 8005674:	47d0      	blx	sl
 8005676:	3001      	adds	r0, #1
 8005678:	d09d      	beq.n	80055b6 <_printf_i+0x15a>
 800567a:	3501      	adds	r5, #1
 800567c:	68e3      	ldr	r3, [r4, #12]
 800567e:	9903      	ldr	r1, [sp, #12]
 8005680:	1a5b      	subs	r3, r3, r1
 8005682:	42ab      	cmp	r3, r5
 8005684:	dcf2      	bgt.n	800566c <_printf_i+0x210>
 8005686:	e7eb      	b.n	8005660 <_printf_i+0x204>
 8005688:	2500      	movs	r5, #0
 800568a:	f104 0619 	add.w	r6, r4, #25
 800568e:	e7f5      	b.n	800567c <_printf_i+0x220>
 8005690:	080057e1 	.word	0x080057e1
 8005694:	080057f2 	.word	0x080057f2

08005698 <memmove>:
 8005698:	4288      	cmp	r0, r1
 800569a:	b510      	push	{r4, lr}
 800569c:	eb01 0402 	add.w	r4, r1, r2
 80056a0:	d902      	bls.n	80056a8 <memmove+0x10>
 80056a2:	4284      	cmp	r4, r0
 80056a4:	4623      	mov	r3, r4
 80056a6:	d807      	bhi.n	80056b8 <memmove+0x20>
 80056a8:	1e43      	subs	r3, r0, #1
 80056aa:	42a1      	cmp	r1, r4
 80056ac:	d008      	beq.n	80056c0 <memmove+0x28>
 80056ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056b6:	e7f8      	b.n	80056aa <memmove+0x12>
 80056b8:	4402      	add	r2, r0
 80056ba:	4601      	mov	r1, r0
 80056bc:	428a      	cmp	r2, r1
 80056be:	d100      	bne.n	80056c2 <memmove+0x2a>
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ca:	e7f7      	b.n	80056bc <memmove+0x24>

080056cc <_sbrk_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4d06      	ldr	r5, [pc, #24]	@ (80056e8 <_sbrk_r+0x1c>)
 80056d0:	2300      	movs	r3, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fb fdf8 	bl	80012cc <_sbrk>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_sbrk_r+0x1a>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_sbrk_r+0x1a>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	200003a8 	.word	0x200003a8

080056ec <memcpy>:
 80056ec:	440a      	add	r2, r1
 80056ee:	4291      	cmp	r1, r2
 80056f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056f4:	d100      	bne.n	80056f8 <memcpy+0xc>
 80056f6:	4770      	bx	lr
 80056f8:	b510      	push	{r4, lr}
 80056fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005702:	4291      	cmp	r1, r2
 8005704:	d1f9      	bne.n	80056fa <memcpy+0xe>
 8005706:	bd10      	pop	{r4, pc}

08005708 <_realloc_r>:
 8005708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570c:	4607      	mov	r7, r0
 800570e:	4614      	mov	r4, r2
 8005710:	460d      	mov	r5, r1
 8005712:	b921      	cbnz	r1, 800571e <_realloc_r+0x16>
 8005714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005718:	4611      	mov	r1, r2
 800571a:	f7ff bc4d 	b.w	8004fb8 <_malloc_r>
 800571e:	b92a      	cbnz	r2, 800572c <_realloc_r+0x24>
 8005720:	f7ff fbde 	bl	8004ee0 <_free_r>
 8005724:	4625      	mov	r5, r4
 8005726:	4628      	mov	r0, r5
 8005728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800572c:	f000 f81a 	bl	8005764 <_malloc_usable_size_r>
 8005730:	4284      	cmp	r4, r0
 8005732:	4606      	mov	r6, r0
 8005734:	d802      	bhi.n	800573c <_realloc_r+0x34>
 8005736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800573a:	d8f4      	bhi.n	8005726 <_realloc_r+0x1e>
 800573c:	4621      	mov	r1, r4
 800573e:	4638      	mov	r0, r7
 8005740:	f7ff fc3a 	bl	8004fb8 <_malloc_r>
 8005744:	4680      	mov	r8, r0
 8005746:	b908      	cbnz	r0, 800574c <_realloc_r+0x44>
 8005748:	4645      	mov	r5, r8
 800574a:	e7ec      	b.n	8005726 <_realloc_r+0x1e>
 800574c:	42b4      	cmp	r4, r6
 800574e:	4622      	mov	r2, r4
 8005750:	4629      	mov	r1, r5
 8005752:	bf28      	it	cs
 8005754:	4632      	movcs	r2, r6
 8005756:	f7ff ffc9 	bl	80056ec <memcpy>
 800575a:	4629      	mov	r1, r5
 800575c:	4638      	mov	r0, r7
 800575e:	f7ff fbbf 	bl	8004ee0 <_free_r>
 8005762:	e7f1      	b.n	8005748 <_realloc_r+0x40>

08005764 <_malloc_usable_size_r>:
 8005764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005768:	1f18      	subs	r0, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfbc      	itt	lt
 800576e:	580b      	ldrlt	r3, [r1, r0]
 8005770:	18c0      	addlt	r0, r0, r3
 8005772:	4770      	bx	lr

08005774 <_init>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr

08005780 <_fini>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr
