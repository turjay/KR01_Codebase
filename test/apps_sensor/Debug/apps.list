
apps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c4  080057c4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080057c4  080057c4  000067c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057cc  080057cc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057cc  080057cc  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057d0  080057d0  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080057d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000350  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b8  200003b8  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef9b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f8  00000000  00000000  00016033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00018330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab2  00000000  00000000  000190e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c12  00000000  00000000  00019b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e17  00000000  00000000  0003c7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8795  00000000  00000000  0004d5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125d50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e78  00000000  00000000  00125d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00129c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005734 	.word	0x08005734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005734 	.word	0x08005734

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <APPS_Init>:
extern DMA_HandleTypeDef hdma_tim3_ch1;

static uint32_t pwm_buffer[1] = {0}; // PWM Duty Buffer

void APPS_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, adcdata, ADC_CHANNEL_COUNT);
 8000574:	2202      	movs	r2, #2
 8000576:	4906      	ldr	r1, [pc, #24]	@ (8000590 <APPS_Init+0x20>)
 8000578:	4806      	ldr	r0, [pc, #24]	@ (8000594 <APPS_Init+0x24>)
 800057a:	f001 f963 	bl	8001844 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim4);
 800057e:	4806      	ldr	r0, [pc, #24]	@ (8000598 <APPS_Init+0x28>)
 8000580:	f003 f902 	bl	8003788 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	4805      	ldr	r0, [pc, #20]	@ (800059c <APPS_Init+0x2c>)
 8000588:	f003 f9c0 	bl	800390c <HAL_TIM_PWM_Start>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000084 	.word	0x20000084
 8000594:	2000009c 	.word	0x2000009c
 8000598:	200001d4 	.word	0x200001d4
 800059c:	2000018c 	.word	0x2000018c

080005a0 <APPS_Loop>:

void APPS_Loop(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b089      	sub	sp, #36	@ 0x24
 80005a4:	af00      	add	r7, sp, #0
    if (!apps_enabled)
 80005a6:	4b6b      	ldr	r3, [pc, #428]	@ (8000754 <APPS_Loop+0x1b4>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d004      	beq.n	80005be <APPS_Loop+0x1e>
    {
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // PWM'i de sıfırla
 80005b4:	4b68      	ldr	r3, [pc, #416]	@ (8000758 <APPS_Loop+0x1b8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 80005bc:	e0c5      	b.n	800074a <APPS_Loop+0x1aa>
    }

    int32_t val1 = adcdata[0];
 80005be:	4b67      	ldr	r3, [pc, #412]	@ (800075c <APPS_Loop+0x1bc>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	617b      	str	r3, [r7, #20]
    int32_t val2 = adcdata[1];
 80005c4:	4b65      	ldr	r3, [pc, #404]	@ (800075c <APPS_Loop+0x1bc>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	613b      	str	r3, [r7, #16]

    float norm1 = (val1 - sensor1_min) / (float)(sensor1_max - sensor1_min);
 80005ca:	4b65      	ldr	r3, [pc, #404]	@ (8000760 <APPS_Loop+0x1c0>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	ee07 3a90 	vmov	s15, r3
 80005d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005dc:	4b61      	ldr	r3, [pc, #388]	@ (8000764 <APPS_Loop+0x1c4>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b5f      	ldr	r3, [pc, #380]	@ (8000760 <APPS_Loop+0x1c0>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005f4:	edc7 7a07 	vstr	s15, [r7, #28]
    float norm2 = (val2 - sensor2_min) / (float)(sensor2_max - sensor2_min);
 80005f8:	4b5b      	ldr	r3, [pc, #364]	@ (8000768 <APPS_Loop+0x1c8>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	1a9b      	subs	r3, r3, r2
 8000602:	ee07 3a90 	vmov	s15, r3
 8000606:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800060a:	4b58      	ldr	r3, [pc, #352]	@ (800076c <APPS_Loop+0x1cc>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4b55      	ldr	r3, [pc, #340]	@ (8000768 <APPS_Loop+0x1c8>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	ee07 3a90 	vmov	s15, r3
 800061a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800061e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000622:	edc7 7a06 	vstr	s15, [r7, #24]

    if (norm1 < 0.0f) norm1 = 0.0f;
 8000626:	edd7 7a07 	vldr	s15, [r7, #28]
 800062a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	d502      	bpl.n	800063a <APPS_Loop+0x9a>
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    if (norm1 > 1.0f) norm1 = 1.0f;
 800063a:	edd7 7a07 	vldr	s15, [r7, #28]
 800063e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	dd02      	ble.n	8000652 <APPS_Loop+0xb2>
 800064c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000650:	61fb      	str	r3, [r7, #28]
    if (norm2 < 0.0f) norm2 = 0.0f;
 8000652:	edd7 7a06 	vldr	s15, [r7, #24]
 8000656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800065a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065e:	d502      	bpl.n	8000666 <APPS_Loop+0xc6>
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
    if (norm2 > 1.0f) norm2 = 1.0f;
 8000666:	edd7 7a06 	vldr	s15, [r7, #24]
 800066a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800066e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000676:	dd02      	ble.n	800067e <APPS_Loop+0xde>
 8000678:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800067c:	61bb      	str	r3, [r7, #24]

    // İki normalize değer arasındaki fark
    float diff = fabsf(norm1 - norm2);
 800067e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000682:	edd7 7a06 	vldr	s15, [r7, #24]
 8000686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800068a:	eef0 7ae7 	vabs.f32	s15, s15
 800068e:	edc7 7a03 	vstr	s15, [r7, #12]

    uint32_t now = __HAL_TIM_GET_COUNTER(&htim4);
 8000692:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <APPS_Loop+0x1d0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000698:	60bb      	str	r3, [r7, #8]

    // Eğer fark toleransı aşarsa
    if (diff > 0.10f) {
 800069a:	edd7 7a03 	vldr	s15, [r7, #12]
 800069e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000774 <APPS_Loop+0x1d4>
 80006a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	dd1d      	ble.n	80006e8 <APPS_Loop+0x148>
        if (!diff_flag) {
 80006ac:	4b32      	ldr	r3, [pc, #200]	@ (8000778 <APPS_Loop+0x1d8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <APPS_Loop+0x128>
            diff_flag = true;
 80006ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <APPS_Loop+0x1d8>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
            diff_start_time = now;  // Takip başlangıcı
 80006c0:	4a2e      	ldr	r2, [pc, #184]	@ (800077c <APPS_Loop+0x1dc>)
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	e012      	b.n	80006ee <APPS_Loop+0x14e>
        } else {
            // Süreyi kontrol et
            uint32_t elapsed = (now >= diff_start_time) ? (now - diff_start_time) : (0xFFFFFFFF - diff_start_time + now + 1);
 80006c8:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <APPS_Loop+0x1dc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	607b      	str	r3, [r7, #4]

            if (elapsed >= 100) { // 100ms geçtiyse
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b63      	cmp	r3, #99	@ 0x63
 80006d6:	d90a      	bls.n	80006ee <APPS_Loop+0x14e>
                permanent_fault = true;
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <APPS_Loop+0x1e0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <APPS_Loop+0x1b8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006e6:	e002      	b.n	80006ee <APPS_Loop+0x14e>

            }
        }
    } else {
        diff_flag = false;
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <APPS_Loop+0x1d8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
    }

    // Eğer kalıcı hata yoksa PWM duty güncellenir

        if (!permanent_fault) {
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <APPS_Loop+0x1e0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d026      	beq.n	800074a <APPS_Loop+0x1aa>
            pwm_buffer[0] = (uint32_t)(norm1 * 49);
 80006fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000700:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000784 <APPS_Loop+0x1e4>
 8000704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800070c:	ee17 2a90 	vmov	r2, s15
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <APPS_Loop+0x1e8>)
 8000712:	601a      	str	r2, [r3, #0]

            // Duty değeri sınırlandırılır
            if (pwm_buffer[0] < 1) {
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <APPS_Loop+0x1e8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <APPS_Loop+0x184>
                pwm_buffer[0] = 0;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <APPS_Loop+0x1e8>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	e006      	b.n	8000732 <APPS_Loop+0x192>
            } else if (pwm_buffer[0] > 48) {
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <APPS_Loop+0x1e8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b30      	cmp	r3, #48	@ 0x30
 800072a:	d902      	bls.n	8000732 <APPS_Loop+0x192>
                pwm_buffer[0] = 49;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <APPS_Loop+0x1e8>)
 800072e:	2231      	movs	r2, #49	@ 0x31
 8000730:	601a      	str	r2, [r3, #0]
            }
            if(!permanent_fault){
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <APPS_Loop+0x1e0>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <APPS_Loop+0x1aa>

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_buffer[0]);
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <APPS_Loop+0x1b8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a10      	ldr	r2, [pc, #64]	@ (8000788 <APPS_Loop+0x1e8>)
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	635a      	str	r2, [r3, #52]	@ 0x34
            }


    }
}
 800074a:	3724      	adds	r7, #36	@ 0x24
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000264 	.word	0x20000264
 8000758:	2000018c 	.word	0x2000018c
 800075c:	20000084 	.word	0x20000084
 8000760:	20000000 	.word	0x20000000
 8000764:	20000002 	.word	0x20000002
 8000768:	20000004 	.word	0x20000004
 800076c:	20000006 	.word	0x20000006
 8000770:	200001d4 	.word	0x200001d4
 8000774:	3dcccccd 	.word	0x3dcccccd
 8000778:	2000008c 	.word	0x2000008c
 800077c:	20000090 	.word	0x20000090
 8000780:	2000008d 	.word	0x2000008d
 8000784:	42440000 	.word	0x42440000
 8000788:	20000094 	.word	0x20000094

0800078c <APPS_Deinit>:

void APPS_Deinit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc1);
 8000790:	4809      	ldr	r0, [pc, #36]	@ (80007b8 <APPS_Deinit+0x2c>)
 8000792:	f001 f96b 	bl	8001a6c <HAL_ADC_Stop_DMA>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000796:	2100      	movs	r1, #0
 8000798:	4808      	ldr	r0, [pc, #32]	@ (80007bc <APPS_Deinit+0x30>)
 800079a:	f003 f97f 	bl	8003a9c <HAL_TIM_PWM_Stop>

    adcdata[0] = 0;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <APPS_Deinit+0x34>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
    adcdata[1] = 0;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <APPS_Deinit+0x34>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <APPS_Deinit+0x30>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000009c 	.word	0x2000009c
 80007bc:	2000018c 	.word	0x2000018c
 80007c0:	20000084 	.word	0x20000084

080007c4 <GYRO_Init>:
ADC_HandleTypeDef* hadc_gyro = &hadc2;

uint16_t gyrodata[2];

void GYRO_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
    // Başlangıçta yapılacak bir şey yok, ADC ayarı CubeMX'te yapılmalı
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <GYRO_Loop>:

void GYRO_Loop(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]

    // ADC2_IN4 -> PA4
    sConfig.Channel = ADC_CHANNEL_4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(hadc_gyro, &sConfig);
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <GYRO_Loop+0xb0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	463a      	mov	r2, r7
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f9bc 	bl	8001b78 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(hadc_gyro);
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <GYRO_Loop+0xb0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fe8d 	bl	8001524 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc_gyro, HAL_MAX_DELAY);
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <GYRO_Loop+0xb0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f04f 31ff 	mov.w	r1, #4294967295
 8000812:	4618      	mov	r0, r3
 8000814:	f000 ff8b 	bl	800172e <HAL_ADC_PollForConversion>
    gyrodata[0] = HAL_ADC_GetValue(hadc_gyro);
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <GYRO_Loop+0xb0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f97f 	bl	8001b20 <HAL_ADC_GetValue>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <GYRO_Loop+0xb4>)
 8000828:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(hadc_gyro);
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <GYRO_Loop+0xb0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 ff4a 	bl	80016c8 <HAL_ADC_Stop>

    // ADC2_IN5 -> PA5
    sConfig.Channel = ADC_CHANNEL_5;
 8000834:	2305      	movs	r3, #5
 8000836:	603b      	str	r3, [r7, #0]
    HAL_ADC_ConfigChannel(hadc_gyro, &sConfig);
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <GYRO_Loop+0xb0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	463a      	mov	r2, r7
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f001 f999 	bl	8001b78 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(hadc_gyro);
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <GYRO_Loop+0xb0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fe6a 	bl	8001524 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc_gyro, HAL_MAX_DELAY);
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <GYRO_Loop+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	4618      	mov	r0, r3
 800085a:	f000 ff68 	bl	800172e <HAL_ADC_PollForConversion>
    gyrodata[1] = HAL_ADC_GetValue(hadc_gyro);
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <GYRO_Loop+0xb0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f95c 	bl	8001b20 <HAL_ADC_GetValue>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <GYRO_Loop+0xb4>)
 800086e:	805a      	strh	r2, [r3, #2]
    HAL_ADC_Stop(hadc_gyro);
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <GYRO_Loop+0xb0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 ff27 	bl	80016c8 <HAL_ADC_Stop>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	20000098 	.word	0x20000098

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b09f      	sub	sp, #124	@ 0x7c
 8000890:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	char uart_buf[100];  // snprintf için
	bool led_shown = false;
 8000892:	2300      	movs	r3, #0
 8000894:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fd6a 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f896 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80008a0:	f000 faac 	bl	8000dfc <MX_DMA_Init>
  MX_GPIO_Init();
 80008a4:	f000 faca 	bl	8000e3c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008a8:	f000 f8fa 	bl	8000aa0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008ac:	f000 f9b8 	bl	8000c20 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008b0:	f000 fa2c 	bl	8000d0c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008b4:	f000 fa78 	bl	8000da8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80008b8:	f000 f952 	bl	8000b60 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  GYRO_Init();
 80008bc:	f7ff ff82 	bl	80007c4 <GYRO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GYRO_Loop(); // GYRO her zaman çalışır
 80008c0:	f7ff ff88 	bl	80007d4 <GYRO_Loop>

	    GPIO_PinState brake_pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80008c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c8:	483a      	ldr	r0, [pc, #232]	@ (80009b4 <main+0x128>)
 80008ca:	f002 fa83 	bl	8002dd4 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	    GPIO_PinState rtd_button    = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80008d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d8:	4836      	ldr	r0, [pc, #216]	@ (80009b4 <main+0x128>)
 80008da:	f002 fa7b 	bl	8002dd4 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	    // RTD butonuna basıldı ve fren de basılıysa APPS aktif edilir
	    if (brake_pressed == GPIO_PIN_SET && rtd_button == GPIO_PIN_SET && !apps_enabled)
 80008e4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d129      	bne.n	8000940 <main+0xb4>
 80008ec:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d125      	bne.n	8000940 <main+0xb4>
 80008f4:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <main+0x12c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	f083 0301 	eor.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d01e      	beq.n	8000940 <main+0xb4>
	    {
	        apps_enabled = true;
 8000902:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <main+0x12c>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
	        APPS_Init();
 8000908:	f7ff fe32 	bl	8000570 <APPS_Init>

	        if (!led_shown)
 800090c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000910:	f083 0301 	eor.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d012      	beq.n	8000940 <main+0xb4>
	        {
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // LED aç
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000920:	4824      	ldr	r0, [pc, #144]	@ (80009b4 <main+0x128>)
 8000922:	f002 fa6f 	bl	8002e04 <HAL_GPIO_WritePin>
	            HAL_Delay(3000);
 8000926:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800092a:	f000 fd93 	bl	8001454 <HAL_Delay>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // LED kapa
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000934:	481f      	ldr	r0, [pc, #124]	@ (80009b4 <main+0x128>)
 8000936:	f002 fa65 	bl	8002e04 <HAL_GPIO_WritePin>
	            led_shown = true;
 800093a:	2301      	movs	r3, #1
 800093c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	        }
	    }

	    // RTD butonu tekrar kapatılırsa APPS'i devreden çıkar
	    if (apps_enabled && rtd_button == GPIO_PIN_RESET)
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <main+0x12c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00b      	beq.n	8000960 <main+0xd4>
 8000948:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800094c:	2b00      	cmp	r3, #0
 800094e:	d107      	bne.n	8000960 <main+0xd4>
	    {
	        apps_enabled = false;
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <main+0x12c>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	        led_shown = false;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	        APPS_Deinit(); // Hem ADC hem PWM durur
 800095c:	f7ff ff16 	bl	800078c <APPS_Deinit>
	    }

	    if (apps_enabled)
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <main+0x12c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <main+0xe0>
	    {
	        APPS_Loop();  // Sadece APPS aktifse çalışsın
 8000968:	f7ff fe1a 	bl	80005a0 <APPS_Loop>
	    }

	    snprintf(uart_buf, sizeof(uart_buf),
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <main+0x130>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <main+0x130>)
 8000972:	685b      	ldr	r3, [r3, #4]
	             "APPS: %lu, %lu | GYRO: %lu, %lu\r\n",
	             adcdata[0], adcdata[1], gyrodata[0], gyrodata[1]);
 8000974:	4912      	ldr	r1, [pc, #72]	@ (80009c0 <main+0x134>)
 8000976:	8809      	ldrh	r1, [r1, #0]
	    snprintf(uart_buf, sizeof(uart_buf),
 8000978:	460c      	mov	r4, r1
	             adcdata[0], adcdata[1], gyrodata[0], gyrodata[1]);
 800097a:	4911      	ldr	r1, [pc, #68]	@ (80009c0 <main+0x134>)
 800097c:	8849      	ldrh	r1, [r1, #2]
	    snprintf(uart_buf, sizeof(uart_buf),
 800097e:	4638      	mov	r0, r7
 8000980:	9102      	str	r1, [sp, #8]
 8000982:	9401      	str	r4, [sp, #4]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4613      	mov	r3, r2
 8000988:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <main+0x138>)
 800098a:	2164      	movs	r1, #100	@ 0x64
 800098c:	f004 fa1e 	bl	8004dcc <sniprintf>

	    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000990:	463b      	mov	r3, r7
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fc1c 	bl	80001d0 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	4639      	mov	r1, r7
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <main+0x13c>)
 80009a4:	f003 fe56 	bl	8004654 <HAL_UART_Transmit>
	    HAL_Delay(300);
 80009a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009ac:	f000 fd52 	bl	8001454 <HAL_Delay>
  {
 80009b0:	e786      	b.n	80008c0 <main+0x34>
 80009b2:	bf00      	nop
 80009b4:	40020000 	.word	0x40020000
 80009b8:	20000264 	.word	0x20000264
 80009bc:	20000084 	.word	0x20000084
 80009c0:	20000098 	.word	0x20000098
 80009c4:	0800574c 	.word	0x0800574c
 80009c8:	2000021c 	.word	0x2000021c

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	@ 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	@ 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fa2a 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b28      	ldr	r3, [pc, #160]	@ (8000a98 <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a27      	ldr	r2, [pc, #156]	@ (8000a98 <SystemClock_Config+0xcc>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a00:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <SystemClock_Config+0xd0>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <SystemClock_Config+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a40:	23a8      	movs	r3, #168	@ 0xa8
 8000a42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 f9f1 	bl	8002e38 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a5c:	f000 fa4c 	bl	8000ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fc52 	bl	8003328 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a8a:	f000 fa35 	bl	8000ef8 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	@ 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000ab4:	4a28      	ldr	r2, [pc, #160]	@ (8000b58 <MX_ADC1_Init+0xb8>)
 8000ab6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000aba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000abe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b5c <MX_ADC1_Init+0xbc>)
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b00:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000b02:	f000 fccb 	bl	800149c <HAL_ADC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b0c:	f000 f9f4 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000b22:	f001 f829 	bl	8001b78 <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b2c:	f000 f9e4 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_ADC1_Init+0xb4>)
 8000b3e:	f001 f81b 	bl	8001b78 <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b48:	f000 f9d6 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000009c 	.word	0x2000009c
 8000b58:	40012000 	.word	0x40012000
 8000b5c:	0f000001 	.word	0x0f000001

08000b60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000b74:	4a28      	ldr	r2, [pc, #160]	@ (8000c18 <MX_ADC2_Init+0xb8>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000b7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000b86:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c1c <MX_ADC2_Init+0xbc>)
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000bae:	2202      	movs	r2, #2
 8000bb0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bc0:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000bc2:	f000 fc6b 	bl	800149c <HAL_ADC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 f994 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000be2:	f000 ffc9 	bl	8001b78 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000bec:	f000 f984 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_ADC2_Init+0xb4>)
 8000bfe:	f000 ffbb 	bl	8001b78 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000c08:	f000 f976 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000e4 	.word	0x200000e4
 8000c18:	40012100 	.word	0x40012100
 8000c1c:	0f000001 	.word	0x0f000001

08000c20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	@ 0x38
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c50:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c52:	4a2d      	ldr	r2, [pc, #180]	@ (8000d08 <MX_TIM3_Init+0xe8>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000c56:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c58:	2253      	movs	r2, #83	@ 0x53
 8000c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c64:	2231      	movs	r2, #49	@ 0x31
 8000c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c74:	4823      	ldr	r0, [pc, #140]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c76:	f002 fd37 	bl	80036e8 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c80:	f000 f93a 	bl	8000ef8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481c      	ldr	r0, [pc, #112]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000c92:	f003 f835 	bl	8003d00 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c9c:	f000 f92c 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ca0:	4818      	ldr	r0, [pc, #96]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000ca2:	f002 fdd9 	bl	8003858 <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000cac:	f000 f924 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4811      	ldr	r0, [pc, #68]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000cc0:	f003 fbfc 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000cca:	f000 f915 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	@ 0x60
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000ce6:	f002 ff49 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000cf0:	f000 f902 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf4:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <MX_TIM3_Init+0xe4>)
 8000cf6:	f000 fa0d 	bl	8001114 <HAL_TIM_MspPostInit>

}
 8000cfa:	bf00      	nop
 8000cfc:	3738      	adds	r7, #56	@ 0x38
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000018c 	.word	0x2000018c
 8000d08:	40000400 	.word	0x40000400

08000d0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000da4 <MX_TIM4_Init+0x98>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d30:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d50:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d52:	f002 fcc9 	bl	80036e8 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d5c:	f000 f8cc 	bl	8000ef8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d6e:	f002 ffc7 	bl	8003d00 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d78:	f000 f8be 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_TIM4_Init+0x94>)
 8000d8a:	f003 fb97 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f8b0 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001d4 	.word	0x200001d4
 8000da4:	40000800 	.word	0x40000800

08000da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <MX_USART2_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000db4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000de0:	f003 fbe8 	bl	80045b4 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f000 f885 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000021c 	.word	0x2000021c
 8000df8:	40004400 	.word	0x40004400

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_DMA_Init+0x3c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e38 <MX_DMA_Init+0x3c>)
 8000e0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_DMA_Init+0x3c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	203c      	movs	r0, #60	@ 0x3c
 8000e24:	f001 fa23 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e28:	203c      	movs	r0, #60	@ 0x3c
 8000e2a:	f001 fa3c 	bl	80022a6 <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <MX_GPIO_Init+0xb4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a25      	ldr	r2, [pc, #148]	@ (8000ef0 <MX_GPIO_Init+0xb4>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <MX_GPIO_Init+0xb4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_GPIO_Init+0xb4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <MX_GPIO_Init+0xb4>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_GPIO_Init+0xb4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e90:	4818      	ldr	r0, [pc, #96]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000e92:	f001 ffb7 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4811      	ldr	r0, [pc, #68]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000eb0:	f001 fdf4 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000eca:	f001 fde7 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_GPIO_Init+0xb8>)
 8000ee4:	f001 fdda 	bl	8002a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <Error_Handler+0x8>

08000f04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a46      	ldr	r2, [pc, #280]	@ (800108c <HAL_ADC_MspInit+0x138>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d159      	bne.n	800102a <HAL_ADC_MspInit+0xd6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	4b45      	ldr	r3, [pc, #276]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a44      	ldr	r2, [pc, #272]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b42      	ldr	r3, [pc, #264]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	4b3e      	ldr	r3, [pc, #248]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4834      	ldr	r0, [pc, #208]	@ (8001094 <HAL_ADC_MspInit+0x140>)
 8000fc2:	f001 fd6b 	bl	8002a9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000fc6:	4b34      	ldr	r3, [pc, #208]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000fc8:	4a34      	ldr	r2, [pc, #208]	@ (800109c <HAL_ADC_MspInit+0x148>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd2:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fde:	4b2e      	ldr	r3, [pc, #184]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000fe8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000ff0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8000ff8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ffc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8001000:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001004:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800100c:	4822      	ldr	r0, [pc, #136]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 800100e:	f001 f965 	bl	80022dc <HAL_DMA_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001018:	f7ff ff6e 	bl	8000ef8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8001020:	639a      	str	r2, [r3, #56]	@ 0x38
 8001022:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <HAL_ADC_MspInit+0x144>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001028:	e02c      	b.n	8001084 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <HAL_ADC_MspInit+0x14c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d127      	bne.n	8001084 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 800103a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6453      	str	r3, [r2, #68]	@ 0x44
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_ADC_MspInit+0x13c>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800106c:	2330      	movs	r3, #48	@ 0x30
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <HAL_ADC_MspInit+0x140>)
 8001080:	f001 fd0c 	bl	8002a9c <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	@ 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	2000012c 	.word	0x2000012c
 800109c:	40026470 	.word	0x40026470
 80010a0:	40012100 	.word	0x40012100

080010a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <HAL_TIM_Base_MspInit+0x64>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10e      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	4a13      	ldr	r2, [pc, #76]	@ (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010d2:	e012      	b.n	80010fa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <HAL_TIM_Base_MspInit+0x6c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10d      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a09      	ldr	r2, [pc, #36]	@ (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40000400 	.word	0x40000400
 800110c:	40023800 	.word	0x40023800
 8001110:	40000800 	.word	0x40000800

08001114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <HAL_TIM_MspPostInit+0x68>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d11d      	bne.n	8001172 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_TIM_MspPostInit+0x6c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <HAL_TIM_MspPostInit+0x6c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_TIM_MspPostInit+0x6c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001162:	2302      	movs	r3, #2
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <HAL_TIM_MspPostInit+0x70>)
 800116e:	f001 fc95 	bl	8002a9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40000400 	.word	0x40000400
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000

08001188 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_UART_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011e2:	230c      	movs	r3, #12
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f2:	2307      	movs	r3, #7
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	@ (8001214 <HAL_UART_MspInit+0x8c>)
 80011fe:	f001 fc4d 	bl	8002a9c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	@ 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40004400 	.word	0x40004400
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <NMI_Handler+0x4>

08001220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <MemManage_Handler+0x4>

08001230 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <UsageFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126e:	f000 f8d1 	bl	8001414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <DMA2_Stream4_IRQHandler+0x10>)
 800127e:	f001 f9a3 	bl	80025c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000012c 	.word	0x2000012c

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	@ (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f003 fdc2 	bl	8004e44 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20020000 	.word	0x20020000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	20000268 	.word	0x20000268
 80012f4:	200003b8 	.word	0x200003b8

080012f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <SystemInit+0x20>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001302:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <SystemInit+0x20>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001354 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001320:	f7ff ffea 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	@ (8001358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	@ (800135c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	@ (8001368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f003 fd81 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff fa9d 	bl	800088c <main>
  bx  lr    
 8001352:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001360:	080057d4 	.word	0x080057d4
  ldr r2, =_sbss
 8001364:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001368:	200003b8 	.word	0x200003b8

0800136c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0d      	ldr	r2, [pc, #52]	@ (80013b0 <HAL_Init+0x40>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800137e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <HAL_Init+0x40>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800138a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <HAL_Init+0x40>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 ff5d 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139e:	200f      	movs	r0, #15
 80013a0:	f000 f808 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a4:	f7ff fdae 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023c00 	.word	0x40023c00

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_InitTick+0x54>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_InitTick+0x58>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 ff75 	bl	80022c2 <HAL_SYSTICK_Config>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00e      	b.n	8001400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d80a      	bhi.n	80013fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f000 ff3d 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f4:	4a06      	ldr	r2, [pc, #24]	@ (8001410 <HAL_InitTick+0x5c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000000c 	.word	0x2000000c
 800140c:	20000014 	.word	0x20000014
 8001410:	20000010 	.word	0x20000010

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000014 	.word	0x20000014
 8001438:	2000026c 	.word	0x2000026c

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2000026c 	.word	0x2000026c

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffde 	bl	800143c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000014 	.word	0x20000014

0800149c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e033      	b.n	800151a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fd4a 	bl	8000f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014e2:	f023 0302 	bic.w	r3, r3, #2
 80014e6:	f043 0202 	orr.w	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fc64 	bl	8001dbc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f023 0303 	bic.w	r3, r3, #3
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	@ 0x40
 800150a:	e001      	b.n	8001510 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_Start+0x1a>
 800153a:	2302      	movs	r3, #2
 800153c:	e0b2      	b.n	80016a4 <HAL_ADC_Start+0x180>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d018      	beq.n	8001586 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001564:	4b52      	ldr	r3, [pc, #328]	@ (80016b0 <HAL_ADC_Start+0x18c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a52      	ldr	r2, [pc, #328]	@ (80016b4 <HAL_ADC_Start+0x190>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9a      	lsrs	r2, r3, #18
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d17a      	bne.n	800168a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015d2:	d106      	bne.n	80015e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	f023 0206 	bic.w	r2, r3, #6
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f0:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HAL_ADC_Start+0x194>)
 80015f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015fc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2b00      	cmp	r3, #0
 8001608:	d12a      	bne.n	8001660 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2b      	ldr	r2, [pc, #172]	@ (80016bc <HAL_ADC_Start+0x198>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d015      	beq.n	8001640 <HAL_ADC_Start+0x11c>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a29      	ldr	r2, [pc, #164]	@ (80016c0 <HAL_ADC_Start+0x19c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d105      	bne.n	800162a <HAL_ADC_Start+0x106>
 800161e:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <HAL_ADC_Start+0x194>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a25      	ldr	r2, [pc, #148]	@ (80016c4 <HAL_ADC_Start+0x1a0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d136      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_ADC_Start+0x194>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d130      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d129      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	e020      	b.n	80016a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <HAL_ADC_Start+0x198>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d11b      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d114      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00b      	b.n	80016a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f043 0210 	orr.w	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	40012300 	.word	0x40012300
 80016bc:	40012000 	.word	0x40012000
 80016c0:	40012100 	.word	0x40012100
 80016c4:	40012200 	.word	0x40012200

080016c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Stop+0x16>
 80016da:	2302      	movs	r3, #2
 80016dc:	e021      	b.n	8001722 <HAL_ADC_Stop+0x5a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174a:	d113      	bne.n	8001774 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800175a:	d10b      	bne.n	8001774 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e063      	b.n	800183c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001774:	f7ff fe62 	bl	800143c <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800177a:	e021      	b.n	80017c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001782:	d01d      	beq.n	80017c0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_ADC_PollForConversion+0x6c>
 800178a:	f7ff fe57 	bl	800143c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d212      	bcs.n	80017c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d00b      	beq.n	80017c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f043 0204 	orr.w	r2, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e03d      	b.n	800183c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d1d6      	bne.n	800177c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f06f 0212 	mvn.w	r2, #18
 80017d6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d123      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11f      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001812:	2b00      	cmp	r3, #0
 8001814:	d111      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Start_DMA+0x22>
 8001862:	2302      	movs	r3, #2
 8001864:	e0eb      	b.n	8001a3e <HAL_ADC_Start_DMA+0x1fa>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d018      	beq.n	80018ae <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800188c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a48 <HAL_ADC_Start_DMA+0x204>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a6e      	ldr	r2, [pc, #440]	@ (8001a4c <HAL_ADC_Start_DMA+0x208>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9a      	lsrs	r2, r3, #18
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80018a0:	e002      	b.n	80018a8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018bc:	d107      	bne.n	80018ce <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018cc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	f040 80a3 	bne.w	8001a24 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001908:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800191c:	d106      	bne.n	800192c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f023 0206 	bic.w	r2, r3, #6
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	645a      	str	r2, [r3, #68]	@ 0x44
 800192a:	e002      	b.n	8001932 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193a:	4b45      	ldr	r3, [pc, #276]	@ (8001a50 <HAL_ADC_Start_DMA+0x20c>)
 800193c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001942:	4a44      	ldr	r2, [pc, #272]	@ (8001a54 <HAL_ADC_Start_DMA+0x210>)
 8001944:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194a:	4a43      	ldr	r2, [pc, #268]	@ (8001a58 <HAL_ADC_Start_DMA+0x214>)
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001952:	4a42      	ldr	r2, [pc, #264]	@ (8001a5c <HAL_ADC_Start_DMA+0x218>)
 8001954:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800195e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800196e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800197e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	334c      	adds	r3, #76	@ 0x4c
 800198a:	4619      	mov	r1, r3
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f000 fd52 	bl	8002438 <HAL_DMA_Start_IT>
 8001994:	4603      	mov	r3, r0
 8001996:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d12a      	bne.n	80019fa <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a60 <HAL_ADC_Start_DMA+0x21c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d015      	beq.n	80019da <HAL_ADC_Start_DMA+0x196>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a64 <HAL_ADC_Start_DMA+0x220>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_Start_DMA+0x180>
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <HAL_ADC_Start_DMA+0x20c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00a      	beq.n	80019da <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a27      	ldr	r2, [pc, #156]	@ (8001a68 <HAL_ADC_Start_DMA+0x224>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d136      	bne.n	8001a3c <HAL_ADC_Start_DMA+0x1f8>
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_ADC_Start_DMA+0x20c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d130      	bne.n	8001a3c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d129      	bne.n	8001a3c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	e020      	b.n	8001a3c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a18      	ldr	r2, [pc, #96]	@ (8001a60 <HAL_ADC_Start_DMA+0x21c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d11b      	bne.n	8001a3c <HAL_ADC_Start_DMA+0x1f8>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d114      	bne.n	8001a3c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	e00b      	b.n	8001a3c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	40012300 	.word	0x40012300
 8001a54:	08001fb5 	.word	0x08001fb5
 8001a58:	0800206f 	.word	0x0800206f
 8001a5c:	0800208b 	.word	0x0800208b
 8001a60:	40012000 	.word	0x40012000
 8001a64:	40012100 	.word	0x40012100
 8001a68:	40012200 	.word	0x40012200

08001a6c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_Stop_DMA+0x1a>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e048      	b.n	8001b18 <HAL_ADC_Stop_DMA+0xac>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d130      	bne.n	8001b0e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d10f      	bne.n	8001aea <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fd0a 	bl	80024e8 <HAL_DMA_Abort>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001af8:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x1c>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e105      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x228>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d925      	bls.n	8001bf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68d9      	ldr	r1, [r3, #12]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b1e      	subs	r3, #30
 8001bba:	2207      	movs	r2, #7
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68d9      	ldr	r1, [r3, #12]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4603      	mov	r3, r0
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4403      	add	r3, r0
 8001be2:	3b1e      	subs	r3, #30
 8001be4:	409a      	lsls	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	e022      	b.n	8001c36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6919      	ldr	r1, [r3, #16]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	2207      	movs	r2, #7
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	400a      	ands	r2, r1
 8001c12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6919      	ldr	r1, [r3, #16]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4403      	add	r3, r0
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d824      	bhi.n	8001c88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3b05      	subs	r3, #5
 8001c50:	221f      	movs	r2, #31
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b05      	subs	r3, #5
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c86:	e04c      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d824      	bhi.n	8001cda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b23      	subs	r3, #35	@ 0x23
 8001ca2:	221f      	movs	r2, #31
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	400a      	ands	r2, r1
 8001cb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b23      	subs	r3, #35	@ 0x23
 8001ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cd8:	e023      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b41      	subs	r3, #65	@ 0x41
 8001cec:	221f      	movs	r2, #31
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b41      	subs	r3, #65	@ 0x41
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_ADC_ConfigChannel+0x234>)
 8001d24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a21      	ldr	r2, [pc, #132]	@ (8001db0 <HAL_ADC_ConfigChannel+0x238>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1cc>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b12      	cmp	r3, #18
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_ADC_ConfigChannel+0x238>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d123      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x21e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d003      	beq.n	8001d5e <HAL_ADC_ConfigChannel+0x1e6>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b11      	cmp	r3, #17
 8001d5c:	d11b      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d111      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <HAL_ADC_ConfigChannel+0x23c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a10      	ldr	r2, [pc, #64]	@ (8001db8 <HAL_ADC_ConfigChannel+0x240>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0c9a      	lsrs	r2, r3, #18
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40012300 	.word	0x40012300
 8001db0:	40012000 	.word	0x40012000
 8001db4:	2000000c 	.word	0x2000000c
 8001db8:	431bde83 	.word	0x431bde83

08001dbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc4:	4b79      	ldr	r3, [pc, #484]	@ (8001fac <ADC_Init+0x1f0>)
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	021a      	lsls	r2, r3, #8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6859      	ldr	r1, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	4a58      	ldr	r2, [pc, #352]	@ (8001fb0 <ADC_Init+0x1f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	e00f      	b.n	8001eba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001eb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0202 	bic.w	r2, r2, #2
 8001ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6899      	ldr	r1, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e1b      	ldrb	r3, [r3, #24]
 8001ed4:	005a      	lsls	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01b      	beq.n	8001f20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	3b01      	subs	r3, #1
 8001f14:	035a      	lsls	r2, r3, #13
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	e007      	b.n	8001f30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	051a      	lsls	r2, r3, #20
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f72:	025a      	lsls	r2, r3, #9
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6899      	ldr	r1, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	029a      	lsls	r2, r3, #10
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40012300 	.word	0x40012300
 8001fb0:	0f000001 	.word	0x0f000001

08001fb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d13c      	bne.n	8002048 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d12b      	bne.n	8002040 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d127      	bne.n	8002040 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002008:	2b00      	cmp	r3, #0
 800200a:	d119      	bne.n	8002040 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0220 	bic.w	r2, r2, #32
 800201a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7ff fd7a 	bl	8001b3a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002046:	e00e      	b.n	8002066 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7ff fd84 	bl	8001b62 <HAL_ADC_ErrorCallback>
}
 800205a:	e004      	b.n	8002066 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fd66 	bl	8001b4e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f043 0204 	orr.w	r2, r3, #4
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7ff fd59 	bl	8001b62 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db0b      	blt.n	8002146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4907      	ldr	r1, [pc, #28]	@ (8002154 <__NVIC_EnableIRQ+0x38>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	@ (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	@ (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff29 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff3e 	bl	8002100 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff8e 	bl	80021ac <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5d 	bl	8002158 <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff31 	bl	800211c <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffa2 	bl	8002214 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff f8a8 	bl	800143c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e099      	b.n	800242c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002318:	e00f      	b.n	800233a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231a:	f7ff f88f 	bl	800143c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b05      	cmp	r3, #5
 8002326:	d908      	bls.n	800233a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e078      	b.n	800242c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e8      	bne.n	800231a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <HAL_DMA_Init+0x158>)
 8002354:	4013      	ands	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	2b04      	cmp	r3, #4
 8002392:	d107      	bne.n	80023a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4313      	orrs	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d117      	bne.n	80023fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fadf 	bl	80029a4 <DMA_CheckFifoParam>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2240      	movs	r2, #64	@ 0x40
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023fa:	2301      	movs	r3, #1
 80023fc:	e016      	b.n	800242c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa96 	bl	8002938 <DMA_CalcBaseAndBitshift>
 800240c:	4603      	mov	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	223f      	movs	r2, #63	@ 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	f010803f 	.word	0xf010803f

08002438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_DMA_Start_IT+0x26>
 800245a:	2302      	movs	r3, #2
 800245c:	e040      	b.n	80024e0 <HAL_DMA_Start_IT+0xa8>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d12f      	bne.n	80024d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fa28 	bl	80028dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	223f      	movs	r2, #63	@ 0x3f
 8002492:	409a      	lsls	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0216 	orr.w	r2, r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e005      	b.n	80024de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024f6:	f7fe ffa1 	bl	800143c <HAL_GetTick>
 80024fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d008      	beq.n	800251a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e052      	b.n	80025c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0216 	bic.w	r2, r2, #22
 8002528:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002538:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_DMA_Abort+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0208 	bic.w	r2, r2, #8
 8002558:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256a:	e013      	b.n	8002594 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256c:	f7fe ff66 	bl	800143c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b05      	cmp	r3, #5
 8002578:	d90c      	bls.n	8002594 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e015      	b.n	80025c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1e4      	bne.n	800256c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	223f      	movs	r2, #63	@ 0x3f
 80025a8:	409a      	lsls	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002810 <HAL_DMA_IRQHandler+0x248>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002814 <HAL_DMA_IRQHandler+0x24c>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0a9b      	lsrs	r3, r3, #10
 80025e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	2208      	movs	r2, #8
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01a      	beq.n	8002634 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0204 	bic.w	r2, r2, #4
 800261a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	2208      	movs	r2, #8
 8002622:	409a      	lsls	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	2201      	movs	r2, #1
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d012      	beq.n	800266a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002656:	2201      	movs	r2, #1
 8002658:	409a      	lsls	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002662:	f043 0202 	orr.w	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	2204      	movs	r2, #4
 8002670:	409a      	lsls	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d012      	beq.n	80026a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	2204      	movs	r2, #4
 800268e:	409a      	lsls	r2, r3
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	f043 0204 	orr.w	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	2210      	movs	r2, #16
 80026a6:	409a      	lsls	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d043      	beq.n	8002738 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d03c      	beq.n	8002738 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c2:	2210      	movs	r2, #16
 80026c4:	409a      	lsls	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d018      	beq.n	800270a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d024      	beq.n	8002738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
 80026f6:	e01f      	b.n	8002738 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
 8002708:	e016      	b.n	8002738 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0208 	bic.w	r2, r2, #8
 8002726:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	2220      	movs	r2, #32
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 808f 	beq.w	8002868 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8087 	beq.w	8002868 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275e:	2220      	movs	r2, #32
 8002760:	409a      	lsls	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b05      	cmp	r3, #5
 8002770:	d136      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0216 	bic.w	r2, r2, #22
 8002780:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002790:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_DMA_IRQHandler+0x1da>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0208 	bic.w	r2, r2, #8
 80027b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	223f      	movs	r2, #63	@ 0x3f
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d07e      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
        }
        return;
 80027de:	e079      	b.n	80028d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01d      	beq.n	800282a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10d      	bne.n	8002818 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002800:	2b00      	cmp	r3, #0
 8002802:	d031      	beq.n	8002868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
 800280c:	e02c      	b.n	8002868 <HAL_DMA_IRQHandler+0x2a0>
 800280e:	bf00      	nop
 8002810:	2000000c 	.word	0x2000000c
 8002814:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d023      	beq.n	8002868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
 8002828:	e01e      	b.n	8002868 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10f      	bne.n	8002858 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0210 	bic.w	r2, r2, #16
 8002846:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286c:	2b00      	cmp	r3, #0
 800286e:	d032      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2205      	movs	r2, #5
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	3301      	adds	r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	d307      	bcc.n	80028b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f2      	bne.n	8002894 <HAL_DMA_IRQHandler+0x2cc>
 80028ae:	e000      	b.n	80028b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
 80028d2:	e000      	b.n	80028d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028d4:	bf00      	nop
    }
  }
}
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b40      	cmp	r3, #64	@ 0x40
 8002908:	d108      	bne.n	800291c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800291a:	e007      	b.n	800292c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3b10      	subs	r3, #16
 8002948:	4a14      	ldr	r2, [pc, #80]	@ (800299c <DMA_CalcBaseAndBitshift+0x64>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002952:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d909      	bls.n	800297a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	1d1a      	adds	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	659a      	str	r2, [r3, #88]	@ 0x58
 8002978:	e007      	b.n	800298a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002982:	f023 0303 	bic.w	r3, r3, #3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	aaaaaaab 	.word	0xaaaaaaab
 80029a0:	08005788 	.word	0x08005788

080029a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11f      	bne.n	80029fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d856      	bhi.n	8002a72 <DMA_CheckFifoParam+0xce>
 80029c4:	a201      	add	r2, pc, #4	@ (adr r2, 80029cc <DMA_CheckFifoParam+0x28>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029ef 	.word	0x080029ef
 80029d4:	080029dd 	.word	0x080029dd
 80029d8:	08002a73 	.word	0x08002a73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d046      	beq.n	8002a76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ec:	e043      	b.n	8002a76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029f6:	d140      	bne.n	8002a7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fc:	e03d      	b.n	8002a7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a06:	d121      	bne.n	8002a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d837      	bhi.n	8002a7e <DMA_CheckFifoParam+0xda>
 8002a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <DMA_CheckFifoParam+0x70>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a2b 	.word	0x08002a2b
 8002a1c:	08002a25 	.word	0x08002a25
 8002a20:	08002a3d 	.word	0x08002a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      break;
 8002a28:	e030      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d025      	beq.n	8002a82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3a:	e022      	b.n	8002a82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a44:	d11f      	bne.n	8002a86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a4a:	e01c      	b.n	8002a86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d903      	bls.n	8002a5a <DMA_CheckFifoParam+0xb6>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d003      	beq.n	8002a60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a58:	e018      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5e:	e015      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a70:	e00b      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      break;
 8002a72:	bf00      	nop
 8002a74:	e00a      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e008      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e006      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e004      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      break;
 8002a82:	bf00      	nop
 8002a84:	e002      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop

08002a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b089      	sub	sp, #36	@ 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e16b      	b.n	8002d90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	f040 815a 	bne.w	8002d8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d005      	beq.n	8002aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d130      	bne.n	8002b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b24:	2201      	movs	r2, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 0201 	and.w	r2, r3, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d017      	beq.n	8002b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d123      	bne.n	8002be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	08da      	lsrs	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3208      	adds	r2, #8
 8002ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	220f      	movs	r2, #15
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	08da      	lsrs	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3208      	adds	r2, #8
 8002bda:	69b9      	ldr	r1, [r7, #24]
 8002bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0203 	and.w	r2, r3, #3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80b4 	beq.w	8002d8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b60      	ldr	r3, [pc, #384]	@ (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dac <HAL_GPIO_Init+0x310>)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a52      	ldr	r2, [pc, #328]	@ (8002db0 <HAL_GPIO_Init+0x314>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02b      	beq.n	8002cc2 <HAL_GPIO_Init+0x226>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a51      	ldr	r2, [pc, #324]	@ (8002db4 <HAL_GPIO_Init+0x318>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d025      	beq.n	8002cbe <HAL_GPIO_Init+0x222>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a50      	ldr	r2, [pc, #320]	@ (8002db8 <HAL_GPIO_Init+0x31c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <HAL_GPIO_Init+0x21e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d019      	beq.n	8002cb6 <HAL_GPIO_Init+0x21a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc0 <HAL_GPIO_Init+0x324>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0x216>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc4 <HAL_GPIO_Init+0x328>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00d      	beq.n	8002cae <HAL_GPIO_Init+0x212>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc8 <HAL_GPIO_Init+0x32c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <HAL_GPIO_Init+0x20e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dcc <HAL_GPIO_Init+0x330>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_GPIO_Init+0x20a>
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	e00e      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002caa:	2306      	movs	r3, #6
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	@ (8002dac <HAL_GPIO_Init+0x310>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d06:	4a32      	ldr	r2, [pc, #200]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d30:	4a27      	ldr	r2, [pc, #156]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d36:	4b26      	ldr	r3, [pc, #152]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d84:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f ae90 	bls.w	8002ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	@ 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40021800 	.word	0x40021800
 8002dcc:	40021c00 	.word	0x40021c00
 8002dd0:	40013c00 	.word	0x40013c00

08002dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e001      	b.n	8002df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e267      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d075      	beq.n	8002f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e56:	4b88      	ldr	r3, [pc, #544]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d00c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e62:	4b85      	ldr	r3, [pc, #532]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d112      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	4b82      	ldr	r3, [pc, #520]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x108>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d157      	bne.n	8002f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e242      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x74>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e01d      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x98>
 8002eb6:	4b70      	ldr	r3, [pc, #448]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6f      	ldr	r2, [pc, #444]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6c      	ldr	r2, [pc, #432]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002ed0:	4b69      	ldr	r3, [pc, #420]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a68      	ldr	r2, [pc, #416]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a65      	ldr	r2, [pc, #404]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe faa4 	bl	800143c <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe faa0 	bl	800143c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e207      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xc0>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe fa90 	bl	800143c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fe fa8c 	bl	800143c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	@ 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e1f3      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	4b51      	ldr	r3, [pc, #324]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0xe8>
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d063      	beq.n	8003016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5a:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d11c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f66:	4b44      	ldr	r3, [pc, #272]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d116      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	4b41      	ldr	r3, [pc, #260]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCC_OscConfig+0x152>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d001      	beq.n	8002f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e1c7      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4937      	ldr	r1, [pc, #220]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	e03a      	b.n	8003016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa8:	4b34      	ldr	r3, [pc, #208]	@ (800307c <HAL_RCC_OscConfig+0x244>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe fa45 	bl	800143c <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb6:	f7fe fa41 	bl	800143c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1a8      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4925      	ldr	r1, [pc, #148]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	e015      	b.n	8003016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fea:	4b24      	ldr	r3, [pc, #144]	@ (800307c <HAL_RCC_OscConfig+0x244>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fa24 	bl	800143c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fa20 	bl	800143c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e187      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d036      	beq.n	8003090 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <HAL_RCC_OscConfig+0x248>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe fa04 	bl	800143c <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003038:	f7fe fa00 	bl	800143c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e167      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_OscConfig+0x240>)
 800304c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x200>
 8003056:	e01b      	b.n	8003090 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_RCC_OscConfig+0x248>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe f9ed 	bl	800143c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	e00e      	b.n	8003084 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003066:	f7fe f9e9 	bl	800143c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d907      	bls.n	8003084 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e150      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
 8003078:	40023800 	.word	0x40023800
 800307c:	42470000 	.word	0x42470000
 8003080:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	4b88      	ldr	r3, [pc, #544]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ea      	bne.n	8003066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8097 	beq.w	80031cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a2:	4b81      	ldr	r3, [pc, #516]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	4b7d      	ldr	r3, [pc, #500]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4a7c      	ldr	r2, [pc, #496]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030be:	4b7a      	ldr	r3, [pc, #488]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b77      	ldr	r3, [pc, #476]	@ (80032ac <HAL_RCC_OscConfig+0x474>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d118      	bne.n	800310c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030da:	4b74      	ldr	r3, [pc, #464]	@ (80032ac <HAL_RCC_OscConfig+0x474>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a73      	ldr	r2, [pc, #460]	@ (80032ac <HAL_RCC_OscConfig+0x474>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e6:	f7fe f9a9 	bl	800143c <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ee:	f7fe f9a5 	bl	800143c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e10c      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x474>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x2ea>
 8003114:	4b64      	ldr	r3, [pc, #400]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003118:	4a63      	ldr	r2, [pc, #396]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003120:	e01c      	b.n	800315c <HAL_RCC_OscConfig+0x324>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x30c>
 800312a:	4b5f      	ldr	r3, [pc, #380]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	4a5e      	ldr	r2, [pc, #376]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6713      	str	r3, [r2, #112]	@ 0x70
 8003136:	4b5c      	ldr	r3, [pc, #368]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313a:	4a5b      	ldr	r2, [pc, #364]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6713      	str	r3, [r2, #112]	@ 0x70
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0x324>
 8003144:	4b58      	ldr	r3, [pc, #352]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003148:	4a57      	ldr	r2, [pc, #348]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003150:	4b55      	ldr	r3, [pc, #340]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003154:	4a54      	ldr	r2, [pc, #336]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d015      	beq.n	8003190 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fe f96a 	bl	800143c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fe f966 	bl	800143c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0cb      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	4b49      	ldr	r3, [pc, #292]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0ee      	beq.n	800316c <HAL_RCC_OscConfig+0x334>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003190:	f7fe f954 	bl	800143c <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fe f950 	bl	800143c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0b5      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ae:	4b3e      	ldr	r3, [pc, #248]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ee      	bne.n	8003198 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d105      	bne.n	80031cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c0:	4b39      	ldr	r3, [pc, #228]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	4a38      	ldr	r2, [pc, #224]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a1 	beq.w	8003318 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d6:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d05c      	beq.n	800329c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d141      	bne.n	800326e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b31      	ldr	r3, [pc, #196]	@ (80032b0 <HAL_RCC_OscConfig+0x478>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe f924 	bl	800143c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe f920 	bl	800143c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e087      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	4b27      	ldr	r3, [pc, #156]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	491b      	ldr	r1, [pc, #108]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_RCC_OscConfig+0x478>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fe f8f9 	bl	800143c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7fe f8f5 	bl	800143c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e05c      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003260:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x416>
 800326c:	e054      	b.n	8003318 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <HAL_RCC_OscConfig+0x478>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe f8e2 	bl	800143c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe f8de 	bl	800143c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e045      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_RCC_OscConfig+0x470>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x444>
 800329a:	e03d      	b.n	8003318 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e038      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <HAL_RCC_OscConfig+0x4ec>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d028      	beq.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d121      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d11a      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d111      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0cc      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b68      	ldr	r3, [pc, #416]	@ (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d90c      	bls.n	8003364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b65      	ldr	r3, [pc, #404]	@ (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	@ (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a58      	ldr	r2, [pc, #352]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a52      	ldr	r2, [pc, #328]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800339e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d044      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d119      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e067      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b37      	ldr	r3, [pc, #220]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4934      	ldr	r1, [pc, #208]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fe f810 	bl	800143c <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe f80c 	bl	800143c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d20c      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd ff70 	bl	80013b4 <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08005770 	.word	0x08005770
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	20000010 	.word	0x20000010

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b090      	sub	sp, #64	@ 0x40
 80034fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350c:	4b59      	ldr	r3, [pc, #356]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d00d      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x40>
 8003518:	2b08      	cmp	r3, #8
 800351a:	f200 80a1 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x16c>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x34>
 8003522:	2b04      	cmp	r3, #4
 8003524:	d003      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x3a>
 8003526:	e09b      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b53      	ldr	r3, [pc, #332]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x184>)
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800352c:	e09b      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352e:	4b53      	ldr	r3, [pc, #332]	@ (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 8003530:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003532:	e098      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003534:	4b4f      	ldr	r3, [pc, #316]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353e:	4b4d      	ldr	r3, [pc, #308]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d028      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b4a      	ldr	r3, [pc, #296]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	2200      	movs	r2, #0
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	627a      	str	r2, [r7, #36]	@ 0x24
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800355c:	2100      	movs	r1, #0
 800355e:	4b47      	ldr	r3, [pc, #284]	@ (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 8003560:	fb03 f201 	mul.w	r2, r3, r1
 8003564:	2300      	movs	r3, #0
 8003566:	fb00 f303 	mul.w	r3, r0, r3
 800356a:	4413      	add	r3, r2
 800356c:	4a43      	ldr	r2, [pc, #268]	@ (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 800356e:	fba0 1202 	umull	r1, r2, r0, r2
 8003572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003574:	460a      	mov	r2, r1
 8003576:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800357a:	4413      	add	r3, r2
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800357e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003580:	2200      	movs	r2, #0
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	61fa      	str	r2, [r7, #28]
 8003586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800358e:	f7fc fe77 	bl	8000280 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4613      	mov	r3, r2
 8003598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800359a:	e053      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b35      	ldr	r3, [pc, #212]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	617a      	str	r2, [r7, #20]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ae:	f04f 0b00 	mov.w	fp, #0
 80035b2:	4652      	mov	r2, sl
 80035b4:	465b      	mov	r3, fp
 80035b6:	f04f 0000 	mov.w	r0, #0
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	0159      	lsls	r1, r3, #5
 80035c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c4:	0150      	lsls	r0, r2, #5
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	ebb2 080a 	subs.w	r8, r2, sl
 80035ce:	eb63 090b 	sbc.w	r9, r3, fp
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035e6:	ebb2 0408 	subs.w	r4, r2, r8
 80035ea:	eb63 0509 	sbc.w	r5, r3, r9
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	00eb      	lsls	r3, r5, #3
 80035f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fc:	00e2      	lsls	r2, r4, #3
 80035fe:	4614      	mov	r4, r2
 8003600:	461d      	mov	r5, r3
 8003602:	eb14 030a 	adds.w	r3, r4, sl
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	eb45 030b 	adc.w	r3, r5, fp
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361a:	4629      	mov	r1, r5
 800361c:	028b      	lsls	r3, r1, #10
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003624:	4621      	mov	r1, r4
 8003626:	028a      	lsls	r2, r1, #10
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362e:	2200      	movs	r2, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	60fa      	str	r2, [r7, #12]
 8003634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003638:	f7fc fe22 	bl	8000280 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003654:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x184>)
 8003662:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003668:	4618      	mov	r0, r3
 800366a:	3740      	adds	r7, #64	@ 0x40
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	017d7840 	.word	0x017d7840

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	@ (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08005780 	.word	0x08005780

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffdc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	@ (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08005780 	.word	0x08005780

080036e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e041      	b.n	800377e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fcc8 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f000 fbb2 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d001      	beq.n	80037a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e046      	b.n	800382e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a23      	ldr	r2, [pc, #140]	@ (800383c <HAL_TIM_Base_Start+0xb4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d022      	beq.n	80037f8 <HAL_TIM_Base_Start+0x70>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ba:	d01d      	beq.n	80037f8 <HAL_TIM_Base_Start+0x70>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <HAL_TIM_Base_Start+0xb8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <HAL_TIM_Base_Start+0x70>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003844 <HAL_TIM_Base_Start+0xbc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <HAL_TIM_Base_Start+0x70>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003848 <HAL_TIM_Base_Start+0xc0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <HAL_TIM_Base_Start+0x70>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1b      	ldr	r2, [pc, #108]	@ (800384c <HAL_TIM_Base_Start+0xc4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_TIM_Base_Start+0x70>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a19      	ldr	r2, [pc, #100]	@ (8003850 <HAL_TIM_Base_Start+0xc8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIM_Base_Start+0x70>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a18      	ldr	r2, [pc, #96]	@ (8003854 <HAL_TIM_Base_Start+0xcc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d111      	bne.n	800381c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b06      	cmp	r3, #6
 8003808:	d010      	beq.n	800382c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	e007      	b.n	800382c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40010400 	.word	0x40010400
 8003850:	40014000 	.word	0x40014000
 8003854:	40001800 	.word	0x40001800

08003858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e041      	b.n	80038ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f839 	bl	80038f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f000 fafa 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_TIM_PWM_Start+0x24>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e022      	b.n	8003976 <HAL_TIM_PWM_Start+0x6a>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d109      	bne.n	800394a <HAL_TIM_PWM_Start+0x3e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e015      	b.n	8003976 <HAL_TIM_PWM_Start+0x6a>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d109      	bne.n	8003964 <HAL_TIM_PWM_Start+0x58>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e008      	b.n	8003976 <HAL_TIM_PWM_Start+0x6a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07c      	b.n	8003a78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <HAL_TIM_PWM_Start+0x82>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800398c:	e013      	b.n	80039b6 <HAL_TIM_PWM_Start+0xaa>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start+0x92>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800399c:	e00b      	b.n	80039b6 <HAL_TIM_PWM_Start+0xaa>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0xa2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ac:	e003      	b.n	80039b6 <HAL_TIM_PWM_Start+0xaa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2201      	movs	r2, #1
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fd56 	bl	8004470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a80 <HAL_TIM_PWM_Start+0x174>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_TIM_PWM_Start+0xcc>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a84 <HAL_TIM_PWM_Start+0x178>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_TIM_PWM_Start+0xd0>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_TIM_PWM_Start+0xd2>
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a22      	ldr	r2, [pc, #136]	@ (8003a80 <HAL_TIM_PWM_Start+0x174>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x136>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a04:	d01d      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x136>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a88 <HAL_TIM_PWM_Start+0x17c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x136>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <HAL_TIM_PWM_Start+0x180>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x136>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <HAL_TIM_PWM_Start+0x184>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x136>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a16      	ldr	r2, [pc, #88]	@ (8003a84 <HAL_TIM_PWM_Start+0x178>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x136>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <HAL_TIM_PWM_Start+0x188>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x136>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	@ (8003a98 <HAL_TIM_PWM_Start+0x18c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d111      	bne.n	8003a66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d010      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	e007      	b.n	8003a76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40010400 	.word	0x40010400
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40001800 	.word	0x40001800

08003a9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fcde 	bl	8004470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_TIM_PWM_Stop+0xd8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_TIM_PWM_Stop+0x2c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_TIM_PWM_Stop+0xdc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_TIM_PWM_Stop+0x30>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <HAL_TIM_PWM_Stop+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d017      	beq.n	8003b02 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6a1a      	ldr	r2, [r3, #32]
 8003ad8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10f      	bne.n	8003b02 <HAL_TIM_PWM_Stop+0x66>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <HAL_TIM_PWM_Stop+0x66>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a1a      	ldr	r2, [r3, #32]
 8003b08:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <HAL_TIM_PWM_Stop+0x96>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d107      	bne.n	8003b32 <HAL_TIM_PWM_Stop+0x96>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0xa6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b40:	e013      	b.n	8003b6a <HAL_TIM_PWM_Stop+0xce>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Stop+0xb6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b50:	e00b      	b.n	8003b6a <HAL_TIM_PWM_Stop+0xce>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Stop+0xc6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b60:	e003      	b.n	8003b6a <HAL_TIM_PWM_Stop+0xce>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40010400 	.word	0x40010400

08003b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0ae      	b.n	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	f200 809f 	bhi.w	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003baa:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003ce9 	.word	0x08003ce9
 8003bb8:	08003ce9 	.word	0x08003ce9
 8003bbc:	08003ce9 	.word	0x08003ce9
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003ce9 	.word	0x08003ce9
 8003bc8:	08003ce9 	.word	0x08003ce9
 8003bcc:	08003ce9 	.word	0x08003ce9
 8003bd0:	08003c67 	.word	0x08003c67
 8003bd4:	08003ce9 	.word	0x08003ce9
 8003bd8:	08003ce9 	.word	0x08003ce9
 8003bdc:	08003ce9 	.word	0x08003ce9
 8003be0:	08003ca7 	.word	0x08003ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f9f6 	bl	8003fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0204 	bic.w	r2, r2, #4
 8003c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6999      	ldr	r1, [r3, #24]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	619a      	str	r2, [r3, #24]
      break;
 8003c22:	e064      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa46 	bl	80040bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	619a      	str	r2, [r3, #24]
      break;
 8003c64:	e043      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fa9b 	bl	80041a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0208 	orr.w	r2, r2, #8
 8003c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0204 	bic.w	r2, r2, #4
 8003c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69d9      	ldr	r1, [r3, #28]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	61da      	str	r2, [r3, #28]
      break;
 8003ca4:	e023      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 faef 	bl	8004290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	021a      	lsls	r2, r3, #8
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	61da      	str	r2, [r3, #28]
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
      break;
 8003cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_ConfigClockSource+0x1c>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0b4      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x186>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d54:	d03e      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5a:	f200 8087 	bhi.w	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d62:	f000 8086 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x172>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6a:	d87f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d6c:	2b70      	cmp	r3, #112	@ 0x70
 8003d6e:	d01a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0xa6>
 8003d70:	2b70      	cmp	r3, #112	@ 0x70
 8003d72:	d87b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b60      	cmp	r3, #96	@ 0x60
 8003d76:	d050      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x11a>
 8003d78:	2b60      	cmp	r3, #96	@ 0x60
 8003d7a:	d877      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b50      	cmp	r3, #80	@ 0x50
 8003d7e:	d03c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0xfa>
 8003d80:	2b50      	cmp	r3, #80	@ 0x50
 8003d82:	d873      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b40      	cmp	r3, #64	@ 0x40
 8003d86:	d058      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x13a>
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d86f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b30      	cmp	r3, #48	@ 0x30
 8003d8e:	d064      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003d90:	2b30      	cmp	r3, #48	@ 0x30
 8003d92:	d86b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d060      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d867      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05c      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d05a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003da4:	e062      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	f000 fb3b 	bl	8004430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	609a      	str	r2, [r3, #8]
      break;
 8003dd2:	e04f      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	f000 fb24 	bl	8004430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df6:	609a      	str	r2, [r3, #8]
      break;
 8003df8:	e03c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	461a      	mov	r2, r3
 8003e08:	f000 fa98 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2150      	movs	r1, #80	@ 0x50
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 faf1 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e18:	e02c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e26:	461a      	mov	r2, r3
 8003e28:	f000 fab7 	bl	800439a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2160      	movs	r1, #96	@ 0x60
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fae1 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e38:	e01c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 fa78 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2140      	movs	r1, #64	@ 0x40
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fad1 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e58:	e00c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fac8 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e6a:	e003      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a43      	ldr	r2, [pc, #268]	@ (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eae:	d00f      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a40      	ldr	r2, [pc, #256]	@ (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3f      	ldr	r2, [pc, #252]	@ (8003fb8 <TIM_Base_SetConfig+0x128>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3d      	ldr	r2, [pc, #244]	@ (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a32      	ldr	r2, [pc, #200]	@ (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef0:	d027      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d023      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb8 <TIM_Base_SetConfig+0x128>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	@ (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc4 <TIM_Base_SetConfig+0x134>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc8 <TIM_Base_SetConfig+0x138>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a29      	ldr	r2, [pc, #164]	@ (8003fcc <TIM_Base_SetConfig+0x13c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a28      	ldr	r2, [pc, #160]	@ (8003fd0 <TIM_Base_SetConfig+0x140>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a27      	ldr	r2, [pc, #156]	@ (8003fd4 <TIM_Base_SetConfig+0x144>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a26      	ldr	r2, [pc, #152]	@ (8003fd8 <TIM_Base_SetConfig+0x148>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_Base_SetConfig+0xf2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a10      	ldr	r2, [pc, #64]	@ (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d103      	bne.n	8003f8a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f043 0204 	orr.w	r2, r3, #4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800
 8003fd0:	40001800 	.word	0x40001800
 8003fd4:	40001c00 	.word	0x40001c00
 8003fd8:	40002000 	.word	0x40002000

08003fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f023 0201 	bic.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a20      	ldr	r2, [pc, #128]	@ (80040b4 <TIM_OC1_SetConfig+0xd8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC1_SetConfig+0x64>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <TIM_OC1_SetConfig+0xdc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10c      	bne.n	800405a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0308 	bic.w	r3, r3, #8
 8004046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <TIM_OC1_SetConfig+0xd8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC1_SetConfig+0x8e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a14      	ldr	r2, [pc, #80]	@ (80040b8 <TIM_OC1_SetConfig+0xdc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d111      	bne.n	800408e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40010400 	.word	0x40010400

080040bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f023 0210 	bic.w	r2, r3, #16
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <TIM_OC2_SetConfig+0xe4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC2_SetConfig+0x68>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a21      	ldr	r2, [pc, #132]	@ (80041a4 <TIM_OC2_SetConfig+0xe8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10d      	bne.n	8004140 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800413e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x94>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d113      	bne.n	8004178 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a21      	ldr	r2, [pc, #132]	@ (8004288 <TIM_OC3_SetConfig+0xe0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_OC3_SetConfig+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a20      	ldr	r2, [pc, #128]	@ (800428c <TIM_OC3_SetConfig+0xe4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10d      	bne.n	800422a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x92>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a15      	ldr	r2, [pc, #84]	@ (800428c <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40010000 	.word	0x40010000
 800428c:	40010400 	.word	0x40010400

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a12      	ldr	r2, [pc, #72]	@ (8004334 <TIM_OC4_SetConfig+0xa4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC4_SetConfig+0x68>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a11      	ldr	r2, [pc, #68]	@ (8004338 <TIM_OC4_SetConfig+0xa8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d109      	bne.n	800430c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40010400 	.word	0x40010400

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439a:	b480      	push	{r7}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f023 0210 	bic.w	r2, r3, #16
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	f043 0307 	orr.w	r3, r3, #7
 800441c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800444a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	021a      	lsls	r2, r3, #8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	431a      	orrs	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2201      	movs	r2, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	431a      	orrs	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e05a      	b.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004520:	d01d      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1d      	ldr	r2, [pc, #116]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1a      	ldr	r2, [pc, #104]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10c      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4313      	orrs	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40010400 	.word	0x40010400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40001800 	.word	0x40001800

080045b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e042      	b.n	800464c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fdd4 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	@ 0x24
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f973 	bl	80048e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800460c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800461c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800462c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	@ 0x28
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b20      	cmp	r3, #32
 8004672:	d175      	bne.n	8004760 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_UART_Transmit+0x2c>
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e06e      	b.n	8004762 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2221      	movs	r2, #33	@ 0x21
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004692:	f7fc fed3 	bl	800143c <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ac:	d108      	bne.n	80046c0 <HAL_UART_Transmit+0x6c>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	e003      	b.n	80046c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046c8:	e02e      	b.n	8004728 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	@ 0x80
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f848 	bl	800476a <UART_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e03a      	b.n	8004762 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	3302      	adds	r3, #2
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e007      	b.n	800471a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3301      	adds	r3, #1
 8004718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1cb      	bne.n	80046ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	2140      	movs	r1, #64	@ 0x40
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f814 	bl	800476a <UART_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477a:	e03b      	b.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d037      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004784:	f7fc fe5a 	bl	800143c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <UART_WaitOnFlagUntilTimeout+0x30>
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e03a      	b.n	8004814 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d023      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b80      	cmp	r3, #128	@ 0x80
 80047b0:	d020      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b40      	cmp	r3, #64	@ 0x40
 80047b6:	d01d      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d116      	bne.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f81d 	bl	800481c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2208      	movs	r2, #8
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e00f      	b.n	8004814 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	429a      	cmp	r2, r3
 8004810:	d0b4      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b095      	sub	sp, #84	@ 0x54
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800483a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004844:	643a      	str	r2, [r7, #64]	@ 0x40
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800484a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	61fb      	str	r3, [r7, #28]
   return(result);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800487a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e5      	bne.n	8004858 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	2b01      	cmp	r3, #1
 8004892:	d119      	bne.n	80048c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 0310 	bic.w	r3, r3, #16
 80048aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b4:	61ba      	str	r2, [r7, #24]
 80048b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6979      	ldr	r1, [r7, #20]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	613b      	str	r3, [r7, #16]
   return(result);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048d6:	bf00      	nop
 80048d8:	3754      	adds	r7, #84	@ 0x54
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e8:	b0c0      	sub	sp, #256	@ 0x100
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	68d9      	ldr	r1, [r3, #12]
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	ea40 0301 	orr.w	r3, r0, r1
 800490c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	431a      	orrs	r2, r3
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	431a      	orrs	r2, r3
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800493c:	f021 010c 	bic.w	r1, r1, #12
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800494a:	430b      	orrs	r3, r1
 800494c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495e:	6999      	ldr	r1, [r3, #24]
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	ea40 0301 	orr.w	r3, r0, r1
 800496a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b8f      	ldr	r3, [pc, #572]	@ (8004bb0 <UART_SetConfig+0x2cc>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d005      	beq.n	8004984 <UART_SetConfig+0xa0>
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b8d      	ldr	r3, [pc, #564]	@ (8004bb4 <UART_SetConfig+0x2d0>)
 8004980:	429a      	cmp	r2, r3
 8004982:	d104      	bne.n	800498e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004984:	f7fe fe9c 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8004988:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800498c:	e003      	b.n	8004996 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800498e:	f7fe fe83 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004992:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a0:	f040 810c 	bne.w	8004bbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	1891      	adds	r1, r2, r2
 80049bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049be:	415b      	adcs	r3, r3
 80049c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049c6:	4621      	mov	r1, r4
 80049c8:	eb12 0801 	adds.w	r8, r2, r1
 80049cc:	4629      	mov	r1, r5
 80049ce:	eb43 0901 	adc.w	r9, r3, r1
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e6:	4690      	mov	r8, r2
 80049e8:	4699      	mov	r9, r3
 80049ea:	4623      	mov	r3, r4
 80049ec:	eb18 0303 	adds.w	r3, r8, r3
 80049f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049f4:	462b      	mov	r3, r5
 80049f6:	eb49 0303 	adc.w	r3, r9, r3
 80049fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a12:	460b      	mov	r3, r1
 8004a14:	18db      	adds	r3, r3, r3
 8004a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a18:	4613      	mov	r3, r2
 8004a1a:	eb42 0303 	adc.w	r3, r2, r3
 8004a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a28:	f7fb fc2a 	bl	8000280 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4b61      	ldr	r3, [pc, #388]	@ (8004bb8 <UART_SetConfig+0x2d4>)
 8004a32:	fba3 2302 	umull	r2, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	011c      	lsls	r4, r3, #4
 8004a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	464b      	mov	r3, r9
 8004a50:	1891      	adds	r1, r2, r2
 8004a52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a54:	415b      	adcs	r3, r3
 8004a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a62:	4649      	mov	r1, r9
 8004a64:	eb43 0b01 	adc.w	fp, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a7c:	4692      	mov	sl, r2
 8004a7e:	469b      	mov	fp, r3
 8004a80:	4643      	mov	r3, r8
 8004a82:	eb1a 0303 	adds.w	r3, sl, r3
 8004a86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004aa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	18db      	adds	r3, r3, r3
 8004aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aae:	4613      	mov	r3, r2
 8004ab0:	eb42 0303 	adc.w	r3, r2, r3
 8004ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004abe:	f7fb fbdf 	bl	8000280 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb8 <UART_SetConfig+0x2d4>)
 8004aca:	fba3 2301 	umull	r2, r3, r3, r1
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	2264      	movs	r2, #100	@ 0x64
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	1acb      	subs	r3, r1, r3
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ade:	4b36      	ldr	r3, [pc, #216]	@ (8004bb8 <UART_SetConfig+0x2d4>)
 8004ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004aec:	441c      	add	r4, r3
 8004aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004af8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004afc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	1891      	adds	r1, r2, r2
 8004b06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b08:	415b      	adcs	r3, r3
 8004b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b10:	4641      	mov	r1, r8
 8004b12:	1851      	adds	r1, r2, r1
 8004b14:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b16:	4649      	mov	r1, r9
 8004b18:	414b      	adcs	r3, r1
 8004b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b28:	4659      	mov	r1, fp
 8004b2a:	00cb      	lsls	r3, r1, #3
 8004b2c:	4651      	mov	r1, sl
 8004b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b32:	4651      	mov	r1, sl
 8004b34:	00ca      	lsls	r2, r1, #3
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	189b      	adds	r3, r3, r2
 8004b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b44:	464b      	mov	r3, r9
 8004b46:	460a      	mov	r2, r1
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b64:	460b      	mov	r3, r1
 8004b66:	18db      	adds	r3, r3, r3
 8004b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b7a:	f7fb fb81 	bl	8000280 <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <UART_SetConfig+0x2d4>)
 8004b84:	fba3 1302 	umull	r1, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2164      	movs	r1, #100	@ 0x64
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	3332      	adds	r3, #50	@ 0x32
 8004b96:	4a08      	ldr	r2, [pc, #32]	@ (8004bb8 <UART_SetConfig+0x2d4>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 0207 	and.w	r2, r3, #7
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4422      	add	r2, r4
 8004baa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bac:	e106      	b.n	8004dbc <UART_SetConfig+0x4d8>
 8004bae:	bf00      	nop
 8004bb0:	40011000 	.word	0x40011000
 8004bb4:	40011400 	.word	0x40011400
 8004bb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bce:	4642      	mov	r2, r8
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	1891      	adds	r1, r2, r2
 8004bd4:	6239      	str	r1, [r7, #32]
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bde:	4641      	mov	r1, r8
 8004be0:	1854      	adds	r4, r2, r1
 8004be2:	4649      	mov	r1, r9
 8004be4:	eb43 0501 	adc.w	r5, r3, r1
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	00eb      	lsls	r3, r5, #3
 8004bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf6:	00e2      	lsls	r2, r4, #3
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	4643      	mov	r3, r8
 8004bfe:	18e3      	adds	r3, r4, r3
 8004c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c04:	464b      	mov	r3, r9
 8004c06:	eb45 0303 	adc.w	r3, r5, r3
 8004c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	008b      	lsls	r3, r1, #2
 8004c2e:	4621      	mov	r1, r4
 8004c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c34:	4621      	mov	r1, r4
 8004c36:	008a      	lsls	r2, r1, #2
 8004c38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c3c:	f7fb fb20 	bl	8000280 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4b60      	ldr	r3, [pc, #384]	@ (8004dc8 <UART_SetConfig+0x4e4>)
 8004c46:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	011c      	lsls	r4, r3, #4
 8004c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	1891      	adds	r1, r2, r2
 8004c66:	61b9      	str	r1, [r7, #24]
 8004c68:	415b      	adcs	r3, r3
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c70:	4641      	mov	r1, r8
 8004c72:	1851      	adds	r1, r2, r1
 8004c74:	6139      	str	r1, [r7, #16]
 8004c76:	4649      	mov	r1, r9
 8004c78:	414b      	adcs	r3, r1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c88:	4659      	mov	r1, fp
 8004c8a:	00cb      	lsls	r3, r1, #3
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c92:	4651      	mov	r1, sl
 8004c94:	00ca      	lsls	r2, r1, #3
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	460a      	mov	r2, r1
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cc8:	4649      	mov	r1, r9
 8004cca:	008b      	lsls	r3, r1, #2
 8004ccc:	4641      	mov	r1, r8
 8004cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	008a      	lsls	r2, r1, #2
 8004cd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cda:	f7fb fad1 	bl	8000280 <__aeabi_uldivmod>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4b38      	ldr	r3, [pc, #224]	@ (8004dc8 <UART_SetConfig+0x4e4>)
 8004ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2264      	movs	r2, #100	@ 0x64
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	1acb      	subs	r3, r1, r3
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	3332      	adds	r3, #50	@ 0x32
 8004cf8:	4a33      	ldr	r2, [pc, #204]	@ (8004dc8 <UART_SetConfig+0x4e4>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d04:	441c      	add	r4, r3
 8004d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d24:	4641      	mov	r1, r8
 8004d26:	1851      	adds	r1, r2, r1
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	414b      	adcs	r3, r1
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	00cb      	lsls	r3, r1, #3
 8004d40:	4651      	mov	r1, sl
 8004d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d46:	4651      	mov	r1, sl
 8004d48:	00ca      	lsls	r2, r1, #3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4642      	mov	r2, r8
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d56:	464b      	mov	r3, r9
 8004d58:	460a      	mov	r2, r1
 8004d5a:	eb42 0303 	adc.w	r3, r2, r3
 8004d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d78:	4649      	mov	r1, r9
 8004d7a:	008b      	lsls	r3, r1, #2
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d82:	4641      	mov	r1, r8
 8004d84:	008a      	lsls	r2, r1, #2
 8004d86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d8a:	f7fb fa79 	bl	8000280 <__aeabi_uldivmod>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc8 <UART_SetConfig+0x4e4>)
 8004d94:	fba3 1302 	umull	r1, r3, r3, r2
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	2164      	movs	r1, #100	@ 0x64
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	3332      	adds	r3, #50	@ 0x32
 8004da6:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <UART_SetConfig+0x4e4>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	f003 020f 	and.w	r2, r3, #15
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4422      	add	r2, r4
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc8:	51eb851f 	.word	0x51eb851f

08004dcc <sniprintf>:
 8004dcc:	b40c      	push	{r2, r3}
 8004dce:	b530      	push	{r4, r5, lr}
 8004dd0:	4b17      	ldr	r3, [pc, #92]	@ (8004e30 <sniprintf+0x64>)
 8004dd2:	1e0c      	subs	r4, r1, #0
 8004dd4:	681d      	ldr	r5, [r3, #0]
 8004dd6:	b09d      	sub	sp, #116	@ 0x74
 8004dd8:	da08      	bge.n	8004dec <sniprintf+0x20>
 8004dda:	238b      	movs	r3, #139	@ 0x8b
 8004ddc:	602b      	str	r3, [r5, #0]
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	b01d      	add	sp, #116	@ 0x74
 8004de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de8:	b002      	add	sp, #8
 8004dea:	4770      	bx	lr
 8004dec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004df0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004df4:	bf14      	ite	ne
 8004df6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004dfa:	4623      	moveq	r3, r4
 8004dfc:	9304      	str	r3, [sp, #16]
 8004dfe:	9307      	str	r3, [sp, #28]
 8004e00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e04:	9002      	str	r0, [sp, #8]
 8004e06:	9006      	str	r0, [sp, #24]
 8004e08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e0c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e0e:	ab21      	add	r3, sp, #132	@ 0x84
 8004e10:	a902      	add	r1, sp, #8
 8004e12:	4628      	mov	r0, r5
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	f000 f995 	bl	8005144 <_svfiprintf_r>
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	bfbc      	itt	lt
 8004e1e:	238b      	movlt	r3, #139	@ 0x8b
 8004e20:	602b      	strlt	r3, [r5, #0]
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d0dd      	beq.n	8004de2 <sniprintf+0x16>
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e7d9      	b.n	8004de2 <sniprintf+0x16>
 8004e2e:	bf00      	nop
 8004e30:	20000018 	.word	0x20000018

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <__errno>:
 8004e44:	4b01      	ldr	r3, [pc, #4]	@ (8004e4c <__errno+0x8>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000018 	.word	0x20000018

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4d0d      	ldr	r5, [pc, #52]	@ (8004e88 <__libc_init_array+0x38>)
 8004e54:	4c0d      	ldr	r4, [pc, #52]	@ (8004e8c <__libc_init_array+0x3c>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	4d0b      	ldr	r5, [pc, #44]	@ (8004e90 <__libc_init_array+0x40>)
 8004e62:	4c0c      	ldr	r4, [pc, #48]	@ (8004e94 <__libc_init_array+0x44>)
 8004e64:	f000 fc66 	bl	8005734 <_init>
 8004e68:	1b64      	subs	r4, r4, r5
 8004e6a:	10a4      	asrs	r4, r4, #2
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	080057cc 	.word	0x080057cc
 8004e8c:	080057cc 	.word	0x080057cc
 8004e90:	080057cc 	.word	0x080057cc
 8004e94:	080057d0 	.word	0x080057d0

08004e98 <__retarget_lock_acquire_recursive>:
 8004e98:	4770      	bx	lr

08004e9a <__retarget_lock_release_recursive>:
 8004e9a:	4770      	bx	lr

08004e9c <_free_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d041      	beq.n	8004f28 <_free_r+0x8c>
 8004ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea8:	1f0c      	subs	r4, r1, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bfb8      	it	lt
 8004eae:	18e4      	addlt	r4, r4, r3
 8004eb0:	f000 f8e0 	bl	8005074 <__malloc_lock>
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <_free_r+0x90>)
 8004eb6:	6813      	ldr	r3, [r2, #0]
 8004eb8:	b933      	cbnz	r3, 8004ec8 <_free_r+0x2c>
 8004eba:	6063      	str	r3, [r4, #4]
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ec4:	f000 b8dc 	b.w	8005080 <__malloc_unlock>
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d908      	bls.n	8004ede <_free_r+0x42>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	1821      	adds	r1, r4, r0
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf01      	itttt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	1809      	addeq	r1, r1, r0
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	e7ed      	b.n	8004eba <_free_r+0x1e>
 8004ede:	461a      	mov	r2, r3
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	b10b      	cbz	r3, 8004ee8 <_free_r+0x4c>
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d9fa      	bls.n	8004ede <_free_r+0x42>
 8004ee8:	6811      	ldr	r1, [r2, #0]
 8004eea:	1850      	adds	r0, r2, r1
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d10b      	bne.n	8004f08 <_free_r+0x6c>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	4401      	add	r1, r0
 8004ef4:	1850      	adds	r0, r2, r1
 8004ef6:	4283      	cmp	r3, r0
 8004ef8:	6011      	str	r1, [r2, #0]
 8004efa:	d1e0      	bne.n	8004ebe <_free_r+0x22>
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	6053      	str	r3, [r2, #4]
 8004f02:	4408      	add	r0, r1
 8004f04:	6010      	str	r0, [r2, #0]
 8004f06:	e7da      	b.n	8004ebe <_free_r+0x22>
 8004f08:	d902      	bls.n	8004f10 <_free_r+0x74>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	e7d6      	b.n	8004ebe <_free_r+0x22>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	1821      	adds	r1, r4, r0
 8004f14:	428b      	cmp	r3, r1
 8004f16:	bf04      	itt	eq
 8004f18:	6819      	ldreq	r1, [r3, #0]
 8004f1a:	685b      	ldreq	r3, [r3, #4]
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	bf04      	itt	eq
 8004f20:	1809      	addeq	r1, r1, r0
 8004f22:	6021      	streq	r1, [r4, #0]
 8004f24:	6054      	str	r4, [r2, #4]
 8004f26:	e7ca      	b.n	8004ebe <_free_r+0x22>
 8004f28:	bd38      	pop	{r3, r4, r5, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200003b4 	.word	0x200003b4

08004f30 <sbrk_aligned>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4e0f      	ldr	r6, [pc, #60]	@ (8004f70 <sbrk_aligned+0x40>)
 8004f34:	460c      	mov	r4, r1
 8004f36:	6831      	ldr	r1, [r6, #0]
 8004f38:	4605      	mov	r5, r0
 8004f3a:	b911      	cbnz	r1, 8004f42 <sbrk_aligned+0x12>
 8004f3c:	f000 fba6 	bl	800568c <_sbrk_r>
 8004f40:	6030      	str	r0, [r6, #0]
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 fba1 	bl	800568c <_sbrk_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	d103      	bne.n	8004f56 <sbrk_aligned+0x26>
 8004f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f52:	4620      	mov	r0, r4
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
 8004f56:	1cc4      	adds	r4, r0, #3
 8004f58:	f024 0403 	bic.w	r4, r4, #3
 8004f5c:	42a0      	cmp	r0, r4
 8004f5e:	d0f8      	beq.n	8004f52 <sbrk_aligned+0x22>
 8004f60:	1a21      	subs	r1, r4, r0
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fb92 	bl	800568c <_sbrk_r>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d1f2      	bne.n	8004f52 <sbrk_aligned+0x22>
 8004f6c:	e7ef      	b.n	8004f4e <sbrk_aligned+0x1e>
 8004f6e:	bf00      	nop
 8004f70:	200003b0 	.word	0x200003b0

08004f74 <_malloc_r>:
 8004f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f78:	1ccd      	adds	r5, r1, #3
 8004f7a:	f025 0503 	bic.w	r5, r5, #3
 8004f7e:	3508      	adds	r5, #8
 8004f80:	2d0c      	cmp	r5, #12
 8004f82:	bf38      	it	cc
 8004f84:	250c      	movcc	r5, #12
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	4606      	mov	r6, r0
 8004f8a:	db01      	blt.n	8004f90 <_malloc_r+0x1c>
 8004f8c:	42a9      	cmp	r1, r5
 8004f8e:	d904      	bls.n	8004f9a <_malloc_r+0x26>
 8004f90:	230c      	movs	r3, #12
 8004f92:	6033      	str	r3, [r6, #0]
 8004f94:	2000      	movs	r0, #0
 8004f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005070 <_malloc_r+0xfc>
 8004f9e:	f000 f869 	bl	8005074 <__malloc_lock>
 8004fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa6:	461c      	mov	r4, r3
 8004fa8:	bb44      	cbnz	r4, 8004ffc <_malloc_r+0x88>
 8004faa:	4629      	mov	r1, r5
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff ffbf 	bl	8004f30 <sbrk_aligned>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	d158      	bne.n	800506a <_malloc_r+0xf6>
 8004fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8004fbc:	4627      	mov	r7, r4
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d143      	bne.n	800504a <_malloc_r+0xd6>
 8004fc2:	2c00      	cmp	r4, #0
 8004fc4:	d04b      	beq.n	800505e <_malloc_r+0xea>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	4639      	mov	r1, r7
 8004fca:	4630      	mov	r0, r6
 8004fcc:	eb04 0903 	add.w	r9, r4, r3
 8004fd0:	f000 fb5c 	bl	800568c <_sbrk_r>
 8004fd4:	4581      	cmp	r9, r0
 8004fd6:	d142      	bne.n	800505e <_malloc_r+0xea>
 8004fd8:	6821      	ldr	r1, [r4, #0]
 8004fda:	1a6d      	subs	r5, r5, r1
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7ff ffa6 	bl	8004f30 <sbrk_aligned>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d03a      	beq.n	800505e <_malloc_r+0xea>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	442b      	add	r3, r5
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	bb62      	cbnz	r2, 8005050 <_malloc_r+0xdc>
 8004ff6:	f8c8 7000 	str.w	r7, [r8]
 8004ffa:	e00f      	b.n	800501c <_malloc_r+0xa8>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	1b52      	subs	r2, r2, r5
 8005000:	d420      	bmi.n	8005044 <_malloc_r+0xd0>
 8005002:	2a0b      	cmp	r2, #11
 8005004:	d917      	bls.n	8005036 <_malloc_r+0xc2>
 8005006:	1961      	adds	r1, r4, r5
 8005008:	42a3      	cmp	r3, r4
 800500a:	6025      	str	r5, [r4, #0]
 800500c:	bf18      	it	ne
 800500e:	6059      	strne	r1, [r3, #4]
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	bf08      	it	eq
 8005014:	f8c8 1000 	streq.w	r1, [r8]
 8005018:	5162      	str	r2, [r4, r5]
 800501a:	604b      	str	r3, [r1, #4]
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f82f 	bl	8005080 <__malloc_unlock>
 8005022:	f104 000b 	add.w	r0, r4, #11
 8005026:	1d23      	adds	r3, r4, #4
 8005028:	f020 0007 	bic.w	r0, r0, #7
 800502c:	1ac2      	subs	r2, r0, r3
 800502e:	bf1c      	itt	ne
 8005030:	1a1b      	subne	r3, r3, r0
 8005032:	50a3      	strne	r3, [r4, r2]
 8005034:	e7af      	b.n	8004f96 <_malloc_r+0x22>
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	42a3      	cmp	r3, r4
 800503a:	bf0c      	ite	eq
 800503c:	f8c8 2000 	streq.w	r2, [r8]
 8005040:	605a      	strne	r2, [r3, #4]
 8005042:	e7eb      	b.n	800501c <_malloc_r+0xa8>
 8005044:	4623      	mov	r3, r4
 8005046:	6864      	ldr	r4, [r4, #4]
 8005048:	e7ae      	b.n	8004fa8 <_malloc_r+0x34>
 800504a:	463c      	mov	r4, r7
 800504c:	687f      	ldr	r7, [r7, #4]
 800504e:	e7b6      	b.n	8004fbe <_malloc_r+0x4a>
 8005050:	461a      	mov	r2, r3
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	42a3      	cmp	r3, r4
 8005056:	d1fb      	bne.n	8005050 <_malloc_r+0xdc>
 8005058:	2300      	movs	r3, #0
 800505a:	6053      	str	r3, [r2, #4]
 800505c:	e7de      	b.n	800501c <_malloc_r+0xa8>
 800505e:	230c      	movs	r3, #12
 8005060:	6033      	str	r3, [r6, #0]
 8005062:	4630      	mov	r0, r6
 8005064:	f000 f80c 	bl	8005080 <__malloc_unlock>
 8005068:	e794      	b.n	8004f94 <_malloc_r+0x20>
 800506a:	6005      	str	r5, [r0, #0]
 800506c:	e7d6      	b.n	800501c <_malloc_r+0xa8>
 800506e:	bf00      	nop
 8005070:	200003b4 	.word	0x200003b4

08005074 <__malloc_lock>:
 8005074:	4801      	ldr	r0, [pc, #4]	@ (800507c <__malloc_lock+0x8>)
 8005076:	f7ff bf0f 	b.w	8004e98 <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	200003ac 	.word	0x200003ac

08005080 <__malloc_unlock>:
 8005080:	4801      	ldr	r0, [pc, #4]	@ (8005088 <__malloc_unlock+0x8>)
 8005082:	f7ff bf0a 	b.w	8004e9a <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	200003ac 	.word	0x200003ac

0800508c <__ssputs_r>:
 800508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005090:	688e      	ldr	r6, [r1, #8]
 8005092:	461f      	mov	r7, r3
 8005094:	42be      	cmp	r6, r7
 8005096:	680b      	ldr	r3, [r1, #0]
 8005098:	4682      	mov	sl, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4690      	mov	r8, r2
 800509e:	d82d      	bhi.n	80050fc <__ssputs_r+0x70>
 80050a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050a8:	d026      	beq.n	80050f8 <__ssputs_r+0x6c>
 80050aa:	6965      	ldr	r5, [r4, #20]
 80050ac:	6909      	ldr	r1, [r1, #16]
 80050ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050b2:	eba3 0901 	sub.w	r9, r3, r1
 80050b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050ba:	1c7b      	adds	r3, r7, #1
 80050bc:	444b      	add	r3, r9
 80050be:	106d      	asrs	r5, r5, #1
 80050c0:	429d      	cmp	r5, r3
 80050c2:	bf38      	it	cc
 80050c4:	461d      	movcc	r5, r3
 80050c6:	0553      	lsls	r3, r2, #21
 80050c8:	d527      	bpl.n	800511a <__ssputs_r+0x8e>
 80050ca:	4629      	mov	r1, r5
 80050cc:	f7ff ff52 	bl	8004f74 <_malloc_r>
 80050d0:	4606      	mov	r6, r0
 80050d2:	b360      	cbz	r0, 800512e <__ssputs_r+0xa2>
 80050d4:	6921      	ldr	r1, [r4, #16]
 80050d6:	464a      	mov	r2, r9
 80050d8:	f000 fae8 	bl	80056ac <memcpy>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	6126      	str	r6, [r4, #16]
 80050ea:	6165      	str	r5, [r4, #20]
 80050ec:	444e      	add	r6, r9
 80050ee:	eba5 0509 	sub.w	r5, r5, r9
 80050f2:	6026      	str	r6, [r4, #0]
 80050f4:	60a5      	str	r5, [r4, #8]
 80050f6:	463e      	mov	r6, r7
 80050f8:	42be      	cmp	r6, r7
 80050fa:	d900      	bls.n	80050fe <__ssputs_r+0x72>
 80050fc:	463e      	mov	r6, r7
 80050fe:	6820      	ldr	r0, [r4, #0]
 8005100:	4632      	mov	r2, r6
 8005102:	4641      	mov	r1, r8
 8005104:	f000 faa8 	bl	8005658 <memmove>
 8005108:	68a3      	ldr	r3, [r4, #8]
 800510a:	1b9b      	subs	r3, r3, r6
 800510c:	60a3      	str	r3, [r4, #8]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	4433      	add	r3, r6
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	2000      	movs	r0, #0
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	462a      	mov	r2, r5
 800511c:	f000 fad4 	bl	80056c8 <_realloc_r>
 8005120:	4606      	mov	r6, r0
 8005122:	2800      	cmp	r0, #0
 8005124:	d1e0      	bne.n	80050e8 <__ssputs_r+0x5c>
 8005126:	6921      	ldr	r1, [r4, #16]
 8005128:	4650      	mov	r0, sl
 800512a:	f7ff feb7 	bl	8004e9c <_free_r>
 800512e:	230c      	movs	r3, #12
 8005130:	f8ca 3000 	str.w	r3, [sl]
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e7e9      	b.n	8005116 <__ssputs_r+0x8a>
	...

08005144 <_svfiprintf_r>:
 8005144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005148:	4698      	mov	r8, r3
 800514a:	898b      	ldrh	r3, [r1, #12]
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	b09d      	sub	sp, #116	@ 0x74
 8005150:	4607      	mov	r7, r0
 8005152:	460d      	mov	r5, r1
 8005154:	4614      	mov	r4, r2
 8005156:	d510      	bpl.n	800517a <_svfiprintf_r+0x36>
 8005158:	690b      	ldr	r3, [r1, #16]
 800515a:	b973      	cbnz	r3, 800517a <_svfiprintf_r+0x36>
 800515c:	2140      	movs	r1, #64	@ 0x40
 800515e:	f7ff ff09 	bl	8004f74 <_malloc_r>
 8005162:	6028      	str	r0, [r5, #0]
 8005164:	6128      	str	r0, [r5, #16]
 8005166:	b930      	cbnz	r0, 8005176 <_svfiprintf_r+0x32>
 8005168:	230c      	movs	r3, #12
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	b01d      	add	sp, #116	@ 0x74
 8005172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005176:	2340      	movs	r3, #64	@ 0x40
 8005178:	616b      	str	r3, [r5, #20]
 800517a:	2300      	movs	r3, #0
 800517c:	9309      	str	r3, [sp, #36]	@ 0x24
 800517e:	2320      	movs	r3, #32
 8005180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005184:	f8cd 800c 	str.w	r8, [sp, #12]
 8005188:	2330      	movs	r3, #48	@ 0x30
 800518a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005328 <_svfiprintf_r+0x1e4>
 800518e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005192:	f04f 0901 	mov.w	r9, #1
 8005196:	4623      	mov	r3, r4
 8005198:	469a      	mov	sl, r3
 800519a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800519e:	b10a      	cbz	r2, 80051a4 <_svfiprintf_r+0x60>
 80051a0:	2a25      	cmp	r2, #37	@ 0x25
 80051a2:	d1f9      	bne.n	8005198 <_svfiprintf_r+0x54>
 80051a4:	ebba 0b04 	subs.w	fp, sl, r4
 80051a8:	d00b      	beq.n	80051c2 <_svfiprintf_r+0x7e>
 80051aa:	465b      	mov	r3, fp
 80051ac:	4622      	mov	r2, r4
 80051ae:	4629      	mov	r1, r5
 80051b0:	4638      	mov	r0, r7
 80051b2:	f7ff ff6b 	bl	800508c <__ssputs_r>
 80051b6:	3001      	adds	r0, #1
 80051b8:	f000 80a7 	beq.w	800530a <_svfiprintf_r+0x1c6>
 80051bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051be:	445a      	add	r2, fp
 80051c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80051c2:	f89a 3000 	ldrb.w	r3, [sl]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 809f 	beq.w	800530a <_svfiprintf_r+0x1c6>
 80051cc:	2300      	movs	r3, #0
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d6:	f10a 0a01 	add.w	sl, sl, #1
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	9307      	str	r3, [sp, #28]
 80051de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051e4:	4654      	mov	r4, sl
 80051e6:	2205      	movs	r2, #5
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	484e      	ldr	r0, [pc, #312]	@ (8005328 <_svfiprintf_r+0x1e4>)
 80051ee:	f7fa fff7 	bl	80001e0 <memchr>
 80051f2:	9a04      	ldr	r2, [sp, #16]
 80051f4:	b9d8      	cbnz	r0, 800522e <_svfiprintf_r+0xea>
 80051f6:	06d0      	lsls	r0, r2, #27
 80051f8:	bf44      	itt	mi
 80051fa:	2320      	movmi	r3, #32
 80051fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005200:	0711      	lsls	r1, r2, #28
 8005202:	bf44      	itt	mi
 8005204:	232b      	movmi	r3, #43	@ 0x2b
 8005206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800520a:	f89a 3000 	ldrb.w	r3, [sl]
 800520e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005210:	d015      	beq.n	800523e <_svfiprintf_r+0xfa>
 8005212:	9a07      	ldr	r2, [sp, #28]
 8005214:	4654      	mov	r4, sl
 8005216:	2000      	movs	r0, #0
 8005218:	f04f 0c0a 	mov.w	ip, #10
 800521c:	4621      	mov	r1, r4
 800521e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005222:	3b30      	subs	r3, #48	@ 0x30
 8005224:	2b09      	cmp	r3, #9
 8005226:	d94b      	bls.n	80052c0 <_svfiprintf_r+0x17c>
 8005228:	b1b0      	cbz	r0, 8005258 <_svfiprintf_r+0x114>
 800522a:	9207      	str	r2, [sp, #28]
 800522c:	e014      	b.n	8005258 <_svfiprintf_r+0x114>
 800522e:	eba0 0308 	sub.w	r3, r0, r8
 8005232:	fa09 f303 	lsl.w	r3, r9, r3
 8005236:	4313      	orrs	r3, r2
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	46a2      	mov	sl, r4
 800523c:	e7d2      	b.n	80051e4 <_svfiprintf_r+0xa0>
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	1d19      	adds	r1, r3, #4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	9103      	str	r1, [sp, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	bfbb      	ittet	lt
 800524a:	425b      	neglt	r3, r3
 800524c:	f042 0202 	orrlt.w	r2, r2, #2
 8005250:	9307      	strge	r3, [sp, #28]
 8005252:	9307      	strlt	r3, [sp, #28]
 8005254:	bfb8      	it	lt
 8005256:	9204      	strlt	r2, [sp, #16]
 8005258:	7823      	ldrb	r3, [r4, #0]
 800525a:	2b2e      	cmp	r3, #46	@ 0x2e
 800525c:	d10a      	bne.n	8005274 <_svfiprintf_r+0x130>
 800525e:	7863      	ldrb	r3, [r4, #1]
 8005260:	2b2a      	cmp	r3, #42	@ 0x2a
 8005262:	d132      	bne.n	80052ca <_svfiprintf_r+0x186>
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	1d1a      	adds	r2, r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	9203      	str	r2, [sp, #12]
 800526c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005270:	3402      	adds	r4, #2
 8005272:	9305      	str	r3, [sp, #20]
 8005274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005338 <_svfiprintf_r+0x1f4>
 8005278:	7821      	ldrb	r1, [r4, #0]
 800527a:	2203      	movs	r2, #3
 800527c:	4650      	mov	r0, sl
 800527e:	f7fa ffaf 	bl	80001e0 <memchr>
 8005282:	b138      	cbz	r0, 8005294 <_svfiprintf_r+0x150>
 8005284:	9b04      	ldr	r3, [sp, #16]
 8005286:	eba0 000a 	sub.w	r0, r0, sl
 800528a:	2240      	movs	r2, #64	@ 0x40
 800528c:	4082      	lsls	r2, r0
 800528e:	4313      	orrs	r3, r2
 8005290:	3401      	adds	r4, #1
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005298:	4824      	ldr	r0, [pc, #144]	@ (800532c <_svfiprintf_r+0x1e8>)
 800529a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800529e:	2206      	movs	r2, #6
 80052a0:	f7fa ff9e 	bl	80001e0 <memchr>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d036      	beq.n	8005316 <_svfiprintf_r+0x1d2>
 80052a8:	4b21      	ldr	r3, [pc, #132]	@ (8005330 <_svfiprintf_r+0x1ec>)
 80052aa:	bb1b      	cbnz	r3, 80052f4 <_svfiprintf_r+0x1b0>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	3307      	adds	r3, #7
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	3308      	adds	r3, #8
 80052b6:	9303      	str	r3, [sp, #12]
 80052b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ba:	4433      	add	r3, r6
 80052bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80052be:	e76a      	b.n	8005196 <_svfiprintf_r+0x52>
 80052c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c4:	460c      	mov	r4, r1
 80052c6:	2001      	movs	r0, #1
 80052c8:	e7a8      	b.n	800521c <_svfiprintf_r+0xd8>
 80052ca:	2300      	movs	r3, #0
 80052cc:	3401      	adds	r4, #1
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	4619      	mov	r1, r3
 80052d2:	f04f 0c0a 	mov.w	ip, #10
 80052d6:	4620      	mov	r0, r4
 80052d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052dc:	3a30      	subs	r2, #48	@ 0x30
 80052de:	2a09      	cmp	r2, #9
 80052e0:	d903      	bls.n	80052ea <_svfiprintf_r+0x1a6>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0c6      	beq.n	8005274 <_svfiprintf_r+0x130>
 80052e6:	9105      	str	r1, [sp, #20]
 80052e8:	e7c4      	b.n	8005274 <_svfiprintf_r+0x130>
 80052ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ee:	4604      	mov	r4, r0
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7f0      	b.n	80052d6 <_svfiprintf_r+0x192>
 80052f4:	ab03      	add	r3, sp, #12
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	462a      	mov	r2, r5
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <_svfiprintf_r+0x1f0>)
 80052fc:	a904      	add	r1, sp, #16
 80052fe:	4638      	mov	r0, r7
 8005300:	f3af 8000 	nop.w
 8005304:	1c42      	adds	r2, r0, #1
 8005306:	4606      	mov	r6, r0
 8005308:	d1d6      	bne.n	80052b8 <_svfiprintf_r+0x174>
 800530a:	89ab      	ldrh	r3, [r5, #12]
 800530c:	065b      	lsls	r3, r3, #25
 800530e:	f53f af2d 	bmi.w	800516c <_svfiprintf_r+0x28>
 8005312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005314:	e72c      	b.n	8005170 <_svfiprintf_r+0x2c>
 8005316:	ab03      	add	r3, sp, #12
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	462a      	mov	r2, r5
 800531c:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <_svfiprintf_r+0x1f0>)
 800531e:	a904      	add	r1, sp, #16
 8005320:	4638      	mov	r0, r7
 8005322:	f000 f879 	bl	8005418 <_printf_i>
 8005326:	e7ed      	b.n	8005304 <_svfiprintf_r+0x1c0>
 8005328:	08005790 	.word	0x08005790
 800532c:	0800579a 	.word	0x0800579a
 8005330:	00000000 	.word	0x00000000
 8005334:	0800508d 	.word	0x0800508d
 8005338:	08005796 	.word	0x08005796

0800533c <_printf_common>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	4616      	mov	r6, r2
 8005342:	4698      	mov	r8, r3
 8005344:	688a      	ldr	r2, [r1, #8]
 8005346:	690b      	ldr	r3, [r1, #16]
 8005348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	bfb8      	it	lt
 8005350:	4613      	movlt	r3, r2
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005358:	4607      	mov	r7, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b10a      	cbz	r2, 8005362 <_printf_common+0x26>
 800535e:	3301      	adds	r3, #1
 8005360:	6033      	str	r3, [r6, #0]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0699      	lsls	r1, r3, #26
 8005366:	bf42      	ittt	mi
 8005368:	6833      	ldrmi	r3, [r6, #0]
 800536a:	3302      	addmi	r3, #2
 800536c:	6033      	strmi	r3, [r6, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	f015 0506 	ands.w	r5, r5, #6
 8005374:	d106      	bne.n	8005384 <_printf_common+0x48>
 8005376:	f104 0a19 	add.w	sl, r4, #25
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	6832      	ldr	r2, [r6, #0]
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc26      	bgt.n	80053d2 <_printf_common+0x96>
 8005384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	3b00      	subs	r3, #0
 800538c:	bf18      	it	ne
 800538e:	2301      	movne	r3, #1
 8005390:	0692      	lsls	r2, r2, #26
 8005392:	d42b      	bmi.n	80053ec <_printf_common+0xb0>
 8005394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005398:	4641      	mov	r1, r8
 800539a:	4638      	mov	r0, r7
 800539c:	47c8      	blx	r9
 800539e:	3001      	adds	r0, #1
 80053a0:	d01e      	beq.n	80053e0 <_printf_common+0xa4>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	6922      	ldr	r2, [r4, #16]
 80053a6:	f003 0306 	and.w	r3, r3, #6
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	bf02      	ittt	eq
 80053ae:	68e5      	ldreq	r5, [r4, #12]
 80053b0:	6833      	ldreq	r3, [r6, #0]
 80053b2:	1aed      	subeq	r5, r5, r3
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	bf0c      	ite	eq
 80053b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053bc:	2500      	movne	r5, #0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfc4      	itt	gt
 80053c2:	1a9b      	subgt	r3, r3, r2
 80053c4:	18ed      	addgt	r5, r5, r3
 80053c6:	2600      	movs	r6, #0
 80053c8:	341a      	adds	r4, #26
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d11a      	bne.n	8005404 <_printf_common+0xc8>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e008      	b.n	80053e4 <_printf_common+0xa8>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4641      	mov	r1, r8
 80053d8:	4638      	mov	r0, r7
 80053da:	47c8      	blx	r9
 80053dc:	3001      	adds	r0, #1
 80053de:	d103      	bne.n	80053e8 <_printf_common+0xac>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	3501      	adds	r5, #1
 80053ea:	e7c6      	b.n	800537a <_printf_common+0x3e>
 80053ec:	18e1      	adds	r1, r4, r3
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	2030      	movs	r0, #48	@ 0x30
 80053f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053f6:	4422      	add	r2, r4
 80053f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005400:	3302      	adds	r3, #2
 8005402:	e7c7      	b.n	8005394 <_printf_common+0x58>
 8005404:	2301      	movs	r3, #1
 8005406:	4622      	mov	r2, r4
 8005408:	4641      	mov	r1, r8
 800540a:	4638      	mov	r0, r7
 800540c:	47c8      	blx	r9
 800540e:	3001      	adds	r0, #1
 8005410:	d0e6      	beq.n	80053e0 <_printf_common+0xa4>
 8005412:	3601      	adds	r6, #1
 8005414:	e7d9      	b.n	80053ca <_printf_common+0x8e>
	...

08005418 <_printf_i>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	7e0f      	ldrb	r7, [r1, #24]
 800541e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005420:	2f78      	cmp	r7, #120	@ 0x78
 8005422:	4691      	mov	r9, r2
 8005424:	4680      	mov	r8, r0
 8005426:	460c      	mov	r4, r1
 8005428:	469a      	mov	sl, r3
 800542a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800542e:	d807      	bhi.n	8005440 <_printf_i+0x28>
 8005430:	2f62      	cmp	r7, #98	@ 0x62
 8005432:	d80a      	bhi.n	800544a <_printf_i+0x32>
 8005434:	2f00      	cmp	r7, #0
 8005436:	f000 80d2 	beq.w	80055de <_printf_i+0x1c6>
 800543a:	2f58      	cmp	r7, #88	@ 0x58
 800543c:	f000 80b9 	beq.w	80055b2 <_printf_i+0x19a>
 8005440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005448:	e03a      	b.n	80054c0 <_printf_i+0xa8>
 800544a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800544e:	2b15      	cmp	r3, #21
 8005450:	d8f6      	bhi.n	8005440 <_printf_i+0x28>
 8005452:	a101      	add	r1, pc, #4	@ (adr r1, 8005458 <_printf_i+0x40>)
 8005454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005458:	080054b1 	.word	0x080054b1
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005441 	.word	0x08005441
 8005464:	08005441 	.word	0x08005441
 8005468:	08005441 	.word	0x08005441
 800546c:	08005441 	.word	0x08005441
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005441 	.word	0x08005441
 8005478:	08005441 	.word	0x08005441
 800547c:	08005441 	.word	0x08005441
 8005480:	08005441 	.word	0x08005441
 8005484:	080055c5 	.word	0x080055c5
 8005488:	080054ef 	.word	0x080054ef
 800548c:	0800557f 	.word	0x0800557f
 8005490:	08005441 	.word	0x08005441
 8005494:	08005441 	.word	0x08005441
 8005498:	080055e7 	.word	0x080055e7
 800549c:	08005441 	.word	0x08005441
 80054a0:	080054ef 	.word	0x080054ef
 80054a4:	08005441 	.word	0x08005441
 80054a8:	08005441 	.word	0x08005441
 80054ac:	08005587 	.word	0x08005587
 80054b0:	6833      	ldr	r3, [r6, #0]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6032      	str	r2, [r6, #0]
 80054b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054c0:	2301      	movs	r3, #1
 80054c2:	e09d      	b.n	8005600 <_printf_i+0x1e8>
 80054c4:	6833      	ldr	r3, [r6, #0]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1d19      	adds	r1, r3, #4
 80054ca:	6031      	str	r1, [r6, #0]
 80054cc:	0606      	lsls	r6, r0, #24
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0xbc>
 80054d0:	681d      	ldr	r5, [r3, #0]
 80054d2:	e003      	b.n	80054dc <_printf_i+0xc4>
 80054d4:	0645      	lsls	r5, r0, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0xb8>
 80054d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054dc:	2d00      	cmp	r5, #0
 80054de:	da03      	bge.n	80054e8 <_printf_i+0xd0>
 80054e0:	232d      	movs	r3, #45	@ 0x2d
 80054e2:	426d      	negs	r5, r5
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e8:	4859      	ldr	r0, [pc, #356]	@ (8005650 <_printf_i+0x238>)
 80054ea:	230a      	movs	r3, #10
 80054ec:	e011      	b.n	8005512 <_printf_i+0xfa>
 80054ee:	6821      	ldr	r1, [r4, #0]
 80054f0:	6833      	ldr	r3, [r6, #0]
 80054f2:	0608      	lsls	r0, r1, #24
 80054f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054f8:	d402      	bmi.n	8005500 <_printf_i+0xe8>
 80054fa:	0649      	lsls	r1, r1, #25
 80054fc:	bf48      	it	mi
 80054fe:	b2ad      	uxthmi	r5, r5
 8005500:	2f6f      	cmp	r7, #111	@ 0x6f
 8005502:	4853      	ldr	r0, [pc, #332]	@ (8005650 <_printf_i+0x238>)
 8005504:	6033      	str	r3, [r6, #0]
 8005506:	bf14      	ite	ne
 8005508:	230a      	movne	r3, #10
 800550a:	2308      	moveq	r3, #8
 800550c:	2100      	movs	r1, #0
 800550e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005512:	6866      	ldr	r6, [r4, #4]
 8005514:	60a6      	str	r6, [r4, #8]
 8005516:	2e00      	cmp	r6, #0
 8005518:	bfa2      	ittt	ge
 800551a:	6821      	ldrge	r1, [r4, #0]
 800551c:	f021 0104 	bicge.w	r1, r1, #4
 8005520:	6021      	strge	r1, [r4, #0]
 8005522:	b90d      	cbnz	r5, 8005528 <_printf_i+0x110>
 8005524:	2e00      	cmp	r6, #0
 8005526:	d04b      	beq.n	80055c0 <_printf_i+0x1a8>
 8005528:	4616      	mov	r6, r2
 800552a:	fbb5 f1f3 	udiv	r1, r5, r3
 800552e:	fb03 5711 	mls	r7, r3, r1, r5
 8005532:	5dc7      	ldrb	r7, [r0, r7]
 8005534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005538:	462f      	mov	r7, r5
 800553a:	42bb      	cmp	r3, r7
 800553c:	460d      	mov	r5, r1
 800553e:	d9f4      	bls.n	800552a <_printf_i+0x112>
 8005540:	2b08      	cmp	r3, #8
 8005542:	d10b      	bne.n	800555c <_printf_i+0x144>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	07df      	lsls	r7, r3, #31
 8005548:	d508      	bpl.n	800555c <_printf_i+0x144>
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	6861      	ldr	r1, [r4, #4]
 800554e:	4299      	cmp	r1, r3
 8005550:	bfde      	ittt	le
 8005552:	2330      	movle	r3, #48	@ 0x30
 8005554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800555c:	1b92      	subs	r2, r2, r6
 800555e:	6122      	str	r2, [r4, #16]
 8005560:	f8cd a000 	str.w	sl, [sp]
 8005564:	464b      	mov	r3, r9
 8005566:	aa03      	add	r2, sp, #12
 8005568:	4621      	mov	r1, r4
 800556a:	4640      	mov	r0, r8
 800556c:	f7ff fee6 	bl	800533c <_printf_common>
 8005570:	3001      	adds	r0, #1
 8005572:	d14a      	bne.n	800560a <_printf_i+0x1f2>
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	b004      	add	sp, #16
 800557a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	f043 0320 	orr.w	r3, r3, #32
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	4833      	ldr	r0, [pc, #204]	@ (8005654 <_printf_i+0x23c>)
 8005588:	2778      	movs	r7, #120	@ 0x78
 800558a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	6831      	ldr	r1, [r6, #0]
 8005592:	061f      	lsls	r7, r3, #24
 8005594:	f851 5b04 	ldr.w	r5, [r1], #4
 8005598:	d402      	bmi.n	80055a0 <_printf_i+0x188>
 800559a:	065f      	lsls	r7, r3, #25
 800559c:	bf48      	it	mi
 800559e:	b2ad      	uxthmi	r5, r5
 80055a0:	6031      	str	r1, [r6, #0]
 80055a2:	07d9      	lsls	r1, r3, #31
 80055a4:	bf44      	itt	mi
 80055a6:	f043 0320 	orrmi.w	r3, r3, #32
 80055aa:	6023      	strmi	r3, [r4, #0]
 80055ac:	b11d      	cbz	r5, 80055b6 <_printf_i+0x19e>
 80055ae:	2310      	movs	r3, #16
 80055b0:	e7ac      	b.n	800550c <_printf_i+0xf4>
 80055b2:	4827      	ldr	r0, [pc, #156]	@ (8005650 <_printf_i+0x238>)
 80055b4:	e7e9      	b.n	800558a <_printf_i+0x172>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	f023 0320 	bic.w	r3, r3, #32
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	e7f6      	b.n	80055ae <_printf_i+0x196>
 80055c0:	4616      	mov	r6, r2
 80055c2:	e7bd      	b.n	8005540 <_printf_i+0x128>
 80055c4:	6833      	ldr	r3, [r6, #0]
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	6961      	ldr	r1, [r4, #20]
 80055ca:	1d18      	adds	r0, r3, #4
 80055cc:	6030      	str	r0, [r6, #0]
 80055ce:	062e      	lsls	r6, r5, #24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0x1c0>
 80055d4:	6019      	str	r1, [r3, #0]
 80055d6:	e002      	b.n	80055de <_printf_i+0x1c6>
 80055d8:	0668      	lsls	r0, r5, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0x1bc>
 80055dc:	8019      	strh	r1, [r3, #0]
 80055de:	2300      	movs	r3, #0
 80055e0:	6123      	str	r3, [r4, #16]
 80055e2:	4616      	mov	r6, r2
 80055e4:	e7bc      	b.n	8005560 <_printf_i+0x148>
 80055e6:	6833      	ldr	r3, [r6, #0]
 80055e8:	1d1a      	adds	r2, r3, #4
 80055ea:	6032      	str	r2, [r6, #0]
 80055ec:	681e      	ldr	r6, [r3, #0]
 80055ee:	6862      	ldr	r2, [r4, #4]
 80055f0:	2100      	movs	r1, #0
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7fa fdf4 	bl	80001e0 <memchr>
 80055f8:	b108      	cbz	r0, 80055fe <_printf_i+0x1e6>
 80055fa:	1b80      	subs	r0, r0, r6
 80055fc:	6060      	str	r0, [r4, #4]
 80055fe:	6863      	ldr	r3, [r4, #4]
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	2300      	movs	r3, #0
 8005604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005608:	e7aa      	b.n	8005560 <_printf_i+0x148>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	4632      	mov	r2, r6
 800560e:	4649      	mov	r1, r9
 8005610:	4640      	mov	r0, r8
 8005612:	47d0      	blx	sl
 8005614:	3001      	adds	r0, #1
 8005616:	d0ad      	beq.n	8005574 <_printf_i+0x15c>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	079b      	lsls	r3, r3, #30
 800561c:	d413      	bmi.n	8005646 <_printf_i+0x22e>
 800561e:	68e0      	ldr	r0, [r4, #12]
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	4298      	cmp	r0, r3
 8005624:	bfb8      	it	lt
 8005626:	4618      	movlt	r0, r3
 8005628:	e7a6      	b.n	8005578 <_printf_i+0x160>
 800562a:	2301      	movs	r3, #1
 800562c:	4632      	mov	r2, r6
 800562e:	4649      	mov	r1, r9
 8005630:	4640      	mov	r0, r8
 8005632:	47d0      	blx	sl
 8005634:	3001      	adds	r0, #1
 8005636:	d09d      	beq.n	8005574 <_printf_i+0x15c>
 8005638:	3501      	adds	r5, #1
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	9903      	ldr	r1, [sp, #12]
 800563e:	1a5b      	subs	r3, r3, r1
 8005640:	42ab      	cmp	r3, r5
 8005642:	dcf2      	bgt.n	800562a <_printf_i+0x212>
 8005644:	e7eb      	b.n	800561e <_printf_i+0x206>
 8005646:	2500      	movs	r5, #0
 8005648:	f104 0619 	add.w	r6, r4, #25
 800564c:	e7f5      	b.n	800563a <_printf_i+0x222>
 800564e:	bf00      	nop
 8005650:	080057a1 	.word	0x080057a1
 8005654:	080057b2 	.word	0x080057b2

08005658 <memmove>:
 8005658:	4288      	cmp	r0, r1
 800565a:	b510      	push	{r4, lr}
 800565c:	eb01 0402 	add.w	r4, r1, r2
 8005660:	d902      	bls.n	8005668 <memmove+0x10>
 8005662:	4284      	cmp	r4, r0
 8005664:	4623      	mov	r3, r4
 8005666:	d807      	bhi.n	8005678 <memmove+0x20>
 8005668:	1e43      	subs	r3, r0, #1
 800566a:	42a1      	cmp	r1, r4
 800566c:	d008      	beq.n	8005680 <memmove+0x28>
 800566e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005676:	e7f8      	b.n	800566a <memmove+0x12>
 8005678:	4402      	add	r2, r0
 800567a:	4601      	mov	r1, r0
 800567c:	428a      	cmp	r2, r1
 800567e:	d100      	bne.n	8005682 <memmove+0x2a>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800568a:	e7f7      	b.n	800567c <memmove+0x24>

0800568c <_sbrk_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d06      	ldr	r5, [pc, #24]	@ (80056a8 <_sbrk_r+0x1c>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fb fdf8 	bl	800128c <_sbrk>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_sbrk_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_sbrk_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	200003a8 	.word	0x200003a8

080056ac <memcpy>:
 80056ac:	440a      	add	r2, r1
 80056ae:	4291      	cmp	r1, r2
 80056b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b4:	d100      	bne.n	80056b8 <memcpy+0xc>
 80056b6:	4770      	bx	lr
 80056b8:	b510      	push	{r4, lr}
 80056ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c2:	4291      	cmp	r1, r2
 80056c4:	d1f9      	bne.n	80056ba <memcpy+0xe>
 80056c6:	bd10      	pop	{r4, pc}

080056c8 <_realloc_r>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	4680      	mov	r8, r0
 80056ce:	4615      	mov	r5, r2
 80056d0:	460c      	mov	r4, r1
 80056d2:	b921      	cbnz	r1, 80056de <_realloc_r+0x16>
 80056d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d8:	4611      	mov	r1, r2
 80056da:	f7ff bc4b 	b.w	8004f74 <_malloc_r>
 80056de:	b92a      	cbnz	r2, 80056ec <_realloc_r+0x24>
 80056e0:	f7ff fbdc 	bl	8004e9c <_free_r>
 80056e4:	2400      	movs	r4, #0
 80056e6:	4620      	mov	r0, r4
 80056e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ec:	f000 f81a 	bl	8005724 <_malloc_usable_size_r>
 80056f0:	4285      	cmp	r5, r0
 80056f2:	4606      	mov	r6, r0
 80056f4:	d802      	bhi.n	80056fc <_realloc_r+0x34>
 80056f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056fa:	d8f4      	bhi.n	80056e6 <_realloc_r+0x1e>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4640      	mov	r0, r8
 8005700:	f7ff fc38 	bl	8004f74 <_malloc_r>
 8005704:	4607      	mov	r7, r0
 8005706:	2800      	cmp	r0, #0
 8005708:	d0ec      	beq.n	80056e4 <_realloc_r+0x1c>
 800570a:	42b5      	cmp	r5, r6
 800570c:	462a      	mov	r2, r5
 800570e:	4621      	mov	r1, r4
 8005710:	bf28      	it	cs
 8005712:	4632      	movcs	r2, r6
 8005714:	f7ff ffca 	bl	80056ac <memcpy>
 8005718:	4621      	mov	r1, r4
 800571a:	4640      	mov	r0, r8
 800571c:	f7ff fbbe 	bl	8004e9c <_free_r>
 8005720:	463c      	mov	r4, r7
 8005722:	e7e0      	b.n	80056e6 <_realloc_r+0x1e>

08005724 <_malloc_usable_size_r>:
 8005724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005728:	1f18      	subs	r0, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	bfbc      	itt	lt
 800572e:	580b      	ldrlt	r3, [r1, r0]
 8005730:	18c0      	addlt	r0, r0, r3
 8005732:	4770      	bx	lr

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
